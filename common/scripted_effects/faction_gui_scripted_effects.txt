# The following scripted effect sets-up the faction at game start.
faction_gui_initial = {
	# Put simply an array stores a list of things, used here to store the list of parties and list of seats.

	# faction_seat_array stores the list of seat numbers for each party
	add_to_array = { faction_seat_array = 44 } # Party Democrats
	add_to_array = { faction_seat_array = 8 } # Party Communists 
	add_to_array = { faction_seat_array = 0 } # Party Fascists
	add_to_array = { faction_seat_array = 48 } # Party Monarchists
    add_to_array = { faction_dem_p_array = 50 }   
    add_to_array = { faction_dem_p_array = 50 }    
    add_to_array = { faction_com_p_array = 50 }   
    add_to_array = { faction_com_p_array = 50 } 
    add_to_array = { faction_fas_p_array = 50 }   
    add_to_array = { faction_fas_p_array = 50 } 
    add_to_array = { faction_mon_p_array = 50 }   
    add_to_array = { faction_mon_p_array = 50 }     

	# faction_member_array stores the list of parties
	# This basically assigns an id for each party, so Party A = 1, Party B = 2, etc. (must start from 1 and is in order)
	add_to_array = { faction_member_array = 1 } # Party Democrats
	add_to_array = { faction_member_array = 2 } # Party Communists
	add_to_array = { faction_member_array = 3 } # Party Fascists
	add_to_array = { faction_member_array = 4 } # Party Monarchists
	add_to_array = { faction_dem_m_array = 1 } 
	add_to_array = { faction_dem_m_array = 2 }   
	add_to_array = { faction_com_m_array = 1 } 
	add_to_array = { faction_com_m_array = 2 } 
	add_to_array = { faction_fas_m_array = 1 } 
	add_to_array = { faction_fas_m_array = 2 } 
	add_to_array = { faction_mon_m_array = 1 } 
	add_to_array = { faction_mon_m_array = 2 }     

	# Modify what shows up in the gui
	reload_faction_gui = yes
}

faction_gui_call = {
    clear_array = faction_dem_p_array
    clear_array = faction_com_p_array
    clear_array = faction_fas_p_array
    clear_array = faction_mon_p_array
    ####DEM####
    set_temp_variable = { a = 100 }
    subtract_from_temp_variable = { a = var:fct_dem }
    add_to_array = { faction_dem_p_array = a }    
    add_to_array = { faction_dem_p_array = var:fct_dem }    
    ####COM####   
    set_temp_variable = { a = 100 }
    subtract_from_temp_variable = { a = var:fct_com }    
    add_to_array = { faction_com_p_array = a } 
    add_to_array = { faction_com_p_array = var:fct_com } 
    ####FAS#### 
    set_temp_variable = { a = 100 }
    subtract_from_temp_variable = { a = var:fct_fas }    
    add_to_array = { faction_fas_p_array = a } 
    add_to_array = { faction_fas_p_array = var:fct_fas }
    ####MON####
    set_temp_variable = { a = 100 }
    subtract_from_temp_variable = { a = var:fct_mon }    
    add_to_array = { faction_mon_p_array = a }   
    add_to_array = { faction_mon_p_array = var:fct_mon } 

    reload_faction_gui = yes

}

# The following scripted effect does the main job of generating the gui, by adding the seats for each party in a grid.
# This should be called every time you need to update the gui, when you add/subtract seats for example.
# Read the comments if you're interested in how it works
reload_faction_gui = {
	# Clears what's currently on the gui, if there's anything there.
	clear_array = faction_main_array

	# The array temp_seat is duplicated from the array faction_seat_array.
	for_each_loop = {
		array = faction_seat_array

		add_to_array = { temp_seat = faction_seat_array^i }
	}   

	# It's a suprise tool for later
	set_temp_variable = { temp_index_1 = 0 }
	set_temp_variable = { temp_index_2 = 1 }

	# Set temp_size as the highest index in the array, highest index is the highest value x in temp_array^x.
	set_temp_variable = { temp_size = temp_seat^num }
	subtract_from_temp_variable = { temp_size = 1 }

	# What this does is loop through the temp_seat array, adding the current value to the next value on the list.
	# temp_seat^0 is the first value on the list, temp_seat^1 is the next and so forth.
	# the loop ends when temp_index_1 is equal to the size of the array - 1 (basically the max index).
	while_loop_effect = {
		limit = {
			check_variable = { temp_index_1 < temp_size }
		}
		# The suprise tool starts out as temp_seat^0 and temp_seat^1 and then is incremented every loop , adding the current value to the next value on the list.
		add_to_variable = { temp_seat^temp_index_2 = temp_seat^temp_index_1 }
		add_to_temp_variable = { temp_index_1 = 1 }
		add_to_temp_variable = { temp_index_2 = 1 }
	}

	# resize_array fills the faction_member_array with the id of the faction member x amount of times where x is the number of seats the member has.
	# so the array will look like this basically:
	# 1,1,1,1,1,1,1,...(repeated 90 times),2,2,2,2,2,2,2(repeated 35 times),3,3,3.. etc.
	for_loop_effect = {
		start = 0
		end = temp_seat^num

		resize_array = { array = faction_main_array value = faction_member_array^v size = temp_seat^v } 
	}


#### COMMUNISM ####
    
    clear_array = faction_com_array
    
	for_each_loop = {
		array = faction_com_p_array

		add_to_array = { temp_com = faction_com_p_array^i }
	} 

	set_temp_variable = { temp_cindex_1 = 0 }
	set_temp_variable = { temp_cindex_2 = 1 }
	set_temp_variable = { temp_csize = temp_com^num }
	subtract_from_temp_variable = { temp_csize = 1 }    

	while_loop_effect = {
		limit = {
			check_variable = { temp_cindex_1 < temp_csize }
		}
		add_to_variable = { temp_com^temp_cindex_2 = temp_com^temp_cindex_1 }
		add_to_temp_variable = { temp_cindex_1 = 1 }
		add_to_temp_variable = { temp_cindex_2 = 1 }
	}
    
    for_loop_effect = {
        start = 0
        end = temp_com^num
        
        resize_array = { array = faction_com_array value = faction_com_m_array^v size = temp_com^v }       
    }

	clear_array = temp_com
    
#### DEMOCRATS ####
    
    clear_array = faction_dem_array
    
	for_each_loop = {
		array = faction_dem_p_array

		add_to_array = { temp_dem = faction_dem_p_array^i }
	} 

	set_temp_variable = { temp_cindex_1 = 0 }
	set_temp_variable = { temp_cindex_2 = 1 }
	set_temp_variable = { temp_csize = temp_dem^num }
	subtract_from_temp_variable = { temp_csize = 1 }    

	while_loop_effect = {
		limit = {
			check_variable = { temp_cindex_1 < temp_csize }
		}
		add_to_variable = { temp_dem^temp_cindex_2 = temp_dem^temp_cindex_1 }
		add_to_temp_variable = { temp_cindex_1 = 1 }
		add_to_temp_variable = { temp_cindex_2 = 1 }
	}
    
    for_loop_effect = {
        start = 0
        end = temp_dem^num
        
        resize_array = { array = faction_dem_array value = faction_dem_m_array^v size = temp_dem^v }       
    }

	clear_array = temp_dem    
    
#### FASCISTS ####
    
    clear_array = faction_fas_array
    
	for_each_loop = {
		array = faction_fas_p_array

		add_to_array = { temp_fas = faction_fas_p_array^i }
	} 

	set_temp_variable = { temp_cindex_1 = 0 }
	set_temp_variable = { temp_cindex_2 = 1 }
	set_temp_variable = { temp_csize = temp_fas^num }
	subtract_from_temp_variable = { temp_csize = 1 }    

	while_loop_effect = {
		limit = {
			check_variable = { temp_cindex_1 < temp_csize }
		}
		add_to_variable = { temp_fas^temp_cindex_2 = temp_fas^temp_cindex_1 }
		add_to_temp_variable = { temp_cindex_1 = 1 }
		add_to_temp_variable = { temp_cindex_2 = 1 }
	}
    
    for_loop_effect = {
        start = 0
        end = temp_fas^num
        
        resize_array = { array = faction_fas_array value = faction_fas_m_array^v size = temp_fas^v }       
    }

	clear_array = temp_fas   

#### MONARCHISTS ####
    
    clear_array = faction_mon_array
    
	for_each_loop = {
		array = faction_mon_p_array

		add_to_array = { temp_mon = faction_mon_p_array^i }
	} 

	set_temp_variable = { temp_cindex_1 = 0 }
	set_temp_variable = { temp_cindex_2 = 1 }
	set_temp_variable = { temp_csize = temp_mon^num }
	subtract_from_temp_variable = { temp_csize = 1 }    

	while_loop_effect = {
		limit = {
			check_variable = { temp_cindex_1 < temp_csize }
		}
		add_to_variable = { temp_mon^temp_cindex_2 = temp_mon^temp_cindex_1 }
		add_to_temp_variable = { temp_cindex_1 = 1 }
		add_to_temp_variable = { temp_cindex_2 = 1 }
	}
    
    for_loop_effect = {
        start = 0
        end = temp_mon^num
        
        resize_array = { array = faction_mon_array value = faction_mon_m_array^v size = temp_mon^v }       
    }

	clear_array = temp_mon       
}




















# Bonus code for adding/subtracting seats
modify_faction_seat = {
	subtract_from_temp_variable = { temp_member = 1 }

	# check to see if result overflows
	set_temp_variable = { temp = faction_seat_array^temp_member }
	add_to_temp_variable = { temp = temp_seats }

	if = {
		limit = {
			check_variable = { temp > faction_main_array^num }
		}
		subtract_from_temp_variable = { temp = faction_main_array^num }
		subtract_from_temp_variable = { temp_seats = temp }
	}
	else_if = {
		limit = {
			check_variable = { temp < 0 }
		}
		multiply_temp_variable = { temp = -1 }
		subtract_from_temp_variable = { temp_seats = temp }
	}

	# adds all parties to temp_array
	for_loop_effect = {
		start = 0
		end = faction_seat_array^num

		add_to_temp_array = { temp_array = v }
	}

	# remove from list of parties the party to be added/subtracted
	remove_from_temp_array = { array = temp_array value = temp_member }

	# give party new seat value
	add_to_variable = { faction_seat_array^temp_member = temp_seats }

	# if its add
	if = {
		limit = {
			check_variable = { temp_seats > 0 }
		}
		# loop until seats to be added is 0
		while_loop_effect = {
			limit = {
				check_variable = { temp_seats > 0 }
			}

			# loops through remaining parties, subtracting 1 seat each time
			for_loop_effect = {
				start = 0
				end = temp_array^num

				if = {
					limit = {
						check_variable = { faction_seat_array^temp_array^v > 0 } # party must have more than 0 seats to be subtracted
						check_variable = { temp_seats > 0 } # seats to be added is bigger than 0 currently
					}
					subtract_from_variable = { faction_seat_array^temp_array^v = 1 } # subtract from party 1 seat
					subtract_from_temp_variable = { temp_seats = 1 } # subtract from seats to be added
				}
			}
		}
	}
	# if its subtract
	else_if = {
		limit = {
			check_variable = { temp_seats < 0 }
		}
		# loop until seats to be subtracted is 0
		while_loop_effect = {
			limit = {
				check_variable = { temp_seats < 0 }
			}

			# loops through remaining parties, adding 1 seat each time
			for_loop_effect = {
				start = 0
				end = temp_array^num

				if = {
					limit = {
						check_variable = { faction_seat_array^temp_array^v < faction_main_array^num } # party must have less than max seats to be added
						check_variable = { temp_seats < 0 } # seats to be subtracted is less than 0 currently
					}
					add_to_variable = { faction_seat_array^temp_array^v = 1 } # add to party 1 seat
					add_to_temp_variable = { temp_seats = 1 } # add to seats to be subtracted
				}
			}
		}
	}
	# do nothing if 0

	# Modify what shows up in the gui
	reload_faction_gui = yes
}

# Clear all arrays (for debugging)
clear_faction_gui_arrays = {
	clear_array = faction_main_array
	clear_array = faction_member_array
	clear_array = faction_seat_array
	clear_array = faction_x_array
	clear_array = faction_y_array
}
