#GRE_favor_80_add
#GRE_favor_40_add
#GRE_favor_0_add
#GRE_favor_minus_add

#GRE_favor = {
#    if = {
 #       limit = {
#            original_tag = TUR
#            }
#        add_to_variable = {favor = 50}
#    }
#    else = {
#        add_to_variable = {favor = 2 }
#    }
#}

GRE_check = {
    add_political_power = 500
}

#########################################################
####################[GRE/D05 XOR FUC]####################
#########################################################

gre_hs_xor = {                                                                  ## Here we basically implement an XOR function to return (-> var:event_sender) the ID of the tag (between GRE/Hellenic State) that is controlled by the human player
    if = {                                                                       # Basically we do not want to send the event twice, while we also ensure that it goes to the player.
        limit = {
            GRE = { is_ai = no }
            event_target:hellenic_state = { is_ai = yes }
        }
        set_variable = { event_sender = GRE.id }
    }
    else_if = {
        limit = {
            GRE = { is_ai = yes }
            event_target:hellenic_state = { is_ai = no }
        }
        set_variable = { event_sender = event_target:hellenic_state } 
    }
    else = {
        set_variable = { event_sender = GRE.id }
    }
}


#########################################################
####################[GAME OF SHADOWS]####################
#########################################################
clear_all_operation_flags = {
    clr_country_flag = gos_default
    clr_country_flag = gos_agency_cooperation
    clr_country_flag = gos_allowed_divisions
    clr_country_flag = bulgarian_dillema
}

#########################################################
######################[GREEK TRIUMPH]####################
#########################################################
collect_faction_member_agreeableness = {
    every_country = { 
        limit = {
            is_in_faction_with = PREV                                                                      ## PREV is Greece's enemy faction leader (Germany almost always)
        }
        every_state = {                                                                                     # Here we calculate the core population of the country because the game really thought
            limit = {                                                                                       # it wouldn't be a good idea to make max_manpower_k not 100% include non-core manpower in the mix.
                is_core_of = PREV
                is_owned_and_controlled_by = PREV
            }
            add_to_variable = { PREV.nation_core_population = state_population_k }
        }
        set_variable = { THIS.check = THIS.nation_core_population }
        ###[Favor Part]###
        if = {
            limit = {
                is_in_array = {                                                                             # Here we work on influenceable nations (historically: Germany/Italy/Bulgaria).
                    array = global.favor_mechanic
                    value = THIS.id
                }                
            }
            if = {
                limit = { check_variable = { THIS.favor@GRE > 79 } }                                          # If we have Excellent influence over.
                add_to_variable = { THIS.nation_agreeableness_score = 2 }
            }
            else = {
                limit = { check_variable = { THIS.favor@GRE > 49 } }                                        # If we have Great influence over.
                add_to_variable = { THIS.nation_agreeableness_score = 1 }
            }
        }
        ###[Manpower Part]###
        divide_variable = { THIS.nation_core_population = casualties_k }                                     # Example Germany: Supposedly 80M population. For 3M casualties we get 26.6667. So if we have worse than 3M casualties for a 80M population we get max score for aggreabl. Levels are 2M/1M/500K (change respectively ofc)
        if = {                                                                                          # The reason I divided in that order is due to a lack of 0.xxxxxxx digits the engine seems to have. It will ruin the results. However by changing the order of division we get proper results, we just need to squish our stupid brains to make sense of the non-sensible numbers.
            limit = { check_variable = { THIS.nation_core_population < 26 } }
            add_to_variable = { THIS.nation_agreeableness_score = 3 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 40 } }
            add_to_variable = { THIS.nation_agreeableness_score = 2 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 80 } }
            add_to_variable = { THIS.nation_agreeableness_score = 1 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 160 } }
            add_to_variable = { THIS.nation_agreeableness_score = 0.5 }
        }
        ###[Additional Stuff TBD]###
    }
}
#########################################################
###################[NATIONAL RESISTANCE]#################
#########################################################
##Variables: For GER/ITA/BUL we keep 3 variables (casualties + captured + total )
############ For Greek side we same 3 variables, but also equipment variables to simulate resistance strength
############ Generally, the higher equipment+strength of resistance (manpower+guns+etc) the higher the chance of a better battle result.
############ Every battle however is set to won/lost based on historical truth. Unless I find no info about the battle so its basically a sandbox with an accurate name so its completely based on above stats.
############ The idea is for those ~600 battles to happen in the 3-4 years of occupation on their historical dates. Manpower will be drawn directly from GER/ITA/BUL manpower pool (casualties+captured)
############ Reprisals work likewise but 1 variable (casualties). They are taken from state manpower not your country's as they are about civilians.
############ End goal to simulate the 7%-11% of population lost by Greece, but also weight this based upon players decisions.
############ I figured just displaying battle names would be too superficial, however I can't make 600 events (please god), so I incorporated a WoT basically into a gameplay mechanic.
############ Hope this makes sense ;) 
##Weights:   Resistance weights (Resistance state modifier, STR{=manpower+equipment}), Political weights (Communist/Democrat/Monarchist/Fascist relations), Others(occasionally black market, populance agitation, etc)
##Results:
#RES_battle_type_loss_heavy = {}
#RES_battle_type_loss_small = {}
#RES_battle_type_undetermined = { }
#RES_battle_type_won_small = {}
#RES_battle_type_won_mediocre = {}
#RES_battle_type_won_heavy = {}


HS_resistance_manpower_increase = {
    if = { 
        limit = {
            date > 1942.9.1
            date < 1943.3.1
        }
        set_temp_variable = { elas_manpower_add = 77.6 }
        set_temp_variable = { elas_equipment_add = 25.9 }
        set_temp_variable = { edes_manpower_add = 15.3 }
        set_temp_variable = { edes_equipment_add = 5.1 }
    }
    else_if = { 
        limit = {
            date > 1943.3.1
            date < 1944.2.1
        }
        set_temp_variable = { elas_manpower_add = 60 }
        set_temp_variable = { elas_equipment_add = 20 }
        set_temp_variable = { edes_manpower_add = 12 }
        set_temp_variable = { edes_equipment_add = 4 }
    }
    else_if = { 
        limit = {
            date > 1944.2.1
        }
        set_temp_variable = { elas_manpower_add = 83.3 }
        set_temp_variable = { elas_equipment_add = 27.8 }
        set_temp_variable = { edes_manpower_add = 16.6 }
        set_temp_variable = { edes_equipment_add = 5.5 }
    }
    
    round_temp_variable = elas_manpower_add
    round_temp_variable = edes_manpower_add
    round_temp_variable = elas_equipment_add
    round_temp_variable = edes_equipment_add
    add_to_variable = { GRE.elas_manpower = elas_manpower_add }
    add_to_variable = { GRE.elas_equipment = elas_equipment_add }
    add_to_variable = { GRE.edes_manpower = edes_manpower_add }
    add_to_variable = { GRE.edes_equipment = edes_equipment_add }
    HS_resistance_recalculate_ratios = yes
}

HS_resistance_recalculate_ratios = {
    set_temp_variable = { x = GRE.elas_manpower }
    set_temp_variable = { y = GRE.elas_equipment }
    divide_temp_variable = { y = x }    
    set_variable = { GRE.elas_ratio = y }
    set_temp_variable = { x = GRE.edes_manpower }
    set_temp_variable = { y = GRE.edes_equipment }
    divide_temp_variable = { y = x }    
    set_variable = { GRE.edes_ratio = y }
}
#######BATTLES
####MANPOWER
###Strength (Us)
###Strength (Them)
###Losses (Us)
###Losses (Them)
###POW (Us)
###POW (Them)      
####EQUIPMENT
###Lost (Us)
###Lost (Them)
###Captured (Us)
###Captured (Them)
####MODIFIERS
###Manpower
###Equipment 

EDES_resistance_battle_sandbox = {                                            ## Contains UNWEIGHTED resistance battle outcomes based on certain modifiers.
    set_temp_variable = { magnitude = 0 }
    if = {
        limit = { check_variable = { GRE.edes_manpower > 40000 } }
        add_to_temp_variable = { magnitude = 5 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 30000 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 20000 } }
        add_to_temp_variable = { magnitude = 3 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 15000 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 12500 } }
        add_to_temp_variable = { magnitude = 1 }
    }
    ################################################
    if = {
        limit = { check_variable = { GRE.edes_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################[Magnitude Clamped]
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################[Greek Combatant Size]
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################[Opponent Size relevant to Greek Size]
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################[Losses Calculation]
    set_temp_variable = { t1 = greek_combatant_size }                           
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.01
            max = 0.15
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.20
            max = 0.90
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.01
            max = 0.20
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.2
            max = 0.9
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.4
            max = 0.95
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.5
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.edes_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.edes_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.edes_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.edes_total_manpower_losses = t1 }                         # Edes total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}





ELAS_resistance_battle_sandbox = {                                            ## Contains UNWEIGHTED resistance battle outcomes based on certain modifiers.
    set_temp_variable = { magnitude = 0 }
    if = {
        limit = { check_variable = { GRE.elas_manpower > 150000 } }
        add_to_temp_variable = { magnitude = 5 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 125000 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 100000 } }
        add_to_temp_variable = { magnitude = 3 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 75000 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 50000 } }
        add_to_temp_variable = { magnitude = 1 }
    }
    ################################################
    if = {
        limit = { check_variable = { GRE.elas_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################
    set_temp_variable = { t1 = greek_combatant_size }
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.85
            max = 1
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.45
            max = 0.85
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.45
            max = 0.85
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.55
            max = 0.90
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.10
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.85
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.elas_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.elas_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.elas_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.elas_total_manpower_losses = t1 }                         # ELAS total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}

#########################################################
###################[HELLENIC STATE SE]###################
#########################################################
trim_infrastructure = {
    for_each_scope_loop = {
        array = global.greek_mainland_states_all
        
        THIS = { 
            if = {
                limit = { infrastructure > 9 }
                remove_building = {
                    type = infrastructure
                    level = 3
                }
            }
            else_if = {
                limit = { infrastructure > 8 }
                remove_building = {
                    type = infrastructure
                    level = 3
                }
            }
            else_if = {
                limit = { infrastructure > 7 }
                remove_building = {
                    type = infrastructure
                    level = 2
                }
                damage_building = {
                    type = infrastructure
                    damage = 1
                }
            }
            else_if = {
                limit = { infrastructure > 6 }
                remove_building = {
                    type = infrastructure
                    level = 2
                }
            }
            else_if = {
                limit = { infrastructure > 5 }
                remove_building = {
                    type = infrastructure
                    level = 1
                }
                damage_building = {
                    type = infrastructure
                    damage = 1
                }
            }
            else_if = {
                limit = { infrastructure > 1 }
                damage_building = {
                    type = infrastructure
                    damage = 2
                }
            }
        }
    }
}

###################[GREAT FAMINE]###################
######levels 1-10
#####modifiers: (SEASON, YEAR, STATE, FOCUSES, DECISIONS)
####YEAR
###1941-1942 worst, 1943 second-to-worst, 1944 plain bad
####Seasons
###Winter worst, Spring bad, Summer-Autumn base
####Specific periods for historical acc ( November/1941-Januray/1942 x4, January/1941-March/1942 x6, gradual decrease afterwards).
####States
###Athens + Aegean Islands (worst), Thessaloniki (2nd worst), rest base
####Deaths/Level
###lvl10-200d/d (deaths/day)
###lvl09-175d/d
###lvl07-150d/d
###lvl06-125d/d
###lvl06-100d/d
###lvl05-80d/d
###lvl04-60d/d
###lvl03-40d/d
###lvl02-20d/d
###lvl01-10d/d
###lvl00-5d/d
####Example Calculations
###15 states total
##Athens@10 -> 200
##Aegean@10 -> 200
##Thessaloniki -> 175
##      half   -> 6x 60
##      half   -> 6x 30

HS_famine_initialize = {
    for_each_scope_loop = {
        array = global.greek_mainland_states_all
        
        THIS = { add_dynamic_modifier = { modifier = great_famine } }                                     # Add the great_famine to state
    }
}

HS_famine_toll_proc = {
    if = {
        limit = { THIS = { has_dynamic_modifier= { modifier = great_famine } } }
        set_temp_variable = { level = 0 }
        ####[State Weight]####
        if = {
            limit = { 
                OR = {
                    state = 47 
                    state = 187
                }
            }
            add_to_temp_variable = { level = 3 }
        }
        else_if = {
            limit = { state = 811 }
            add_to_temp_variable = { level = 2 }
        }
        ####[Season Weight]####
        if = { 
            limit = {
                ####[First Big Hit]####
                date > 1941.11.1
                date < 1942.1.1
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 6 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 6 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 3 }
            }
            else = {
                add_to_temp_variable = { level = 4 }
            }
        }
        else_if = { 
            limit = {
                ####[Second Big Hit]####
                date > 1942.1.1
                date < 1942.4.1
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 7 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 7 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 4 }
            }
            else = {
                add_to_temp_variable = { level = 5 }
            }
        }
        else_if = { 
            limit = {
                ####[Spring&Summer42]####
                date > 1942.4.1
                date < 1942.10.15
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 2 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 2 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 0 }
            }
            else = {
                add_to_temp_variable = { level = 1 }
            }
        }
        else_if = { 
            limit = {
                ####[Autumn42]####
                date > 1942.10.15
                date < 1942.12.12
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 2 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 2 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 0 }
            }
            else = {
                add_to_temp_variable = { level = 1 }
            }
        }
        else_if = { 
            limit = {
                ####[Winter42-43]####
                date > 1942.12.12
                date < 1943.3.15
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 3 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 2 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 1 }
            }
            else = {
                add_to_temp_variable = { level = 2 }
            }
        }
        else_if = { 
            limit = {
                ####[Spring&Summer&Autumn43]####
                date > 1943.3.15
                date < 1943.12.10
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 1 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 1 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 0 }
            }
            else = {
                add_to_temp_variable = { level = 0 }
            }
        }
        else_if = { 
            limit = {
                ####[Winter44]####
                date > 1943.12.10
                date < 1944.3.15
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 2 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 2 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 1 }
            }
            else = {
                add_to_temp_variable = { level = 1 }
            }
        }
        else_if = { 
            limit = {
                ####[Spring&Summer&Autumn44]####
                date > 1944.3.15
                date < 1944.10.15
            }
            if = {
                limit = { 
                    OR = {
                        state = 47 
                        state = 187
                    }
                }
                add_to_temp_variable = { level = 1 }
            }
            else_if = {
                limit = { state = 811 }
                add_to_temp_variable = { level = 0 }
            }  
            else_if = {
                limit = { 
                    OR = {
                        state = 808 #THESS 
                        state = 186 #PELOP
                        state = 812 #ANMAK
                        state = 184 #DUTTH
                        state = 182 #CRETE
                    }
                }
                add_to_temp_variable = { level = 0 }
            }
            else = {
                add_to_temp_variable = { level = 0 }
            }
        }
        if = {
            limit = { date < 1941.11.2 }
            set_temp_variable = { level = 1 }                   ## IF SEP41->NOV41, then minimal losses
        }
        #####[BELOW THIS POSITIVE CHANGES]#####
        
        
        #####[CLAMP LEVEL]#####
        clamp_temp_variable = {
            var = level
            min = 0
            max = 10
        }
        ##########[FINAL CALC]##########
        if = {
            limit={check_variable={level<1}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -10
                max = 0
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<2}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -20
                max = 0
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = 1 }
        }
        else_if = {
            limit={check_variable={level<3}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -30
                max = -10
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<4}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -60
                max = -20
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<5}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -80
                max = -40
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<6}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = -60
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<7}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -125
                max = -75
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<8}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -200
                max = -100
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<9}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -250
                max = -150
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<10}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -350
                max = -250
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        }
        else_if = {
            limit={check_variable={level<11}}
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -500
                max = -300
            }
            THIS = { add_manpower = x }
            multiply_temp_variable = { x = -1 }
            add_to_variable = { GRE.total_lost_to_famine = x }
        } 
    }
}

###################[BLACK]###################

clear_all_black_market_flags = {
    clr_country_flag = black_market_option_crackdown
    clr_country_flag = black_market_option_invest
}

event_based_black_market_shift = {                                              ## Random events will happen during famine to simulate the black market. Triggered WITH state scope
    if = {                                                                           #Note: 3 positive, 3 negative levels. Positive to Negative and vice-versa means a swap in state not a reduction/increase.
        limit = {                                                                    #Here we only add negative levels (for positive player must act through various manners)
            OR = {
                has_dynamic_modifier = { modifier = black_market_obscure }
                has_dynamic_modifier = { modifier = black_market_cemented }
                has_dynamic_modifier = { modifier = black_market_ubshakeable }
                NOT = {
                    has_dynamic_modifier = { modifier = black_market_obscure }
                    has_dynamic_modifier = { modifier = black_market_cemented }
                    has_dynamic_modifier = { modifier = black_market_ubshakeable }
                }
            }
        }
        THIS = { HS_add_black_market_negative = yes }
    }
    else_if = {
        limit = {
            OR = {
                has_dynamic_modifier = { modifier = black_market_obscure_controlled }
                has_dynamic_modifier = { modifier = black_market_cemented_controlled }
                has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
            }
        }
        random_list = {
            50 = {
                THIS = { HS_add_black_market_toggle = yes }
            }
            50 = {
                THIS = { HS_add_black_market_positive = yes }
            }
        }
    }
}


HS_add_black_market_negative = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
    }
    else_if = { 
        limit = {
            NOT = {
                has_dynamic_modifier = { modifier = black_market_obscure }
                has_dynamic_modifier = { modifier = black_market_cemented }
                has_dynamic_modifier = { modifier = black_market_ubshakeable }
            } 
        } 
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
}

HS_reduce_black_market = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
}

HS_add_black_market_positive = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
    }
    else_if = { 
        limit = {
            NOT = {
                has_dynamic_modifier = { modifier = black_market_obscure_controlled }
                has_dynamic_modifier = { modifier = black_market_cemented_controlled }
                has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
            } 
        } 
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
    }
}

HS_black_market_toggle = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
    }
}

HS_black_market_toggle_positive = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
    }
}

HS_black_market_toggle_negative = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
    }
}


HS_set_up_state_modifiers = {
    add_to_array = { global.german_occupied_states = 47 }
    add_to_array = { global.german_occupied_states = 813 }
    add_to_array = { global.german_occupied_states = 187 }
    add_to_array = { global.german_occupied_states = 731 }
    add_to_array = { global.german_occupied_states = 811 }
    add_to_array = { global.german_occupied_states = 810 }
    add_to_array = { global.italian_occupied_states = 185 }
    add_to_array = { global.italian_occupied_states = 809 }
    add_to_array = { global.italian_occupied_states = 807 }
    add_to_array = { global.italian_occupied_states = 808 }
    add_to_array = { global.italian_occupied_states = 186 }
    add_to_array = { global.italian_occupied_states = 814 }
    if = {
        limit = {
            BUL = {
                NOT = {
                    owns_state = 184
                    owns_state = 812
                }
            }
        }
        add_to_array = { global.italian_occupied_states = 184 }
        add_to_array = { global.italian_occupied_states = 812 }
    }
    else = {
        add_to_array = { bulgarian_occupied_states = 184 }
        add_to_array = { bulgarian_occupied_states = 812 }
    }
    add_to_array = { global.greek_mainland_states_all = 47 }
    add_to_array = { global.greek_mainland_states_all = 813 }
    add_to_array = { global.greek_mainland_states_all = 187 }
    add_to_array = { global.greek_mainland_states_all = 731 }
    add_to_array = { global.greek_mainland_states_all = 811 }
    add_to_array = { global.greek_mainland_states_all = 810 }
    add_to_array = { global.greek_mainland_states_all = 185 }
    add_to_array = { global.greek_mainland_states_all = 809 }
    add_to_array = { global.greek_mainland_states_all = 807 }
    add_to_array = { global.greek_mainland_states_all = 808 }
    add_to_array = { global.greek_mainland_states_all = 186 }
    add_to_array = { global.greek_mainland_states_all = 184 }
    add_to_array = { global.greek_mainland_states_all = 812 }
    add_to_array = { global.greek_mainland_states_all = 814 }
    if = {
        limit = { GRE = { has_completed_focus = GRE_crete_falls } }
        add_to_array = { global.greek_mainland_states_all = 182 }
    }
}

HS_add_angered_greeks = {
    for_each_scope_loop = {
        array = global.greek_mainland_states_all
        
        add_dynamic_modifier = { modifier = unyielding_greeks_angered }                                     # Adds to the value (state ID) the dynamic modifier.
    }
}

HS_increase_unyielding_greeks_by_one = {
    for_each_scope_loop = {
        array = global.greek_mainland_states_all
        
        if = {
            limit = { has_dynamic_modifier = { modifier = unyielding_greeks_angered } }
            remove_dynamic_modifier = { modifier = unyielding_greeks_angered }
            add_dynamic_modifier = { modifier = unyielding_greeks_determined }
        }
        else_if = {
            limit = { has_dynamic_modifier = { modifier = unyielding_greeks_determined } }
            remove_dynamic_modifier = { modifier = unyielding_greeks_determined }
            add_dynamic_modifier = { modifier = unyielding_greeks_ferocious }
        }
        else_if = { 
            limit = { NOT = { has_dynamic_modifier = { modifier = unyielding_greeks_ferocious } } }
            add_dynamic_modifier = { modifier = unyielding_greeks_angered }
        }
    }
}

HS_increase_unyielding_greeks_by_one_decision = {       
    if = {
        limit = { has_dynamic_modifier = { modifier = unyielding_greeks_angered } }
        remove_dynamic_modifier = { modifier = unyielding_greeks_angered }
        add_dynamic_modifier = { modifier = unyielding_greeks_determined }
    }
    else_if = {
        limit = { has_dynamic_modifier = { modifier = unyielding_greeks_determined } }
        remove_dynamic_modifier = { modifier = unyielding_greeks_determined }
        add_dynamic_modifier = { modifier = unyielding_greeks_ferocious }
    }
    else_if = { 
        limit = { NOT = { has_dynamic_modifier = { modifier = unyielding_greeks_ferocious } } }
        add_dynamic_modifier = { modifier = unyielding_greeks_angered }
    }
}

HS_increase_armed_resistance_by_one = {
    for_each_scope_loop = {
        array = global.greek_mainland_states_all
        
        if = { 
            limit = { 
                NOT = {
                    has_dynamic_modifier = { modifier = early_resistance_groups } 
                    has_dynamic_modifier = { modifier = strengthened_resistance_groups }
                    has_dynamic_modifier = { modifier = dominant_resistance_groups } 
                    has_dynamic_modifier = { modifier = unshakeable_resistance_groups }
                }
            }
            ###remove_dynamic_modifier = { modifier = GRE_italian_occupation_zone }
            ###remove_dynamic_modifier = { modifier = GRE_german_occupation_zone }
            add_dynamic_modifier = { modifier = early_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = early_resistance_groups } }
            remove_dynamic_modifier = { modifier = early_resistance_groups }
            add_dynamic_modifier = { modifier = strengthened_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = strengthened_resistance_groups } }
            remove_dynamic_modifier = { modifier = strengthened_resistance_groups }
            add_dynamic_modifier = { modifier = dominant_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = dominant_resistance_groups } }
            remove_dynamic_modifier = { modifier = dominant_resistance_groups }
            add_dynamic_modifier = { modifier = unshakeable_resistance_groups }
        }
    }
}

HS_increase_armed_resistance_by_one_decision = {      
    if = { 
        limit = { 
            NOT = {
                has_dynamic_modifier = { modifier = early_resistance_groups } 
                has_dynamic_modifier = { modifier = strengthened_resistance_groups }
                has_dynamic_modifier = { modifier = dominant_resistance_groups } 
                has_dynamic_modifier = { modifier = unshakeable_resistance_groups }
            }
        }
        ###remove_dynamic_modifier = { modifier = GRE_italian_occupation_zone }
        ###remove_dynamic_modifier = { modifier = GRE_german_occupation_zone }
        add_dynamic_modifier = { modifier = early_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = early_resistance_groups } }
        remove_dynamic_modifier = { modifier = early_resistance_groups }
        add_dynamic_modifier = { modifier = strengthened_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = strengthened_resistance_groups } }
        remove_dynamic_modifier = { modifier = strengthened_resistance_groups }
        add_dynamic_modifier = { modifier = dominant_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = dominant_resistance_groups } }
        remove_dynamic_modifier = { modifier = dominant_resistance_groups }
        add_dynamic_modifier = { modifier = unshakeable_resistance_groups }
    }
}

HS_set_up_occupation_zones = {                                                                              ## We gonna use an array, yay, how I hate my life.
    add_to_array = { german_occupation_zone = 11905 } ##    EVROS
    add_to_array = { german_occupation_zone = 895 }   ##    CENTRAL MACEDONIA
    add_to_array = { german_occupation_zone = 3936 }
    add_to_array = { german_occupation_zone = 3526 }
    add_to_array = { german_occupation_zone = 11818 } ##    THESSALONIKI
    add_to_array = { german_occupation_zone = 936 }   ##    WESTERN MACEDONIA
    add_to_array = { german_occupation_zone = 10163 }
    add_to_array = { german_occupation_zone = 13240 }
    add_to_array = { german_occupation_zone = 9837 }
    add_to_array = { german_occupation_zone = 966 }
    add_to_array = { german_occupation_zone = 3980 }
    add_to_array = { german_occupation_zone = 863 }
    add_to_array = { german_occupation_zone = 841 }   
    add_to_array = { german_occupation_zone = 4109 }  ##    ATTIKA
    add_to_array = { german_occupation_zone = 11965 }
    add_to_array = { german_occupation_zone = 8435 }  ##    AEGEAN
    add_to_array = { german_occupation_zone = 6550 } 
    add_to_array = { german_occupation_zone = 11965 } 
    add_to_array = { italian_occupation_zone = 3401 }  ##   CYCLADES
    add_to_array = { italian_occupation_zone = 13237 } ##   HPEIROS
    add_to_array = { italian_occupation_zone = 13236 }
    add_to_array = { italian_occupation_zone = 13238 }
    add_to_array = { italian_occupation_zone = 9805 }
    add_to_array = { italian_occupation_zone = 3914 }
    add_to_array = { italian_occupation_zone = 6930 }
    add_to_array = { italian_occupation_zone = 9916 }
    add_to_array = { italian_occupation_zone = 10203 } ##   STEREA
    add_to_array = { italian_occupation_zone = 1106 }
    add_to_array = { italian_occupation_zone = 12001 }
    add_to_array = { italian_occupation_zone = 1205 }
    add_to_array = { italian_occupation_zone = 13241 }
    add_to_array = { italian_occupation_zone = 976 }
    add_to_array = { italian_occupation_zone = 1109 }
    add_to_array = { italian_occupation_zone = 7127 }
    add_to_array = { italian_occupation_zone = 3864 } ##    THESSALY
    add_to_array = { italian_occupation_zone = 3844 }
    add_to_array = { italian_occupation_zone = 3973 }
    add_to_array = { italian_occupation_zone = 11786 }
    add_to_array = { italian_occupation_zone = 11895 }
    add_to_array = { italian_occupation_zone = 3988 } ##    PELOP
    add_to_array = { italian_occupation_zone = 7211 }
    add_to_array = { italian_occupation_zone = 4193 }
    add_to_array = { italian_occupation_zone = 1173 }
    add_to_array = { italian_occupation_zone = 4178 }
    add_to_array = { italian_occupation_zone = 4078 }
    add_to_array = { italian_occupation_zone = 7096 }
    if = {
        limit = {
            BUL = {
                NOT = {
                    owns_state = 184
                    owns_state = 812
                }
            }
        }
        add_to_array = { italian_occupation_zone = 11774 }
        add_to_array = { italian_occupation_zone = 13242 }
        add_to_array = { italian_occupation_zone = 13243 }
        add_to_array = { italian_occupation_zone = 9797 }
        add_to_array = { italian_occupation_zone = 9930 }
        add_to_array = { italian_occupation_zone = 6990 }
        add_to_array = { italian_occupation_zone = 13244 }
    }
    for_each_loop = {         
        array = german_occupation_zone
        GER = { set_province_controller = v }
    }
    for_each_loop = {         
        array = italian_occupation_zone
        ITA = { set_province_controller = v }
    }
    HS_set_up_state_modifiers = yes
}

GR_HS_split_ideas = {
    if = {
        limit = { has_idea = GRE_masters_of_shipbuilding_2 }
        remove_ideas = GRE_masters_of_shipbuilding_2
        set_country_flag = had_masters_of_shipbuilding_2
    }
    if = {
        limit = { has_idea = GRE_masters_of_shipbuilding }
        remove_ideas = GRE_masters_of_shipbuilding
        set_country_flag = had_masters_of_shipbuilding
    }
    if = {
        limit = { has_idea = GRE_submarine_expertise }
        remove_ideas = GRE_submarine_expertise
        set_country_flag = had_submarine_expertise
    }
    if = {
        limit = { has_idea = GRE_IKA }
        remove_ideas = GRE_IKA
        set_country_flag = had_IKA
    }
    if = {
        limit = { has_idea = GRE_new_corporatism_combined }
        remove_ideas = GRE_new_corporatism_combined
        set_country_flag = had_new_corporatism_combined
    }
    else = {
        remove_ideas = GRE_sophistry_and_science_idea
        remove_ideas = GRE_new_corporatism
        remove_ideas = GRE_industrializing_society
        remove_ideas = GRE_farmer_culture
        remove_ideas = GRE_spend_for_growth
    }
    if = {
        limit = { has_idea = GRE_cooperate_with_foreign_monopolies_spirit }
        remove_ideas = GRE_cooperate_with_foreign_monopolies_spirit
        set_country_flag = had_cooperate_with_foreign_monopolies_spirit
    }
    else = {
        remove_ideas = GRE_foreign_monopolies
        remove_ideas = GRE_foreign_monopolies_2
        remove_ideas = GRE_foreign_monopolies_3
        remove_ideas = GRE_foreign_monopolies_4
    }
    if = {
        limit = { has_idea = GRE_domestic_competition_2 }
        remove_ideas = GRE_domestic_competition_2
    }
    else = {
        remove_ideas = GRE_domestic_competition_1
        remove_ideas = GRE_domestic_competition_0
    }
    if = {
        limit = { has_idea = GRE_eon_kanellopoulos_year_2 }
        remove_ideas = GRE_eon_kanellopoulos_year_2
        set_country_flag = had_eon_kanellopoulos_year_2
    }
    else = {
        remove_ideas = GRE_eon_kanellopoulos_year_1
        remove_ideas = GRE_eon
    }
    if = {
        limit = { has_idea = GRE_schachtplan_incorporated }
        remove_ideas = GRE_schachtplan_incorporated
        set_country_flag = had_schachtplan_incorporated
    }
    else = {
        remove_ideas = GRE_schachtplan_fascistised
        remove_ideas = GRE_schachtplan_modified
        remove_ideas = GRE_schachtplan
    }
    remove_ideas = GRE_met_line_2
    remove_ideas = GRE_met_line
    remove_ideas = GRE_fifth_phalanx_crushed
    #remove_ideas = GRE_dummy_surrender
    remove_dynamic_modifier = { modifier = GRE_alternating_tariffs }
    remove_dynamic_modifier = { modifier = GRE_military_budget }
    remove_dynamic_modifier = { modifier = GRE_yfipourgeio_asfaleias }
    remove_dynamic_modifier = { modifier = GRE_yfipourgeio_propagandas }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_staff }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_army }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_people }
    set_variable = { true_legitimacy = 15 }
}

#########################################################
##################[GOVERNMENT IN EXILE]##################
#########################################################
GRE_calculate_government_in_exile = {
    if = { 
        limit = { check_variable = { legitimacy = -1 } }
        set_variable = { GRE_weekly_manpower_in_exile = 1250 }
    }
    else = {
        set_temp_variable = { x = legitimacy }
        multiply_temp_variable = { x = 10 }
        set_variable = { GRE_weekly_manpower_in_exile = x }
    }
}

#########################################################
#########################################################
#########################################################
GER_pops_in_crete = {
    GER = {
        division_template = {
            name = "Fallschirmjäger Division - Unternehmen Merkur"
            division_names_group = GER_PAR_01
            priority = 2
            template_counter = 0
            regiments = {
                paratrooper = { x = 0 y = 0 }
                paratrooper = { x = 0 y = 1 }
                paratrooper = { x = 0 y = 2 }
                paratrooper = { x = 0 y = 3 }
                paratrooper = { x = 1 y = 0 }
                paratrooper = { x = 1 y = 1 }
                paratrooper = { x = 1 y = 2 }
                paratrooper = { x = 1 y = 3 }
                paratrooper = { x = 2 y = 0 }
                paratrooper = { x = 2 y = 1 }
                paratrooper = { x = 2 y = 2 }
                paratrooper = { x = 2 y = 3 }
                paratrooper = { x = 3 y = 0 }
                paratrooper = { x = 3 y = 1 }
                paratrooper = { x = 3 y = 2 }
                paratrooper = { x = 3 y = 3 }
            }
            support = { 
                artillery = { x = 0 y = 0 }
                engineer = { x = 0 y = 1 }
            } 
        }
        add_manpower = -100000
        GRE = { transfer_state = 299 }
        GER = { set_state_controller = 182 }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 1 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 1164
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 2 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 3 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 9940
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 4 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 4170
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 5 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 6 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        GRE = { set_state_controller = 182 }
        ENG = { transfer_state = 299 }
    }
}

spawn_subs = { 
    for_each_loop = {                                                          ## For here is either 1->6 or 1->12 depending on what we set before.
        array = ship_builder
        
        if = {
            limit = {
                FROM = { original_tag = GER }
            }
            add_equipment_production = {
                equipment = {
                    type = ship_hull_submarine_3
                    creator = "GRE"
                    version_name = "U-boat Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
        else = {
            add_equipment_production = {
                equipment = {
                    type = ship_hull_submarine_3
                    creator = "GRE"
                    version_name = "Undine Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
    }
    clear_array = ship_builder
}

spawn_ships = { 
    for_each_loop = {
        array = ship_builder
        
        if = {
            limit = {
                FROM = { original_tag = ENG }
            }
            add_equipment_production = {
                equipment = {
                    type = ship_hull_light_3
                    creator = "GRE"
                    version_name = "J/K/N Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
        else = {
            add_equipment_production = {
                equipment = {
                    type = ship_hull_light_3
                    creator = "GRE"
                    version_name = "Benson & Gleaves Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
    }
    clear_array = ship_builder
}
#########################################################
##################[WAR STRAIN EFFECTS]###################
#########################################################
GRE_update_strain_on_industry = {

    set_temp_variable = { x = max_available_manpower_k }                        #[0 manpower in field, -> +40% industry bonus] [ 250.000 manpower in field -> -30% industry bonus ] [ 1.500.000 manpower in field -> -80% industry bonus ]
    subtract_from_temp_variable = { x = manpower_k }
    add_to_temp_variable = { x = casualties_k } 
    if = {
        limit = {
            check_variable = { x < 250 }
        }
        multiply_temp_variable = { x = -0.28 }                                 # y = 0.28x - 4
        add_to_temp_variable = { x = 40 }
    }
    else = {
        multiply_temp_variable = { x = -0.04 }                               # y = -0.04x - 20
        add_to_temp_variable = { x = -20 }
    }
    divide_temp_variable = { x = 100 }
    set_variable = { strain_fct = x }
    set_variable = { strain_dck = x }
    if = {
        limit = {
            check_variable = { grecoitalian_war_counter > 150 }
        }
        set_temp_variable = { x = grecoitalian_war_counter }
        divide_temp_variable = { x = -3000 }
        set_variable = { strain_atk = x }
        set_variable = { strain_def = x }
        set_variable = { strain_org = x }
        
    }
    else = {
        set_variable = { strain_atk = 0 }
        set_variable = { strain_def = 0 }
        set_variable = { strain_org = 0 }
    }
}
#########################################################
################[Führer Directive No. 25]################
#########################################################
GER_ignore_soviet = {
    if = {
        limit = {
            NOT = { has_country_flag = ignore_soviets }
        }
        add_ai_strategy = {
            type = ignore
            id = SOV
            value = 20000
        }
        add_ai_strategy = {
            type = ignore_claim
            id = SOV
            value = 20000
        }
        add_ai_strategy = {
            type = antagonize
            id = SOV
            value = -50000
        }
        set_country_flag = ignore_soviets
    }
}

GER_return_attention_soviet = {
    if = {
        limit = {
            has_country_flag = ignore_soviets
        }
        add_ai_strategy = {
            type = ignore
            id = SOV
            value = -20000
        }
        add_ai_strategy = {
            type = ignore_claim
            id = SOV
            value = -20000
        }
        add_ai_strategy = {
            type = antagonize
            id = SOV
            value = 50000
        }
        clr_country_flag = ignore_soviets
    }
}

enable_german_onslaught_on_yugoslavia = {
    if = {
        limit = {
            NOT = { has_country_flag = hitler_on_speed_1 }
        }
        GER = {
            add_ai_strategy = {
                type = antagonize
                id = YUG
                value = 4000
            }
            add_ai_strategy = {
                type = area_priority
                id = yugoslavia
                value = 10000
            } 
            set_country_flag = hitler_on_speed_1   
        }
    }
}

disable_german_onslaught_on_yugoslavia = {
    if = {
        limit = {
            has_country_flag = hitler_on_speed_1
        }
        GER = {
            add_ai_strategy = {
                type = antagonize
                id = YUG
                value = -4000
            }
            add_ai_strategy = {
                type = area_priority
                id = yugoslavia
                value = -10000
            }   
            clr_country_flag = hitler_on_speed_1    
        }
    }
}

enable_german_onslaught_on_greece = {
    if = {
        limit = {
            NOT = { has_country_flag = hitler_on_speed_2 }
        }
        GER = {
            add_ai_strategy = {
                type = conquer
                id = GRE
                value = 4000
            }
            add_ai_strategy = {
                type = invade
                id = GRE
                value = 4000
            }
            add_ai_strategy = {
                type = antagonize
                id = GRE
                value = 4000
            }
            add_ai_strategy = {
                type = area_priority
                id = greece
                value = 10000
            }  
            set_country_flag = hitler_on_speed_2    
        }
    }
}

disable_german_onslaught_on_greece = {
    if = {
        limit = {
            has_country_flag = hitler_on_speed_2
        }
        GER = {
            add_ai_strategy = {
                type = conquer
                id = GRE
                value = -4000
            }
            add_ai_strategy = {
                type = invade
                id = GRE
                value = -4000
            }
            add_ai_strategy = {
                type = antagonize
                id = GRE
                value = -4000
            }
            add_ai_strategy = {
                type = area_priority
                id = greece
                value = -10000
            }  
            clr_country_flag = hitler_on_speed_2  
        }
    }
}

#########################################################
##############[GRECO-ITALIAN WAR AI FIXES]###############
#########################################################
stop_italians_manning_bulgarian_borders = {
    if = {
        limit = {
            NOT = { has_country_flag = not_defending_bulgarian_borders }
        } 
        ITA = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = 200
            }
            set_country_flag = not_defending_bulgarian_borders
        }
    }
}

GRE_allow_italians_manning_bulgarian_borders = {
    if = {
        limit = {
            has_country_flag = not_defending_bulgarian_borders
        } 
        ITA = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = -200
            }
            clr_country_flag = not_defending_bulgarian_borders 
        }
    }
}

GRE_set_germans_unwilling = {
    if = {
        limit = {
            NOT = { has_country_flag = germans_not_willing_to_help_italy }
        } 
        GER = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = ITA
                value = 2000
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = ITA
                target_country = GRE
                value = 5000
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = 5000
            }
            set_country_flag = germans_not_willing_to_help_italy
        }
    }
}

GRE_set_germans_willing = {
    if = {
        limit = {
            has_country_flag = germans_not_willing_to_help_italy
        } 
        GER = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = ITA
                value = -2000
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = ITA
                target_country = GRE
                value = -5000
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = -5000
            }    
            clr_country_flag = germans_not_willing_to_help_italy
        }
    }
}

set_country_unwilling_to_help_bulgaria = {
    if = {
        limit = {
            NOT = { has_country_flag = unwilling_to_help_bulgaria }
        } 
        THIS = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = 200
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = 500
            }
            set_country_flag = unwilling_to_help_bulgaria
        }
    }
}

GRE_set_country_willing_to_help_bulgaria = {
    if = {
        limit = {
            has_country_flag = unwilling_to_help_bulgaria
        } 
        THIS = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = -200
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = -500
            }
            clr_country_flag = unwilling_to_help_bulgaria
        }
    }
}


#########################################################
##############[CALCULATE FACTORY DONATIONS]##############
#########################################################
##############[Max Divisions]
GRE_calculate_max_divisions = {
    set_temp_variable = { x = ITA.army_intel@GRE }
    multiply_temp_variable = { x = -0.25 }
    add_to_temp_variable = { x = 30 }
    round_temp_variable = x
    
    set_variable = { GRE.max_divs_allowed = x }
}
##############[Subsidized]
GRE_subsidized_check = {
    clear_variable = sub_civs 
    clear_variable = sub_mils 
    hidden_effect = {
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                is_major = yes
            }
            if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 30 compare = greater_than_or_equals }
                    check_variable = { var = favor@GRE value = 50 compare = less_than }
                }
                GRE = {
                    add_to_variable = { sub_civs = 1 }
                    #add_to_variable = { sub_mils = 1 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 50 compare = greater_than_or_equals }
                    check_variable = { var = favor@GRE value = 80 compare = less_than }
                }
                GRE = {
                    add_to_variable = { sub_civs = 1 }
                    add_to_variable = { sub_mils = 1 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = greater_than_or_equals }
                }
                GRE = {
                    add_to_variable = { sub_civs = 2 }
                    add_to_variable = { sub_mils = 1 }
                }
            }
        }
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                is_major = no
            }
            if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = greater_than_or_equals }
                }
                GRE = {
                    add_to_variable = { sub_civs = 1 }
                }
            }
        }    
    }
}
##############[Bedrock]
GRE_bedrock_check = {
    clear_variable =  bed_civs 
    hidden_effect = {
        if = { 
            limit = {
                country_exists = ALB
                ALB = { has_opinion = { target = GRE value > 85 } } 
            }
            if = {
                limit = {
                    check_variable = { var = ALB.favor@GRE value = 0 compare = greater_than_or_equals }
                    check_variable = { var = ALB.favor@GRE value = 80 compare = less_than }
                }
                add_to_variable = { bed_civs = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { var = ALB.favor@GRE value = 80 compare = greater_than_or_equals }
                }
                add_to_variable = { bed_civs = 2 }  
            }  
        }	
        if = { 	
            limit = { 
                country_exists = BUL
                BUL = { has_opinion = { target = GRE value > 85 } } 
            }
            if = {
                limit = {
                    check_variable = { var = BUL.favor@GRE value = 0 compare = greater_than_or_equals }
                    check_variable = { var = BUL.favor@GRE value = 80 compare = less_than }
                }
                add_to_variable = { bed_civs = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { var = BUL.favor@GRE value = 80 compare = greater_than_or_equals }
                }
                add_to_variable = { bed_civs = 2 }
            } 
        }	
        if = { 	
            limit = { 
                country_exists = HUN
                HUN = { has_opinion = { target = GRE value > 85 } } 
            }
            add_to_variable = { bed_civs = 1 }
        }	
        if = { 
            limit = { 
                country_exists = YUG
                YUG = { has_opinion = { target = GRE value > 85 } } 
            }
            if = {
                limit = {
                    check_variable = { var = YUG.favor@GRE value = 0 compare = greater_than_or_equals }
                    check_variable = { var = YUG.favor@GRE value = 50 compare = less_than }
                }
                add_to_variable = { bed_civs = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { var = YUG.favor@GRE value = 80 compare = less_than }
                }
                add_to_variable = { bed_civs = 2 }
            }
            else_if = {
                limit = {
                    check_variable = { var = YUG.favor@GRE value = 80 compare = greater_than_or_equals }
                }
                add_to_variable = { bed_civs = 3 }
            }
        }
        if = { 	
            limit = { 
                country_exists = AUS
                AUS = { has_opinion = { target = GRE value > 85 } } 
            }
            add_to_variable = { bed_civs = 1 }
        }
        else_if = {
                    limit = {
                        NOT = { country_exists = AUS }
                        GER = { has_opinion = { target = GRE value > 85 } }
                        check_variable = { var = GER.favor@GRE value = 30 compare = greater_than_or_equals }
                    }
                    add_offsite_building = { type = industrial_complex level = 1 }
                    add_to_variable = { GER.civslent@GRE = 1 }
                }
        if = { 	
            limit = { 
                country_exists = ROM
                ROM = { has_opinion = { target = GRE value > 85 } } 
            }
            if = {
                limit = {
                    check_variable = { var = ROM.favor@GRE value = 0 compare = greater_than_or_equals }
                    check_variable = { var = ROM.favor@GRE value = 50 compare = less_than }
                }
                add_to_variable = { bed_civs = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { var = ROM.favor@GRE value = 80 compare = less_than }
                }
                add_to_variable = { bed_civs = 2 }
            }
            else_if = {
                limit = {
                    check_variable = { var = ROM.favor@GRE value = 80 compare = greater_than_or_equals }
                }
                add_to_variable = { bed_civs = 3 }
            }
        }
        if = { 
            limit = { 
                country_exists = TUR
                TUR = { has_opinion = { target = GRE value > 85 } } 
            }
            if = {
                limit = {
                    check_variable = { var = TUR.favor@GRE value = 0 compare = greater_than_or_equals }
                    check_variable = { var = TUR.favor@GRE value = 50 compare = less_than }
                }
                add_to_variable = { bed_civs = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { var = TUR.favor@GRE value = 80 compare = less_than }
                }
                add_to_variable = { bed_civs = 2 }
            }
            else_if = {
                limit = {
                    check_variable = { var = TUR.favor@GRE value = 80 compare = greater_than_or_equals }
                }
                add_to_variable = { bed_civs = 3 }
            }
        }
        if = { 	
            limit = { 
                country_exists = CZE
                CZE = { has_opinion = { target = GRE value > 85 } } 
            }
            add_to_variable = { bed_civs = 1 }
        }
    }
}
##############[Mobilised Economy]
GRE_mobilized_check = {
    clear_variable = mob_mils 
    hidden_effect = {
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                is_major = yes
            }
            if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 30 compare = greater_than_or_equals }
                    check_variable = { var = favor@GRE value = 50 compare = less_than }
                }
                GRE = {
                    add_to_variable = { mob_mils = 2 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = less_than }
                }
                GRE = {
                    add_to_variable = { mob_mils = 3 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = greater_than_or_equals }
                }
                GRE = {
                    add_to_variable = { mob_mils = 4 }
                }
            }
        }
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                is_major = no
            }
            if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 30 compare = greater_than_or_equals }
                    check_variable = { var = favor@GRE value = 50 compare = less_than }
                }
                GRE = {
                    add_to_variable = { mob_mils = 1 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = less_than }
                }
                GRE = {
                    add_to_variable = { mob_mils = 2 }
                }
            }
            else_if = {
                limit = {
                    has_opinion = { target = GRE value > 79 }  
                    check_variable = { var = favor@GRE value = 80 compare = greater_than_or_equals }
                }
                GRE = {
                    add_to_variable = { mob_mils = 3 }
                }
            }
        }    
    }
}
#########################################################
###############[ MILITARY BUDGET REFRESH ]###############
#########################################################

GRE_budget_refresh = {

    clamp_variable = {
        var = GRE_budget_consumer
        min = 0
        max = 0.5
    }

    clamp_variable = {
        var = GRE_budget_construction
        min = -1
        max = 0
    }
    
    clamp_variable = {
        var = GRE_budget_pp_cost
        min = -2
        max = 0
    }
    
    clamp_variable = {
        var = GRE_budget_resources
        min = -1
        max = 0
    }

}

#########################################################

GRE_faction_refresh = {
    ###Gets called by faction GUI since they are both dependent on the fct_xxx variables and thus can be called together in 1 line###
    GRE_faction_refresh_mon_effect = yes
    GRE_faction_refresh_com_effect = yes
    GRE_faction_refresh_dem_effect = yes
    GRE_faction_refresh_fas_effect = yes
}

#########################################################
####################[ MONARCHISTS ]######################
#########################################################
GRE_faction_refresh_mon_effect = {

    ##################[ DRIFT ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 1000 } 
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    }
    set_variable = { GRE_mon_neut_drift = x }
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_mon_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_mon_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_mon_wr_fct = x }
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    set_variable = { GRE_mon_wstb = x }
    divide_temp_variable = { x = 2 }
    set_variable = { GRE_mon_wws = x }    
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = neutrality
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_mon_cn_fct = x }     
}

#########################################################
####################[ DEMOCRATS ]########################
#########################################################
GRE_faction_refresh_dem_effect = {

    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 1000 } 
    set_variable = { GRE_dem_neut_drift = x }
    ##################[ DEM DRIFT ]##################
    set_temp_variable = { x = fct_dem}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    set_variable = { GRE_dem_dem_drift = x }    
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_dem_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_dem_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_dem_wr_fct = x }   
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    set_variable = { GRE_dem_wstb = x }
    divide_temp_variable = { x = 2 }
    set_variable = { GRE_dem_wws = x }
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_dem_cn_fct = x }     
}

#########################################################
####################[ COMMUNISTS ]#######################
#########################################################
GRE_faction_refresh_com_effect = {

    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 1000 } 
    set_variable = { GRE_com_neut_drift = x }
    ##################[ COM DRIFT ]##################
    set_temp_variable = { x = fct_com}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    set_variable = { GRE_com_com_drift = x } 
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_com_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_com_stb_fct = x }
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_com_wr_fct = x }
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    set_variable = { GRE_com_wstb = x }
    divide_temp_variable = { x = 2 }
    set_variable = { GRE_com_wws = x }
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_com_cn_fct = x }     
}

#########################################################
####################[ FASCISTS ]#########################
#########################################################
GRE_faction_refresh_fas_effect = {


    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 1000 } 
    set_variable = { GRE_fas_neut_drift = x }
    ##################[ FAS DRIFT ]##################
    set_temp_variable = { x = fct_fas}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    set_variable = { GRE_fas_fas_drift = x } 
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_fas_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_fas_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_fas_wr_fct = x }  
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    set_variable = { GRE_fas_wstb = x }
    divide_temp_variable = { x = 2 }
    set_variable = { GRE_fas_wws = x }     
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    set_variable = { GRE_fas_cn_fct = x }     
}

GRE_line_pop = {
    if = {
        limit = {
            check_variable = { var = GRE.GRE_metaxas_line value = 1 compare = equals }
        }
        add_timed_idea = { idea = GRE_met_line  days = 365 }
        731 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 3526
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 3936
                    instant_build = yes
                }
            }
        }
        812 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13244
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 2
                    province = 9791
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 9930
                    instant_build = yes
                }
            }
        }
    }
    else_if = {
        limit = {
            check_variable = { var = GRE.GRE_metaxas_line value = 2 compare = equals }
        }
        add_timed_idea = { idea = GRE_met_line_2  days = 365 }
        731 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 3526
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 3936
                    instant_build = yes
                }
            }
        }
        812 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 13244
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 9791
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 9930
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13243
                    instant_build = yes
                }
            }
        }
        184 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 11774
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13242
                    instant_build = yes
                }
            }
        }
        813 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 11905
                    instant_build = yes
                }
            }
        }
        810 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 936
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 2
                    province = 9837
                    instant_build = yes
                }
            }
        }        
    }
    GRE = { set_variable = { GRE_metaxas_line = 3 } }
}

######################################################################################
###############################[ Faction Favor Mechanic ]#############################
######################################################################################

GRE_add_faction_favor = {
    #############################[ Ministerial Positions ]############################
    set_temp_variable = { fmon = 0 }
    set_temp_variable = { fdem = 0 }
    set_temp_variable = { fcom = 0 }
    set_temp_variable = { ffas = 0 }
    if = {
        limit = {
            has_idea = GRE_kotzias
        }
        add_to_temp_variable = { ffas = 0.5 }
    }
    if = {
        limit = {
            has_idea = GRE_koryzis
        }
        add_to_temp_variable = { fmon = 0.75 }
        add_to_temp_variable = { fdem = 0.75 }
        add_to_temp_variable = { fcom = 0.75 }
        add_to_temp_variable = { ffas = 0.75 }
    }
    if = {
        limit = {
            has_idea = GRE_dimitratos
        }
        add_to_temp_variable = { fmon = 0.5 }
        add_to_temp_variable = { fdem = 1.0 }
        add_to_temp_variable = { fcom = 1.0 }
        add_to_temp_variable = { ffas = 0.5 }
    
    }
    add_to_variable = { fct_mon = fmon } 
    add_to_variable = { fct_dem = fdem } 
    add_to_variable = { fct_com = fcom } 
    add_to_variable = { fct_fas = ffas } 
    faction_gui_call = yes
}

######################################################################################
###############################[ Country Favor Mechanic ]#############################
######################################################################################

GRE_add_favor = {
    #############################[ Base Value ]############################
    if = {                                                              ### Begins by setting the base value depending on the current opinion between SCOPE and GRE
        limit = {
            has_opinion = { target = GRE value > 79 }                       ##  [80,100] - 4    (-80,-100] - -4
        }                                                                   ##  [50,80)  - 3    (-50,-80]  - -3   
        set_temp_variable = { x = 3 }                                       ##  [30,50)  - 2    (-30,-50]  - -2
    }                                                                       ##  (10,30)  - 1    (-10,-30]  - -1
    else_if = {                                                             ##          [-10,10] - 0
        limit = {                                                           
            has_opinion = { target = GRE value > 49 }                       
        }
        set_temp_variable = { x = 1 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > 29 }  
        }
        set_temp_variable = { x = 0 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > 10 }  
        }
        set_temp_variable = { x = 0 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -11 }  
        }
        set_temp_variable = { x = -1 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -31 }  
        }
        set_temp_variable = { x = -2 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -51 }  
        }
        set_temp_variable = { x = -3 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -81 }  
        }
        set_temp_variable = { x = -4 }                       
    }
    else = { 
        set_temp_variable = { x = -5 }                       
    }
    #############################[ Additional ]###############################
    if = {                                                                                                      ## Tourism always good                                                                                
        limit = {
            GRE = { has_idea = GRE_booming_tourism }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                      ## War always bad                                                                                
        limit = {
            has_war_with = GRE 
        }
        subtract_from_temp_variable = { x = 3 }
    }
    if = {                                                                                                      ## If both nations share the same ideology, give 1 extra point. Otherwise, subtract when
        limit = {
            check_variable = { THIS.current_party_ideology_group = GRE.current_party_ideology_group }
            NOT = { original_tag = BUL }                                                                                    ## Obviously don't do it for the Bulgarians
        }
        add_to_temp_variable = { x = 1 }
    }
    else_if = {                                                                                                             ## GRE is neutral and SCOPE is communist (e.g. Metaxas & Soviet Union)
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = neutrality }
        }
        subtract_from_temp_variable = { x = 1 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is fascist 
        limit = {
            THIS = { has_government = fascism }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 3 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is communist
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 3 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 2 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 2 }
    }
    ###########################[ Tariff Mechanic ]############################
    if = {                                                                                                             ## Big favor decrease per month that tariffs are active
        limit = {
            THIS = { has_idea = GRtar_trade_1 }
        }
        subtract_from_temp_variable = { x = 6 }
    }
    else_if = {                                                                                                            
        limit = {
            THIS = { has_idea = GRtar_trade_2 }
        }
        subtract_from_temp_variable = { x = 8 }
    }
    else_if = {                                                                                                           
        limit = {
            THIS = { has_idea = GRtar_trade_3 }
        }
        subtract_from_temp_variable = { x = 10 }
    }
    ###########################[ Manufacturers ]##############################
    if = {                                                                                                                  ## Tank Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_vickers_armstrong }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_AMX }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_chrysler }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_man }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_osaka_army_arsenal }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_astrov_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Naval Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_john_brown_company }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_electric_boat_company }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_blohm_und_voss }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_kure_naval_arsenal }
                    original_tag = JAP
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Aircraft Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_supermarine }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_bloch }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_boeing }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_junkers }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_yokosuka }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_mig_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Materiel Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_rsaf_enfield }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_mas }
                    original_tag = FRA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_ford_motor_company 
                            has_idea = GRE_springfield_armory
                        }
                    }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_mauser 
                            has_idea = GRE_rheinmetall
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_nissan }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_lancia }
                    original_tag = ITA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_tula_arms_plant 
                            has_idea = GRE_grabin_design_bureau
                        }
                    }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Industrial Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_english_electric }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_general_electric }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_krupp 
                            has_idea = GRE_siemens
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_stalingrad_tractor_factory }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    
    
    ###########################[ Special Cases ]##############################
    if = {                                                                                                                  ## Italians are harder to influence (obviously)
        limit = {
            original_tag = ITA
            has_government = fascism
            has_country_leader = {
                name = "Benito Mussolini"
                ruling_only = yes 
            }
        }
        subtract_from_temp_variable = { x = 1 }
    }
    else_if = {                                                                                                              ## So are the Bulgarians going down their claims                                                                                                          
        limit = {
            original_tag = BUL
            has_completed_focus = BUL_bulgarian_irredentism
        }
        subtract_from_temp_variable = { x = 1 }
    }
    
    if = {                                                                                                                   ## Has Kotzias (bonus to GER/ITA/JAP influence)
        limit = {
            original_tag = GER
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 2 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = ITA
                original_tag = JAP
            }
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 1 }    
    }
    
    if = {                                                                                                                   ## Has Nelly (bonus to all -SOV/ITA, extra bonus to USA/GER)
        limit = {
            GRE = { has_idea = GRE_nelly }
            NOT = {
                OR = {
                    original_tag = SOV
                    original_tag = ITA
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = GER
                original_tag = USA
            }
            GRE = { has_idea = GRE_nelly }
        }
        add_to_temp_variable = { x = 2 }    
    } 
    
    if = {                                                                                                                   ## Has Karaiskaki (bonus to GER, and its a big one)
        limit = {
            GRE = { has_idea = GRE_karaiskaki }
            original_tag = GER
        }
        add_to_temp_variable = { x = 3 }
    } 
    #############################[ Randomization ]############################
    set_temp_variable = { x1 = x }
    set_temp_variable = { x2 = x }
    set_temp_variable = { x3 = x }
    set_temp_variable = { x4 = x }
    add_to_temp_variable = { x1 = 2 }
    add_to_temp_variable = { x1 = 1 }
    subtract_from_temp_variable = { x3 = 1 }
    subtract_from_temp_variable = { x4 = 2 }
    set_variable = { THIS.y = x }
    random_list = {
        20 = {
            add_to_variable = {favor@GRE = x1}
            }
        20 = {
            add_to_variable = {favor@GRE = x2}
        }
        20 = {
            add_to_variable = {favor@GRE = y}
        }
        20 = {
            add_to_variable = {favor@GRE = x3}
        }
        20 = {
            add_to_variable = {favor@GRE = x4}
        }
    }
    #############################[ Clamping ]################################
    clamp_variable = {
        var = favor@GRE
        min = -80
        max = 100
    }
}

    #########################################################################
    ##############################[ Total Favor ]############################
    #########################################################################
    
GRE_calc_total_favor = {
    clear_variable = GRE.TotalFavor
    #clear_variable = GRE.MajorFavor
    #clear_variable = GRE.BalkanFavor
    #clear_variable = GRE.RestFavor
    every_country = {                                                                               ### Here we calculate the total amount of favor earned (subcategories: Majors / Balkan / Minors ) 
        limit = {
            is_in_array = {
                array = global.favor_mechanic
                value = THIS.id
            }
        }
        set_temp_variable = { x = THIS.favor@GRE }
        if = {
            limit = {
                original_tag = ENG
                original_tag = FRA
                original_tag = USA 
                original_tag = SOV 
                original_tag = GER
                original_tag = JAP 
                original_tag = ITA 
            }
            multiply_temp_variable = { x = 0.09756 }
            add_to_variable = { GRE.TotalFavor = x }
        }
        else_if = {
            limit = {
                original_tag = TUR
                original_tag = BUL
                original_tag = YUG 
                original_tag = ROM
            }
            multiply_temp_variable = { x = 0.04878 }
            add_to_variable = { GRE.TotalFavor = x }
        }
        else_if = {
            limit = {
                original_tag = SPR
                original_tag = CHI
                original_tag = IRQ 
                original_tag = SAU
                original_tag = VEN
            }
            multiply_temp_variable = { x = 0.02439 }
            add_to_variable = { GRE.TotalFavor = x }
        }
    }
}    

######################################################################################
####################################[ Army Reforms ]##################################
######################################################################################



GRE_army_reform_tr = {
    if = {
        limit = {
            has_idea = GRE_army_status_0
        }
        swap_ideas = {
            remove_idea = GRE_army_status_0
            add_idea = GRE_army_status_1
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_1
        }
        swap_ideas = {
            remove_idea = GRE_army_status_1
            add_idea = GRE_army_status_2
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_2
        }
        swap_ideas = {
            remove_idea = GRE_army_status_2
            add_idea = GRE_army_status_3
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_3
        }
        swap_ideas = {
            remove_idea = GRE_army_status_3
            add_idea = GRE_army_status_4
        }
    }
}

GRE_air_reform_tr = {
    if = {
        limit = {
            has_idea = GRE_airforce_status_0
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_0
            add_idea = GRE_airforce_status_1
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_1
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_1
            add_idea = GRE_airforce_status_2
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_2
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_2
            add_idea = GRE_airforce_status_3
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_3
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_3
            add_idea = GRE_airforce_status_4
        }
    }
    air_experience = 5
}

GRE_tied_economy_better = {
    add_stability = 0.05
    swap_ideas = {
        remove_idea = GRE_tied_to_foreign_investments
        add_idea = GRE_tied_to_foreign_investments_1
    }
}

GRE_tied_economy_solved = {
    add_stability = 0.05
    remove_ideas = GRE_tied_to_foreign_investments_1

}

#Heraklion Convention voting effects
#Voted Aye!
ROOT_voted_aye_in_megali_convention_effect = {
	custom_effect_tooltip = ROOT_voted_aye_megali_effect
	hidden_effect = {	
		add_to_variable = { var = global.convention_ayes value = 1 }
	}
}
#Voted Nay!
ROOT_voted_nay_in_megali_convention_effect = {
	custom_effect_tooltip = ROOT_voted_nay_megali_effect
	hidden_effect = {	
		add_to_variable = { var = global.convention_nays value = 1 }
	}
}



################################################################################
################################################################################
##########################[ DEBT TO THE IFC REVAMPED ]##########################
################################################################################
################################################################################
#GRE_update_debt_status
#GRE_calculate_effects_of_debt
#GRE_debt_flags_check

GRE_update_debt_status = {                                                   ### Updates debt status for all three nations (ENG/FRA/ITA) and total debt paid. Enters through country scope!
    subtract_from_variable = { GRE.debt@THIS = GRE.debt_package }             ## Subtract from scope's stack the debt package (defined by decision, either small or big)
    add_to_variable = { GRE.GRE_debt_to_the_ifc_paid_var = GRE.debt_package } ## Add package to total counter 
    set_variable = { GRE.debt_package = 0 }                                   ## Resets the package to 0
    GRE = { GRE_calculate_effects_of_debt = yes }                             ## Calls below scripted effect through the scope of Greece
}

GRE_calculate_effects_of_debt = {                                            ### Formula: For 0 debt payed, -25% stability, -20% consumer goods. Stability degrades slower, consumer goods faster. Pivotal is the 0-50% paid range
    set_temp_variable = { x = 300 }
    subtract_from_temp_variable = { x = GRE_debt_to_the_ifc_paid_var }       ## We subtract what we've payed.
    if = { 
        limit = {
            check_variable = { x > 150 }                                     ## means we've payed less than half total debt.
        }                                                                     # y = -0.001x + 0.05 , y = -0.001x + 0.1 
        multiply_temp_variable = { x = -0.001 }
        set_temp_variable = { y = x }
        add_to_temp_variable = { x = 0.05 }
        add_to_temp_variable = { y = 0.10 }
        set_variable = { debt_to_the_ifc_stb = x }
        multiply_temp_variable = { y = -1 }
        set_variable = { debt_to_the_ifc_cons = y }
    }
    else = {                                                                  # y = 0,000666666667, y = 0,000333333333 - 0.2 ||| Nicely it seems that cons = 1/2 stb so we take advantage to simplify code
        multiply_temp_variable = { x = -0.667 }
        set_variable = { xx = x }
        divide_temp_variable = { x = 1000 }
        set_variable = { debt_to_the_ifc_stb = x }
        divide_temp_variable = { x = -2 }
        set_variable = { debt_to_the_ifc_cons = x }
    }
    set_temp_variable = { y = GRE_debt_to_the_ifc_paid_var }                 ## Here we calculate % of debt paid to print into the category
    divide_temp_variable = { y = 3 }
    set_variable = { GRE_debt_to_the_ifc_paid_var_cat = y }
    GRE_debt_flags_check = yes                                               ## Final jump, we set flags if any debt was fully paid
}

GRE_debt_flags_check = {
    if = {
        limit = {
            check_variable = { var = GRE.debt@ENG value = 0 compare = less_than_or_equals }
            NOT = { has_country_flag = GRE_debt_at_uk_fulfilled }
        }
        set_country_flag = GRE_debt_at_uk_fulfilled
    }
    if = {
        limit = {
            check_variable = { var = GRE.debt@FRA value = 0 compare = less_than_or_equals }
            NOT = { has_country_flag = GRE_debt_at_fra_fulfilled }
        }
        set_country_flag = GRE_debt_at_fra_fulfilled
    }
    if = {
        limit = {
            check_variable = { var = GRE.debt@ITA value = 0 compare = less_than_or_equals }
            NOT = { has_country_flag = GRE_debt_at_ita_fulfilled }
        }
        set_country_flag = GRE_debt_at_ita_fulfilled
    }
    if = {
        limit = {
            has_country_flag = GRE_debt_at_uk_fulfilled
            has_country_flag = GRE_debt_at_fra_fulfilled
            has_country_flag = GRE_debt_at_ita_fulfilled
        }
        set_country_flag = GRE_debt_free
    }
}

################################################################################

#Apply appropriate cosmetic tag so that 3D models change based on ideology
GRE_set_appropriate_cosmetic_tag = {
	if = {
		limit = { has_country_flag = GRE_byz_unified_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = BYZ_UNIFIED_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = BYZ_UNIFIED_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = BYZ_UNIFIED_fascism
		}
		else = {
			set_cosmetic_tag = BYZ_UNIFIED_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_GREATER_GREECE_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_GREATER_GREECE_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_GREATER_GREECE_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_GREATER_GREECE_fascism
		}
		else = {
			set_cosmetic_tag = GRE_GREATER_GREECE_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_dem_monarchy_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_dem_monarchy_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_dem_monarchy_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_dem_monarchy_fascism
		}
		else = {
			set_cosmetic_tag = GRE_dem_monarchy_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_com_independent_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_com_independent_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_com_independent_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_com_independent_fascism
		}
		else = {
			set_cosmetic_tag = GRE_com_independent_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_mae_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = MAE_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = MAE_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = MAE_fascism
		}
		else = {
			set_cosmetic_tag = MAE_neutrality
		}
	}
}