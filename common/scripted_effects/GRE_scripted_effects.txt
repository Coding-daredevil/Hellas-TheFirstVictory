GRE_check = {
    add_political_power = 500
}

#############################################################################################################################################################################################
##################################################################################[GENERAL SCRIPTED EFFECTS]#################################################################################
#############################################################################################################################################################################################

########################################################################################
##############################[ DEBT TO THE IFC REVAMPED ]##############################
########################################################################################

#GRE_update_debt_status
#GRE_calculate_effects_of_debt
#GRE_debt_flags_check

GRE_update_debt_status = {                                                   ### Updates debt status for all three nations (ENG/FRA/ITA) and total debt paid. Enters through country scope!
    subtract_from_variable = { GRE.debt@THIS = GRE.debt_package }             ## Subtract from scope's stack the debt package (defined by decision, either small or big)
    add_to_variable = { GRE.GRE_debt_to_the_ifc_paid_var = GRE.debt_package } ## Add package to total counter 
    set_variable = { GRE.debt_package = 0 }                                   ## Resets the package to 0
    GRE = { GRE_calculate_effects_of_debt = yes }                             ## Calls below scripted effect through the scope of Greece
}

GRE_calculate_effects_of_debt = {                                            ### Formula: For 0 debt payed, -25% stability, -20% consumer goods. Stability degrades slower, consumer goods faster. Pivotal is the 0-50% paid range
    set_temp_variable = { x = 300 }
    subtract_from_temp_variable = { x = GRE_debt_to_the_ifc_paid_var }       ## We subtract what we've payed.
    if = { 
        limit = {
            check_variable = { x > 150 }                                     ## means we've payed less than half total debt.
        }                                                                     # y = -0.001x + 0.05 , y = -0.001x + 0.1 
        multiply_temp_variable = { x = -0.001 }
        set_temp_variable = { y = x }
        add_to_temp_variable = { x = 0.05 }
        add_to_temp_variable = { y = 0.10 }
        set_variable = { debt_to_the_ifc_stb = x }
        multiply_temp_variable = { y = -1 }
        set_variable = { debt_to_the_ifc_cons = y }
    }
    else = {                                                                  # y = 0,000666666667, y = 0,000333333333 - 0.2 ||| Nicely it seems that cons = 1/2 stb so we take advantage to simplify code
        multiply_temp_variable = { x = -0.667 }
        set_variable = { xx = x }
        divide_temp_variable = { x = 1000 }
        set_variable = { debt_to_the_ifc_stb = x }
        divide_temp_variable = { x = -2 }
        set_variable = { debt_to_the_ifc_cons = x }
    }
    set_temp_variable = { y = GRE_debt_to_the_ifc_paid_var }                 ## Here we calculate % of debt paid to print into the category
    divide_temp_variable = { y = 3 }
    set_variable = { GRE_debt_to_the_ifc_paid_var_cat = y }
    GRE_debt_flags_check = yes                                               ## Final jump, we set flags if any debt was fully paid
}

GRE_debt_flags_check = {
    if = {
        limit = {
            check_variable = { var = GRE.debt@ENG value = 0 compare = less_than_or_equals }
            check_variable = { var = GRE.true_debt@ENG value = 0 compare = equals }
            NOT = { has_country_flag = GRE_debt_at_uk_fulfilled }
        }
        set_country_flag = GRE_debt_at_uk_fulfilled
    }
    if = {
        limit = {
            check_variable = { var = GRE.debt@FRA value = 0 compare = less_than_or_equals }
            check_variable = { var = GRE.true_debt@FRA value = 0 compare = equals }
            NOT = { has_country_flag = GRE_debt_at_fra_fulfilled }
        }
        set_country_flag = GRE_debt_at_fra_fulfilled
    }
    if = {
        limit = {
            check_variable = { var = GRE.debt@ITA value = 0 compare = less_than_or_equals }
            check_variable = { var = GRE.true_debt@ITA value = 0 compare = equals }
            NOT = { has_country_flag = GRE_debt_at_ita_fulfilled }
        }
        set_country_flag = GRE_debt_at_ita_fulfilled
    }
    if = {
        limit = {
            has_country_flag = GRE_debt_at_uk_fulfilled
            has_country_flag = GRE_debt_at_fra_fulfilled
            has_country_flag = GRE_debt_at_ita_fulfilled
        }
        set_country_flag = GRE_debt_free
    }
}

###############################################################################################################################################################
################################################################[ CALCULATE FACTORY DONATIONS ]################################################################
###############################################################################################################################################################


####################################################################################
##############################[ Subsidized Factories ]##############################
####################################################################################

GRE_subsidized_check = {
    clear_variable = sub_civs 
    clear_variable = sub_mils 
    hidden_effect = {
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                has_opinion = { target = GRE value > 79 }  
                set_temp_variable = { chk = THIS.num_of_civilian_factories }
                add_to_temp_variable = { chk = THIS.num_of_military_factories }
                OR = { is_major = yes check_variable = { chk > 29 } has_country_flag=balkan_pact_reinforced }
                check_variable = { var=favor@GRE value=30 compare=greater_than_or_equals }
            }
            if = { 
                limit = { has_country_flag = balkan_pact_reinforced }
                set_temp_variable = { c_civ_score = 0.050 }                                                                       # Score is 5.0% of country's civ factories.
                set_temp_variable = { c_mil_score = 0.050 }                                                                       # Score is 5.0% of country's mil factories.
            }
            else = {
                set_temp_variable = { c_civ_score = 0.015 }                                                                       # Score is 1.5% of country's civ factories.
                set_temp_variable = { c_mil_score = 0.015 }                                                                       # Score is 1.5% of country's mil factories.
            }
            if = {
                limit = {
                    check_variable = { var=favor@GRE value=30 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=40 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.006 }
                    add_to_temp_variable = { c_mil_score = 0.006 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.003 }
                    add_to_temp_variable = { c_mil_score = 0.003 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=40 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=50 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.010 }
                    add_to_temp_variable = { c_mil_score = 0.010 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.005 }
                    add_to_temp_variable = { c_mil_score = 0.005 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=50 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=60 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.014 }
                    add_to_temp_variable = { c_mil_score = 0.014 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.007 }
                    add_to_temp_variable = { c_mil_score = 0.007 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=70 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=80 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.020 }
                    add_to_temp_variable = { c_mil_score = 0.020 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.010 }
                    add_to_temp_variable = { c_mil_score = 0.010 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=80 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=90 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.030 }
                    add_to_temp_variable = { c_mil_score = 0.030 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.015 }
                    add_to_temp_variable = { c_mil_score = 0.015 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=90 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=95 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.040 }
                    add_to_temp_variable = { c_mil_score = 0.040 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.020 }
                    add_to_temp_variable = { c_mil_score = 0.020 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=95 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=100 compare=less_than_or_equals }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { c_civ_score = 0.050 }
                    add_to_temp_variable = { c_mil_score = 0.050 }
                }
                else = {
                    add_to_temp_variable = { c_civ_score = 0.025 }
                    add_to_temp_variable = { c_mil_score = 0.025 }
                }
            }
            multiply_temp_variable = { c_civ_score = THIS.num_of_civilian_factories }                                         # BalPac: Minimum 5.6%, Maximum 10.0% of factories.
            multiply_temp_variable = { c_mil_score = THIS.num_of_military_factories }                                         # Normal: Minimum 1.8%, Maximum 4.0% of factories.
            add_to_temp_variable = { total_sub_civs = c_civ_score }
            add_to_temp_variable = { total_sub_mils = c_mil_score }
            log = "[THIS.GetNameDef]:   [?c_civ_score], [?c_mil_score] - [?THIS.num_of_civilian_factories], [?THIS.num_of_military_factories]"
        }
        round_temp_variable = total_sub_civs
        round_temp_variable = total_sub_mils
        GRE = {
            add_to_variable = { sub_civs = total_sub_civs }
            add_to_variable = { sub_mils = total_sub_mils }
        }
    }
}

####################################################################################
################################[ Bedrock Factories ]###############################
####################################################################################

GRE_bedrock_check = {
    clear_variable =  bed_civs 
    hidden_effect = {
        every_country = {
            limit = {
                OR = { original_tag=TUR original_tag=BUL original_tag=YUG original_tag=ALB original_tag=ROM }
                has_opinion = { target = GRE value > 79 }
                check_variable = { var=favor@GRE value=30 compare=greater_than_or_equals }
            }
            if = { 
                limit = { has_country_flag = balkan_pact_reinforced }
                set_temp_variable = { inv_score = 0.150 }                                                                         # Score is 15.0% of country's civ factories.
            }
            else_if = {
                limit = { NOT = { has_country_flag = balkan_pact_reinforced } }
                set_temp_variable = { inv_score = 0.100 }                                                                         # Score is 10.0% of country's civ factories.
            }
            if = {
                limit = {
                    check_variable = { var=favor@GRE value=30 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=40 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.020 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.010 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=40 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=50 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.040 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.020 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=50 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=60 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.060 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.040 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=70 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=80 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.080 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.060 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=80 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=90 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.100 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.080 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=90 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=95 compare=less_than }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.120 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.100 }
                }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=95 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=100 compare=less_than_or_equals }
                }
                if = { 
                    limit = { has_country_flag = balkan_pact_reinforced }
                    add_to_temp_variable = { inv_score = 0.150 }
                }
                else = {
                    add_to_temp_variable = { inv_score = 0.120 }
                }
            }
            multiply_temp_variable = { inv_score = THIS.num_of_civilian_factories }                                         # BalPac: Minimum 17.0%, Maximum 30.0% of factories.                                       
            add_to_temp_variable = { total_bed_civs = inv_score }                                                           # Normal: Minimum 12.0%, Maximum 22.0% of factories.
            #log="Check This Out: [?inv_score] - [?THIS.num_of_civilian_factories]"
        }
        round_temp_variable = total_bed_civs
        GRE = { add_to_variable = { bed_civs = total_bed_civs } }
        if = { 	
            limit = { 
                country_exists = HUN
                HUN = { has_opinion = { target = GRE value > 79 } } 
            }
            add_to_variable = { bed_civs = 1 }
        }	
        if = {
            limit = { 
                country_exists = AUS
                AUS = { has_opinion = { target = GRE value > 79 } } 
            }
            add_to_variable = { bed_civs = 1 }
        }
        else_if = {
            limit = {
                NOT = { country_exists = AUS }
                GER = { has_opinion = { target = GRE value > 79 } }
                check_variable = { var = GER.favor@GRE value = 30 compare = greater_than_or_equals }
            }
            add_to_variable = { bed_civs = 1 }
        }
        if = {
            limit = {
                country_exists = CZE
                CZE = { has_opinion = { target = GRE value > 79 } } 
            }
            add_to_variable = { bed_civs = 2 }
        }
    }
}

########################################################################################
#################################[ Mob.Economy Factories ]##############################
########################################################################################

GRE_mobilized_check = {
    hidden_effect = {
        every_country = {
            limit = {
                is_in_array = {
                    array = global.favor_mechanic
                    value = THIS.id
                }
                has_opinion = { target = GRE value > 79 }  
                check_variable = { num_of_military_factories > 14 }
                check_variable = { var = favor@GRE value = 30 compare = greater_than_or_equals }
            }
            if = { limit = { check_variable = { num_of_military_factories < 31 } } add_to_temp_variable = { x = 0.33 } }        # between 15-30
            else_if = { limit = { check_variable = { num_of_military_factories < 61 } } add_to_temp_variable = { x = 1 } }      # between 30-60
            else_if = { limit = { check_variable = { num_of_military_factories < 100 } } add_to_temp_variable = { x = 2 } }     # between 60-99
            else = { add_to_temp_variable = { x = 3 } }                                                                         # above 100+
            if = {
                limit = {
                    check_variable = { var=favor@GRE value=30 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=40 compare=less_than }
                }
                add_to_temp_variable = { x = 0.20 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=40 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=50 compare=less_than }
                }
                add_to_temp_variable = { x = 0.33 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=50 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=60 compare=less_than }
                }
                add_to_temp_variable = { x = 0.50 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=70 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=80 compare=less_than }
                }
                add_to_temp_variable = { x = 0.75 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=80 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=90 compare=less_than }
                }
                add_to_temp_variable = { x = 1.00 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=90 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=95 compare=less_than }
                }
                add_to_temp_variable = { x = 1.50 }
            }
            else_if = {
                limit = {
                    check_variable = { var=favor@GRE value=95 compare=greater_than_or_equals }
                    check_variable = { var=favor@GRE value=100 compare=less_than_or_equals }
                }
                add_to_temp_variable = { x = 2.00 }
            }
        }
        round_temp_variable = x
        GRE = { set_variable = { mob_mils = x } } 
    }
}

###############################################################################################################################################################

########################################################################################
##############################[ FOREIGN MANUFACTURER ADD ]##############################
########################################################################################

add_bonuses_to_sum = {
    set_temp_variable = { sum = bonus_from_domcom_level }
    add_to_temp_variable = { sum = bonus_from_researched_tech }
    add_to_temp_variable = { sum = bonus_from_country }
}

########################################################################################
#####################################[ METAXAS LINE POP ]###############################
########################################################################################

GRE_line_pop = {
    if = {
        limit = {
            check_variable = { var = GRE.GRE_metaxas_line value = 1 compare = equals }
        }
        add_timed_idea = { idea = GRE_met_line  days = 365 }
        731 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 3526
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 3936
                    instant_build = yes
                }
            }
        }
        840 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13244
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 2
                    province = 9791
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 9930
                    instant_build = yes
                }
            }
        }
        GRE = { set_variable = { GRE_metaxas_line = 3 } }
    }
    else_if = {
        limit = {
            check_variable = { var = GRE.GRE_metaxas_line value = 2 compare = equals }
        }
        add_timed_idea = { idea = GRE_met_line_2  days = 365 }
        731 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 3526
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 3936
                    instant_build = yes
                }
            }
        }
        840 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 13244
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 6
                    province = 9791
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 1
                    province = 9930
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13243
                    instant_build = yes
                }
            }
        }
        184 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 11774
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 13242
                    instant_build = yes
                }
            }
        }
        841 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 11905
                    instant_build = yes
                }
            }
        }
        838 = {
            if = {
                limit = { is_controlled_by = GRE }
                set_building_level = {
                    type = bunker
                    level = 3
                    province = 936
                    instant_build = yes
                }
                set_building_level = {
                    type = bunker
                    level = 2
                    province = 9837
                    instant_build = yes
                }
            }
        } 
        GRE = { set_variable = { GRE_metaxas_line = 3 } }       
    }
}

########################################################################################
#################################[ MILITARY BUDGET REFRESH ]############################
########################################################################################

GRE_budget_refresh = {

    clamp_variable = {
        var = GRE_budget_consumer
        min = 0
        max = 0.5
    }

    clamp_variable = {
        var = GRE_budget_construction
        min = -1
        max = 0
    }
    
    clamp_variable = {
        var = GRE_budget_pp_cost
        min = -2
        max = 0
    }
    
    clamp_variable = {
        var = GRE_budget_resources
        min = -1
        max = 0
    }
}

#############################################################################################
######################################[ WAR STRAIN EFFECTS ]#################################
#############################################################################################

GRE_update_strain_on_industry = {

    set_temp_variable = { x = max_available_manpower_k }                        #[0 manpower in field, -> +40% industry bonus] [ 250.000 manpower in field -> -30% industry bonus ] [ 1.500.000 manpower in field -> -80% industry bonus ]
    subtract_from_temp_variable = { x = manpower_k }
    add_to_temp_variable = { x = casualties_k } 
    if = {
        limit = {
            check_variable = { x < 250 }
        }
        multiply_temp_variable = { x = -0.28 }                                 # y = 0.28x - 4
        add_to_temp_variable = { x = 40 }
    }
    else = {
        multiply_temp_variable = { x = -0.04 }                               # y = -0.04x - 20
        add_to_temp_variable = { x = -20 }
    }
    divide_temp_variable = { x = 100 }
    set_variable = { strain_fct = x }
    set_variable = { strain_dck = x }
    if = {
        limit = {
            check_variable = { grecoitalian_war_counter > 150 }
        }
        set_temp_variable = { x = grecoitalian_war_counter }
        divide_temp_variable = { x = -3000 }
        set_variable = { strain_atk = x }
        set_variable = { strain_def = x }
        set_variable = { strain_org = x }
    }
    else = {
        set_variable = { strain_atk = 0 }
        set_variable = { strain_def = 0 }
        set_variable = { strain_org = 0 }
    }
}

#############################################################################################
#######################################[ RETURN IC RATIO ]###################################
#############################################################################################

calculate_ticr_tmpT_THIS = {
    #scope: other country. Returns ticr (temp variable)
    if = {
        limit = { check_variable = { tmpT = 0 } }                         #Civ + Mil, Civ == Mil
        set_temp_variable = { ticr = GRE.num_of_factories }
        divide_temp_variable = { ticr = THIS.num_of_factories }
    }
    else_if = {
        limit = { check_variable = { tmpT = 1 } }                         #Civ + Mil, Mil = 2/3 Civ
        set_temp_variable = { ticr = GRE.num_of_military_factories }
        multiply_temp_variable = { ticr = 0.666 }
        add_to_temp_variable = { ticr = GRE.num_of_civilian_factories }
        set_temp_variable = { other_ticr = THIS.num_of_military_factories }
        multiply_temp_variable = { other_ticr = 0.666 }
        add_to_temp_variable = { other_ticr = THIS.num_of_civilian_factories }
        divide_temp_variable = { ticr = other_ticr }
    }
    else_if = {
        limit = { check_variable = { tmpT = 2 } }                         #Civ only
        set_temp_variable = { ticr = GRE.num_of_civilian_factories }
        divide_temp_variable = { ticr = THIS.num_of_civilian_factories }
    }
    else_if = {
        limit = { check_variable = { tmpT = 3 } }                         #Mil only
        set_temp_variable = { ticr = GRE.num_of_military_factories }
        divide_temp_variable = { ticr = THIS.num_of_military_factories }
    }
}

#############################################################################################
####################################[ STATE RESOURCE CALCUL ]################################
#############################################################################################


h241_clear_variables = {
    clear_variable = h241_state_oil
    clear_variable = h241_state_aluminium
    clear_variable = h241_state_rubber
    clear_variable = h241_state_tungsten
    clear_variable = h241_state_steel
    clear_variable = h241_state_chromium 
    clear_variable = h241_state_id
    clear_variable = iterations
    clear_array = h241_sorted_id
    clear_array = h241_sorted_weight
    clear_array = h241_weight
    clear_array = h241_id
    GRE = { clr_country_flag = mr_ongoing_negotiations }
    clear_variable = h241_return_id
    clear_variable = h241_return_weight
    clear_variable = h241_first_run
    clear_variable = h241_willingness
    clear_variable = total_worth
    clear_variable = dec_pp_chosen
    clear_variable = dec_equip_chosen
    clear_variable = dec_pp_gain
    clear_variable = dec_inf_equipment
    clear_variable = dec_art_equipment
    clear_variable = dec_sup_equipment
    clear_variable = h241_first_run
    GRE = { clr_country_flag = mr_ongoing_negotiations }    
}

calculate_state_resource_importance_PREV = {                    # PREV Country, THIS State
    hidden_effect = {
        ####[Weight Calculation]####
        ###[State Temp Variables]###
        set_temp_variable = { state_res_imp_oil = resource@oil }
        set_temp_variable = { state_res_imp_aluminium = resource@aluminium }
        set_temp_variable = { state_res_imp_rubber = resource@rubber }
        set_temp_variable = { state_res_imp_tungsten = resource@tungsten }
        set_temp_variable = { state_res_imp_steel = resource@steel }
        set_temp_variable = { state_res_imp_chromium = resource@chromium }
        PREV = {
            if = { limit = { check_variable = { state_res_imp_oil > 0 } }
                ###[Oil]###
                if = { limit = { OR = { original_tag = GER original_tag = JAP original_tag = ITA } } multiply_temp_variable = { sr_needed_weight?1 = 1.25 } }
                set_temp_variable = { produces = THIS.resource_produced@oil }
                set_temp_variable = { exports = THIS.resource_exported@oil }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { fuel_available = produces }
                if = {
                    limit = {
                        OR = {
                            check_variable = { fuel_available < 75 }
                            fuel_ratio < 0.41
                        }
                    }
                    multiply_temp_variable = { sr_needed_weight?1 = 1.25 }
                }
            }
            if = { limit = { check_variable = { state_res_imp_aluminium > 0 } }
                ###[Aluminium]###
                set_temp_variable = { produces = THIS.resource_produced@aluminium }
                set_temp_variable = { exports = THIS.resource_exported@aluminium }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { aluminium_available = produces }                          ## Available Resource
                set_temp_variable = { aluminium_required = THIS.resource_consumed@aluminium }   ## Requirements
                if = { limit = { check_variable = { aluminium_required > aluminium_available } } multiply_temp_variable = { sr_needed_weight?1 = 1.1 } }
            }
            if = { limit = { check_variable = { state_res_imp_rubber > 0 } }
                ###[Rubber]###
                set_temp_variable = { produces = THIS.resource_produced@rubber }
                set_temp_variable = { exports = THIS.resource_exported@rubber }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { rubber_available = produces }                             ## Available Resource
                set_temp_variable = { rubber_required = THIS.resource_consumed@rubber }         ## Requirements
                if = { limit = { check_variable = { rubber_required > rubber_available } } multiply_temp_variable = { sr_needed_weight?1 = 1.1 } }
            }
            if = { limit = { check_variable = { state_res_imp_tungsten > 0 } }
                ###[Tungsten]###
                set_temp_variable = { produces = THIS.resource_produced@tungsten }
                set_temp_variable = { exports = THIS.resource_exported@tungsten }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { tungsten_available = produces }                           ## Available Resource
                set_temp_variable = { tungsten_required = THIS.resource_consumed@tungsten }     ## Requirements
                if = { limit = { check_variable = { tungsten_required > tungsten_available } } multiply_temp_variable = { sr_needed_weight?1 = 1.1 } }
            }
            if = { limit = { check_variable = { state_res_imp_steel > 0 } }
                ###[Steel]###
                set_temp_variable = { produces = THIS.resource_produced@steel }
                set_temp_variable = { exports = THIS.resource_exported@steel }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { steel_available = produces }                              ## Available Resource
                set_temp_variable = { steel_required = THIS.resource_consumed@steel }           ## Requirements
                if = { limit = { check_variable = { steel_required > steel_available } } multiply_temp_variable = { sr_needed_weight?1 = 1.1 } }
            }
            if = { limit = { check_variable = { state_res_imp_chromium > 0 } }
                ###[Chromium]###
                set_temp_variable = { produces = THIS.resource_produced@chromium }
                set_temp_variable = { exports = THIS.resource_exported@chromium }
                subtract_from_temp_variable = { produces = exports }
                set_temp_variable = { chromium_available = produces }                           ## Available Resource
                set_temp_variable = { chromium_required = THIS.resource_consumed@chromium }     ## Requirements
                if = { limit = { check_variable = { chromium_required > chromium_available } } multiply_temp_variable = { sr_needed_weight?1 = 1.1 } }
            }
            set_temp_variable = { state_res_weight = sr_needed_weight }
        }
        ####[Price Calculation]####
        set_temp_variable = { tmp = state_res_imp_oil}                      # price = 0.2 * x
        multiply_temp_variable = { tmp = 0.2 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_aluminium}                # price = 0.08 * x
        multiply_temp_variable = { tmp = 0.08 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_rubber}                   # price = 0.18 * x
        multiply_temp_variable = { tmp = 0.18 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_tungsten}                 # price = 0.13 * x
        multiply_temp_variable = { tmp = 0.13 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_steel}                    # price = 0.10 * x
        multiply_temp_variable = { tmp = 0.1 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_chromium}                 # price = 0.07 * x
        multiply_temp_variable = { tmp = 0.07 }
        add_to_temp_variable = { total_worth = tmp }
        multiply_variable = { total_worth = state_res_weight }
        #round_variable = total_worth
    }
}

calculate_state_resource_importance_ONLY = {                                ## THIS State
    hidden_effect = {
        ####[Weight Calculation]####
        ####[Price Calculation]####
        set_temp_variable = { total_worth = 0 }
        set_temp_variable = { tmp = resource@oil }                           # price = 0.2 * x
        multiply_temp_variable = { tmp = 0.2 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = resource@aluminium }                     # price = 0.08 * x
        multiply_temp_variable = { tmp = 0.08 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = resource@rubber }                        # price = 0.18 * x
        multiply_temp_variable = { tmp = 0.18 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = resource@steel }                         # price = 0.13 * x
        multiply_temp_variable = { tmp = 0.13 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = state_res_imp_steel }                    # price = 0.10 * x
        multiply_temp_variable = { tmp = 0.1 }
        add_to_temp_variable = { total_worth = tmp }
        set_temp_variable = { tmp = resource@chromium }                      # price = 0.07 * x
        multiply_temp_variable = { tmp = 0.07 }
        add_to_temp_variable = { total_worth = tmp }
        round_temp_variable = total_worth
    }
}

#############################################################################################################################################################################################
######################################################################################[ AXIS AND ALLIES ]####################################################################################
#############################################################################################################################################################################################

##########################################################
#####################[ EVENTS CLEAN ]#####################
##########################################################

reset_axal_events_variables = {
    set_variable = { axal_event_al5 = 0 }
    set_variable = { axal_event_al4 = 0 }
    set_variable = { axal_event_al3 = 0 }
    set_variable = { axal_event_al2 = 0 }
    set_variable = { axal_event_al1 = 0 }
    set_variable = { axal_event_n = 0 }
    set_variable = { axal_event_ax1 = 0 }
    set_variable = { axal_event_ax2 = 0 }
    set_variable = { axal_event_ax3 = 0 }
    set_variable = { axal_event_ax4 = 0 }
    set_variable = { axal_event_ax5 = 0 }
}

##########################################################
######################[ FAVOR CALC ]######################
##########################################################

return_AXALB_favor = {
    if = {
        limit = { THIS = { belongs_in_the_axis_sphere = yes } }
        if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { axalb = 3.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { axalb = 2.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { axalb = 1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { axalb = 0.50 } }
        else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { axalb = 0.20 } }
        else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { axalb = 0.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { axalb = -0.20 } }
        else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { axalb = -0.50 } }
        else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { axalb = -1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { axalb = -2.00 } }
        else = { set_temp_variable = { axalb = -3.00 } }
    }
    else_if = {
        limit = { THIS = { belongs_in_the_allied_sphere = yes } }
        if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { axalb = -3.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { axalb = -2.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { axalb = -1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { axalb = -0.50 } }
        else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { axalb = -0.20 } }
        else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { axalb = 0.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { axalb = 0.20 } }
        else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { axalb = 0.50 } }
        else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { axalb = 1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { axalb = 2.00 } }
        else = { set_temp_variable = { axalb = 3.00 } }
    }
    else = {
        set_temp_variable = { axalb = 0 }
    }
}

##########################################################
####################[ MULTIPLIER CALC ]###################
##########################################################

calculate_axal_axis_multiplier_polarized = {
    if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = 3 } }
    else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = 2.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = 1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = 1.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = 0.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 0.00 } }
    else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = -0.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = -1.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = -1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = -2.25 } }
    else = { set_temp_variable = { alax_multiplier = -3 } }
}

calculate_axal_allies_multiplier_polarized = {
    if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = -3 } }
    else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = -2.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = -1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = -1.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = -0.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 0.00 } }
    else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = 0.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = 1.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = 1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = 2.25 } }
    else = { set_temp_variable = { alax_multiplier = 3 } }
}

calculate_axal_axis_multiplier = {
    if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = 3 } }
    else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = 2.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = 1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = 1.3 } }
    else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = 1.15 } }
    else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 1.00 } }
    else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = 0.85 } }
    else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = 0.7 } }
    else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = 0.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = 0.10 } }
    else = { set_temp_variable = { alax_multiplier = 0 } }
}

calculate_axal_allies_multiplier = {
    if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = 0 } }
    else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = 0.10 } }
    else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = 0.25 } }
    else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = 0.7 } }
    else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = 0.85 } }
    else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 1.00 } }
    else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = 1.15 } }
    else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = 1.3 } }
    else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = 1.75 } }
    else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = 2.25 } }
    else = { set_temp_variable = { alax_multiplier = 3 } }
}

calculate_alax_multiplier = {
    if = {
        limit = { var:h241_return_id = { belongs_in_the_axis_sphere = yes } }
        if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = 3 } }
        else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = 2.25 } }
        else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = 1.75 } }
        else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = 1.3 } }
        else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = 1.15 } }
        else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = 0.85 } }
        else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = 0.7 } }
        else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = 0.25 } }
        else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = 0.10 } }
        else = { set_temp_variable = { alax_multiplier = 0 } }
    }
    else_if = {
        limit = { var:h241_return_id = { belongs_in_the_allied_sphere = yes } }
        if = { limit = { check_variable = { GRE.alax < 5 } } set_temp_variable = { alax_multiplier = 0 } }
        else_if = { limit = { check_variable = { GRE.alax < 10 } } set_temp_variable = { alax_multiplier = 0.10 } }
        else_if = { limit = { check_variable = { GRE.alax < 20 } } set_temp_variable = { alax_multiplier = 0.25 } }
        else_if = { limit = { check_variable = { GRE.alax < 30 } } set_temp_variable = { alax_multiplier = 0.7 } }
        else_if = { limit = { check_variable = { GRE.alax < 40.01 } } set_temp_variable = { alax_multiplier = 0.85 } }
        else_if = { limit = { check_variable = { GRE.alax < 59.99 } } set_temp_variable = { alax_multiplier = 1.00 } }
        else_if = { limit = { check_variable = { GRE.alax < 70 } } set_temp_variable = { alax_multiplier = 1.15 } }
        else_if = { limit = { check_variable = { GRE.alax < 80 } } set_temp_variable = { alax_multiplier = 1.30 } }
        else_if = { limit = { check_variable = { GRE.alax < 90 } } set_temp_variable = { alax_multiplier = 1.75 } }
        else_if = { limit = { check_variable = { GRE.alax < 95.01 } } set_temp_variable = { alax_multiplier = 2.25 } }
        else = { set_temp_variable = { alax_multiplier = 3 } }
    }
    else = {
        set_temp_variable = { alax_multiplier = 1 }
    }
}

##########################################################
########################[ INC/DEC ]#######################
##########################################################

tmpT_axal_by_tmpQ = {
    set_temp_variable_to_random = { var = vardifier min = 0.75 max = 1.25 }
    multiply_temp_variable = { tmpQ = vardifier }
    if = {
        limit = { check_variable = { tmpT = 1 } }                                           # Increase AXAL (towards Axis), Decrease ALAX (subsequently)
        add_to_variable = { GRE.axal = tmpQ }
        custom_effect_tooltip = increase_axal_by_tmpQ
    }
    else = {
        subtract_from_variable = { GRE.axal = tmpQ }
        custom_effect_tooltip = decrease_axal_by_tmpQ
    }
    axal_gui_call = yes
}

#############################################################################################################################################################################################
######################################################################################[ EASTERN PROSPECT ]###################################################################################
#############################################################################################################################################################################################


#########################################################
####################[ ALIGNMENT CALC.]###################
#########################################################

ep_calculate_alignment = {
    set_temp_variable = { ep_pot = 100 }
    set_temp_variable = { ep_done_for_chn = GRE.helped_the_chinese_nationalists_magnitude }
    set_temp_variable = { ep_done_for_chc = GRE.helped_the_chinese_communists_magnitude }
    set_temp_variable = { ep_done_for_jap = GRE.helped_the_japanese_magnitude}
    if = {
        limit = { 
            check_variable = { ep_done_for_chn > ep_done_for_chc }
            check_variable = { ep_done_for_chn > ep_done_for_jap }
        }
        set_variable = { GRE.ep_leading = CHI.id }
    }
    else_if = {
        limit = { 
            check_variable = { ep_done_for_chc > ep_done_for_chn }
            check_variable = { ep_done_for_chc > ep_done_for_jap }
        }
        set_variable = { GRE.ep_leading = PRC.id }
    }
    else_if = {
        limit = { 
            check_variable = { ep_done_for_jap > ep_done_for_chn }
            check_variable = { ep_done_for_jap > ep_done_for_chc }
        }
        set_variable = { GRE.ep_leading = JAP.id }
    }
    else = {
        clear_variable = GRE.ep_leading
    }
    add_to_temp_variable = { ep_total = ep_done_for_chn }
    add_to_temp_variable = { ep_total = ep_done_for_chc }
    add_to_temp_variable = { ep_total = ep_done_for_jap }
    if = {
        limit = { check_variable = { ep_total < 5 } }
        set_variable = { GRE.ep_perc@CHI = 33.3 }
        set_variable = { GRE.ep_perc@PRC = 33.3 }
        set_variable = { GRE.ep_perc@JAP = 33.3 }
    }
    else = {
        set_temp_variable = { ep_percentage_distr = 100 }
        divide_temp_variable = { ep_percentage_distr = ep_total }
        multiply_temp_variable = { ep_done_for_chc = ep_percentage_distr }
        multiply_temp_variable = { ep_done_for_chn = ep_percentage_distr }
        multiply_temp_variable = { ep_done_for_jap = ep_percentage_distr }
        set_variable = { GRE.ep_perc@CHI = ep_done_for_chc }
        set_variable = { GRE.ep_perc@PRC = ep_done_for_chn }
        set_variable = { GRE.ep_perc@JAP = ep_done_for_jap }
    }
}

#############################################################################################################################################################################################
########################################################################################[UNIT LEADER]########################################################################################
#############################################################################################################################################################################################

#####################################################################################################################################################################
################################################################[GUI REFRESHERS FOR MILITARY EFFECTS]################################################################
#####################################################################################################################################################################

#############################################################################################
################################[ FIRST MAIN REFRESH FUNCTION ]##############################
#############################################################################################

find_total_and_faction_weight_of_ideology_characters = {
    find_num_weight_initialize_main_weight_variables = yes
    find_num_weight_initialize_battalion_variables = yes
    every_unit_leader = {
        #limit = { OR = { is_army_leader = yes is_navy_leader = yes } }
        ###[Main Ideologies]###
        if = {
            ###[Asgn]###
            limit = { has_trait = trait_GRE_stauch_monarchist_persona }
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { mon_weight = 8.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { mon_weight = 6.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { mon_weight = 4.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 2.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 3.00 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 4.00 } } else = { add_to_temp_variable = { mon_weight = 1.00 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 0.20 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 0.30 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 0.40 } } else = { add_to_temp_variable = { mon_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } add_to_temp_variable = { mon_bats = num_battalions } }
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes add_to_temp_variable = { mon_ships = total_ship_weight } }
        }
        else_if = {
            limit = { has_trait = trait_GRE_stauch_republican_persona } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { dem_weight = 8.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { dem_weight = 6.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { dem_weight = 4.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { dem_weight = 2.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { dem_weight = 3.00 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { dem_weight = 4.00 } } else = { add_to_temp_variable = { dem_weight = 1.00 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { dem_weight = 0.20 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { dem_weight = 0.30 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { dem_weight = 0.40 } } else = { add_to_temp_variable = { dem_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } add_to_temp_variable = { dem_bats = num_battalions } }
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes add_to_temp_variable = { dem_ships = total_ship_weight } }
        }
        else_if = {
            limit = { has_trait = trait_GRE_stauch_communist_persona } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { com_weight = 8.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { com_weight = 6.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { com_weight = 4.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { com_weight = 2.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { com_weight = 3.00 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { com_weight = 4.00 } } else = { add_to_temp_variable = { com_weight = 1.00 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { com_weight = 0.20 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { com_weight = 0.30 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { com_weight = 0.40 } } else = { add_to_temp_variable = { com_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } add_to_temp_variable = { com_bats = num_battalions } }
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes add_to_temp_variable = { com_ships = total_ship_weight } }
        }
        else_if = {
            limit = { has_trait = trait_GRE_stauch_fascist_persona } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { fas_weight = 8.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { fas_weight = 6.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { fas_weight = 4.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { fas_weight = 2.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { fas_weight = 3.00 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { fas_weight = 4.00 } } else = { add_to_temp_variable = { fas_weight = 1.00 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { fas_weight = 0.20 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { fas_weight = 0.30 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { fas_weight = 0.40 } } else = { add_to_temp_variable = { fas_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } add_to_temp_variable = { fas_bats = num_battalions } }
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes add_to_temp_variable = { fas_ships = total_ship_weight } }
        }
        ###[Leanings]###
        else_if = {
            ###[Asgn]###
            limit = { has_trait = trait_GRE_conventional_leanings } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { mon_weight = 4.00 } add_to_temp_variable = { dem_weight = 4.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { mon_weight = 3.00 } add_to_temp_variable = { dem_weight = 3.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { mon_weight = 2.00 } add_to_temp_variable = { dem_weight = 2.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 1.00 } add_to_temp_variable = { dem_weight = 1.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 1.50 } add_to_temp_variable = { dem_weight = 1.50 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 2.00 } add_to_temp_variable = { dem_weight = 2.00 } } else = { add_to_temp_variable = { mon_weight = 0.50 } add_to_temp_variable = { dem_weight = 0.50 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 0.10 } add_to_temp_variable = { dem_weight = 0.10 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 0.15 } add_to_temp_variable = { dem_weight = 0.15 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 0.20 } add_to_temp_variable = { dem_weight = 0.20 } } else = { add_to_temp_variable = { mon_weight = 0.10 } add_to_temp_variable = { dem_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } set_temp_variable = { tmp = num_battalions } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { mon_bats = tmp } add_to_temp_variable = { dem_bats = tmp } } 
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes set_temp_variable = { tmp = total_ship_weight } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { mon_ships = tmp } add_to_temp_variable = { dem_ships = tmp } }
        }
        else_if = {
            ###[Asgn]###
            limit = { has_trait = trait_GRE_monarchofascism_leanings } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { mon_weight = 4.00 } add_to_temp_variable = { fas_weight = 4.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { mon_weight = 3.00 } add_to_temp_variable = { fas_weight = 3.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { mon_weight = 2.00 } add_to_temp_variable = { fas_weight = 2.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 1.00 } add_to_temp_variable = { fas_weight = 1.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 1.50 } add_to_temp_variable = { fas_weight = 1.50 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 2.00 } add_to_temp_variable = { fas_weight = 2.00 } } else = { add_to_temp_variable = { mon_weight = 0.50 } add_to_temp_variable = { fas_weight = 0.50 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mon_weight = 0.10 } add_to_temp_variable = { fas_weight = 0.10 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mon_weight = 0.15 } add_to_temp_variable = { fas_weight = 0.15 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mon_weight = 0.20 } add_to_temp_variable = { fas_weight = 0.20 } } else = { add_to_temp_variable = { mon_weight = 0.10 } add_to_temp_variable = { fas_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } set_temp_variable = { tmp = num_battalions } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { mon_bats = tmp } add_to_temp_variable = { fas_bats = tmp } } 
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes set_temp_variable = { tmp = total_ship_weight } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { mon_ships = tmp } add_to_temp_variable = { fas_ships = tmp } }
        }
        else_if = {
            ###[Asgn]###
            limit = { has_trait = trait_GRE_socialdemocratic_leanings } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { dem_weight = 4.00 } add_to_temp_variable = { com_weight = 4.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { dem_weight = 3.00 } add_to_temp_variable = { com_weight = 3.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { dem_weight = 2.00 } add_to_temp_variable = { com_weight = 2.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { dem_weight = 1.00 } add_to_temp_variable = { com_weight = 1.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { dem_weight = 1.50 } add_to_temp_variable = { com_weight = 1.50 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { dem_weight = 2.00 } add_to_temp_variable = { com_weight = 2.00 } } else = { add_to_temp_variable = { dem_weight = 0.50 } add_to_temp_variable = { com_weight = 0.50 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { dem_weight = 0.10 } add_to_temp_variable = { com_weight = 0.10 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { dem_weight = 0.15 } add_to_temp_variable = { com_weight = 0.15 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { dem_weight = 0.20 } add_to_temp_variable = { com_weight = 0.20 } } else = { add_to_temp_variable = { dem_weight = 0.10 } add_to_temp_variable = { com_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } set_temp_variable = { tmp = num_battalions } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { dem_bats = tmp } add_to_temp_variable = { com_bats = tmp } } 
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes set_temp_variable = { tmp = total_ship_weight } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { dem_ships = tmp } add_to_temp_variable = { com_ships = tmp } }
        }
        else_if = {
            ###[Asgn]###
            limit = { has_trait = trait_GRE_revolutionary_leanings } 
            if = { limit = { OR = { has_character_flag = selected_as_army_chief has_character_flag = selected_as_navy_chief } } add_to_temp_variable = { com_weight = 4.00 } add_to_temp_variable = { fas_weight = 4.00 } }
            else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { com_weight = 3.00 } add_to_temp_variable = { fas_weight = 3.00 } }
            else_if = { limit = { has_character_flag = selected_in_high_command } add_to_temp_variable = { com_weight = 2.00 } add_to_temp_variable = { fas_weight = 2.00 } }
            else_if = { limit = { is_assigned = yes } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { com_weight = 1.00 } add_to_temp_variable = { fas_weight = 1.00 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { com_weight = 1.50 } add_to_temp_variable = { fas_weight = 1.50 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { com_weight = 2.00 } add_to_temp_variable = { fas_weight = 2.00 } } else = { add_to_temp_variable = { com_weight = 0.50 } add_to_temp_variable = { fas_weight = 0.50 } } }
            else_if = { limit = { is_assigned = no } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { com_weight = 0.10 } add_to_temp_variable = { fas_weight = 0.10 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { com_weight = 0.15 } add_to_temp_variable = { fas_weight = 0.15 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { com_weight = 0.20 } add_to_temp_variable = { fas_weight = 0.20 } } else = { add_to_temp_variable = { com_weight = 0.10 } add_to_temp_variable = { fas_weight = 0.10 } } }
            ###[Bats]###
            if = { limit = { is_leading_army_group = no is_army_leader = yes check_variable = { num_battalions > 0 } } set_temp_variable = { tmp = num_battalions } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { com_bats = tmp } add_to_temp_variable = { fas_bats = tmp } } 
            ###[Ships]###
            if = { limit = { is_navy_leader = yes check_variable = { num_ships > 0 } } find_num_weight_initialize_ships_variables = yes set_temp_variable = { tmp = total_ship_weight } divide_temp_variable = { tmp = 2 } add_to_temp_variable = { com_ships = tmp } add_to_temp_variable = { fas_ships = tmp } }
        }
    }
    add_to_temp_variable = { totalf_weight = mon_weight }
    add_to_temp_variable = { totalf_weight = dem_weight }
    add_to_temp_variable = { totalf_weight = com_weight }
    add_to_temp_variable = { totalf_weight = fas_weight }
    #log = "Mon Weight End: [?mon_weight]"
    #log = "Dem Weight End: [?dem_weight]"
    #log = "Com Weight End: [?com_weight]"
    #log = "Fas Weight End: [?fas_weight]"
    #log = "Tot Weight End: [?totalf_weight]"
    ##################################[Total Assignment Weight (50%)]##################################
    set_variable = { GRE.mon_asgn_w = mon_weight }
    multiply_variable = { GRE.mon_asgn_w = 100 }
    #log = "Mon Weight 100: [?GRE.mon_asgn_w]"
    set_variable = { GRE.dem_asgn_w = dem_weight }
    multiply_variable = { GRE.dem_asgn_w = 100 }
    set_variable = { GRE.com_asgn_w = com_weight }
    multiply_variable = { GRE.com_asgn_w = 100 }
    set_variable = { GRE.fas_asgn_w = fas_weight }
    multiply_variable = { GRE.fas_asgn_w = 100 }
    set_variable = { GRE.tot_asgn_w = totalf_weight }
    divide_variable = { GRE.mon_asgn_w = GRE.tot_asgn_w } 
    divide_variable = { GRE.dem_asgn_w = GRE.tot_asgn_w } 
    divide_variable = { GRE.com_asgn_w = GRE.tot_asgn_w } 
    divide_variable = { GRE.fas_asgn_w = GRE.tot_asgn_w }   ### Final percentage reached here: E.g. (100*100)/250 = 40% (first multiply x% because game sucks at keeping digits properly)
    set_variable = { GRE.mon_asgn_w_s = GRE.mon_asgn_w } 
    set_variable = { GRE.dem_asgn_w_s = GRE.dem_asgn_w } 
    set_variable = { GRE.com_asgn_w_s = GRE.com_asgn_w } 
    set_variable = { GRE.fas_asgn_w_s = GRE.fas_asgn_w }
    multiply_variable = { GRE.mon_asgn_w_s = 0.5 } 
    multiply_variable = { GRE.dem_asgn_w_s = 0.5 } 
    multiply_variable = { GRE.com_asgn_w_s = 0.5 } 
    multiply_variable = { GRE.fas_asgn_w_s = 0.5 }          ### Here we take the score for calculations
    ##################################[Battalion Under Command (30%)]##################################
    set_variable = { GRE.mon_bat_w = mon_bats }
    multiply_variable = { GRE.mon_bat_w = 100 }
    set_variable = { GRE.dem_bat_w = dem_bats }
    multiply_variable = { GRE.dem_bat_w = 100 }
    set_variable = { GRE.com_bat_w = com_bats }
    multiply_variable = { GRE.com_bat_w = 100 }
    set_variable = { GRE.fas_bat_w = fas_bats }
    multiply_variable = { GRE.fas_bat_w = 100 }
    divide_variable = { GRE.mon_bat_w = GRE.num_battalions } 
    divide_variable = { GRE.dem_bat_w = GRE.num_battalions } 
    divide_variable = { GRE.com_bat_w = GRE.num_battalions } 
    divide_variable = { GRE.fas_bat_w = GRE.num_battalions }   ### Final percentage reached here: I mult with x100 first cause I want to display the % of battalions as tooltip.
    set_variable = { GRE.mon_bat_w_s = GRE.mon_bat_w } 
    set_variable = { GRE.dem_bat_w_s = GRE.dem_bat_w } 
    set_variable = { GRE.com_bat_w_s = GRE.com_bat_w } 
    set_variable = { GRE.fas_bat_w_s = GRE.fas_bat_w }
    multiply_variable = { GRE.mon_bat_w_s = 0.3 } 
    multiply_variable = { GRE.dem_bat_w_s = 0.3 } 
    multiply_variable = { GRE.com_bat_w_s = 0.3 } 
    multiply_variable = { GRE.fas_bat_w_s = 0.3 }          ### Here we take the score for calculations
    ##################################[Ships Under Command (20%)]##################################
    GRE = { find_num_weight_initialize_ships_variables = yes } ### running this through country scope calcs for ALL ships. For char scope, for his ships.
    set_variable = { GRE.total_ship_weight = total_ship_weight }
    set_variable = { GRE.mon_ships_w = mon_ships }
    multiply_variable = { GRE.mon_ships_w = 100 }
    set_variable = { GRE.dem_ships_w = dem_ships }
    multiply_variable = { GRE.dem_ships_w = 100 }
    set_variable = { GRE.com_ships_w = com_ships }
    multiply_variable = { GRE.com_ships_w = 100 }
    set_variable = { GRE.fas_ships_w = fas_ships }
    multiply_variable = { GRE.fas_ships_w = 100 }
    divide_variable = { GRE.mon_ships_w = GRE.total_ship_weight } 
    divide_variable = { GRE.dem_ships_w = GRE.total_ship_weight } 
    divide_variable = { GRE.com_ships_w = GRE.total_ship_weight } 
    divide_variable = { GRE.fas_ships_w = GRE.total_ship_weight }   ### Final percentage reached here: I mult with x100 first cause I want to display the % of battalions as tooltip.
    set_variable = { GRE.mon_ships_w_s = GRE.mon_ships_w } 
    set_variable = { GRE.dem_ships_w_s = GRE.dem_ships_w } 
    set_variable = { GRE.com_ships_w_s = GRE.com_ships_w } 
    set_variable = { GRE.fas_ships_w_s = GRE.fas_ships_w }
    multiply_variable = { GRE.mon_ships_w_s = 0.2 } 
    multiply_variable = { GRE.dem_ships_w_s = 0.2 } 
    multiply_variable = { GRE.com_ships_w_s = 0.2 } 
    multiply_variable = { GRE.fas_ships_w_s = 0.2 }          ### Here we take the score for calculations
    ##################################[Final Addition]##################################
    set_variable = { GRE.final_mon_military_weight = mon_asgn_w_s }
    add_to_variable = { GRE.final_mon_military_weight = mon_bat_w_s }
    add_to_variable = { GRE.final_mon_military_weight = mon_ships_w_s }
    set_variable = { GRE.final_dem_military_weight = dem_asgn_w_s }
    add_to_variable = { GRE.final_dem_military_weight = dem_bat_w_s }
    add_to_variable = { GRE.final_dem_military_weight = dem_ships_w_s }
    set_variable = { GRE.final_com_military_weight = com_asgn_w_s }
    add_to_variable = { GRE.final_com_military_weight = com_bat_w_s }
    add_to_variable = { GRE.final_com_military_weight = com_ships_w_s }
    set_variable = { GRE.final_fas_military_weight = fas_asgn_w_s }
    add_to_variable = { GRE.final_fas_military_weight = fas_bat_w_s }
    add_to_variable = { GRE.final_fas_military_weight = fas_ships_w_s }
}

#############################################################################################
################################[ SECOND MAIN REFRESH FUNCTION ]#############################
#############################################################################################

find_num_weight_of_ideology_characters = {
    ##################################################################
    ##############################[ARMY]##############################
    ##################################################################
    find_num_weight_initialize_temps = yes
    every_army_leader = {
        ###[Overall Beliefs]### 
        if = { limit = { has_trait = trait_GRE_stauch_monarchist_persona } add_to_temp_variable = { mcnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { mcntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { mcnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_republican_persona } add_to_temp_variable = { rcnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { rcntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { rcnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { rcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { rcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { rcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_communist_persona } add_to_temp_variable = { ccnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { ccntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { ccnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { ccnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { ccnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { ccnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_fascist_persona } add_to_temp_variable = { fcnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { fcntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { fcnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { fcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { fcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { fcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_conventional_leanings } add_to_temp_variable = { cocnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { cocntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { cocnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { cocnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { cocnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { cocnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_socialdemocratic_leanings } add_to_temp_variable = { sdcnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { sdcntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { sdcnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { sdcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { sdcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { sdcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_monarchofascism_leanings } add_to_temp_variable = { mfcnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { mfcntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { mfcnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mfcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mfcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mfcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_revolutionary_leanings } add_to_temp_variable = { recnter = 1 } if = { limit = { is_leading_army = yes } add_to_temp_variable = { recntera = 1 } } else_if = { limit = { is_leading_army_group = yes } add_to_temp_variable = { recnterag = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { recnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { recnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { recnterv4 = 1 } } }
        ###[Friendliness]###
        ##[+4 to -4, depending on level Loyal->Friendly. If character has 2 beliefs, then the highest is taken into consideration]##
        if = { limit = { set_temp_variable = { tmpZ = 0.8 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { loyal_cnter = 1 } add_to_temp_variable = { overall_cnter = 4 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.7 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { friendly_cnter = 1 } add_to_temp_variable = { overall_cnter = 3 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.6 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { growing_cnter = 1 } add_to_temp_variable = { overall_cnter = 2 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.5 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { adequate_cnter = 1 } add_to_temp_variable = { overall_cnter = 1 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.4 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { inconsequential_cnter = 1 } add_to_temp_variable = { overall_cnter = 0 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.3 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { unfavorable_cnter = 1 } add_to_temp_variable = { overall_cnter = -1 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.2 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { worsening_cnter = 1 } add_to_temp_variable = { overall_cnter = -2 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.1 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { horrible_cnter = 1 } add_to_temp_variable = { overall_cnter = -3 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.0 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { rebellious_cnter = 1 } add_to_temp_variable = { overall_cnter = -4 } }  
    }
    ###[Land Leaders]###
    set_variable = { GRE.monarchist_leaders = mcnter }
    set_variable = { GRE.republican_leaders = rcnter }
    set_variable = { GRE.communist_leaders = ccnter }
    set_variable = { GRE.fascist_leaders = fcnter }
    set_variable = { GRE.conventional_leaders = cocnter }
    set_variable = { GRE.socialdemocratic_leaders = sdcnter }
    set_variable = { GRE.monarchofascist_leaders = mfcnter }
    set_variable = { GRE.revolutionary_leaders = recnter }
    ##[Assigned]##
    set_variable = { GRE.monarchist_leaders_assigned = mcntera }
    set_variable = { GRE.republican_leaders_assigned = rcntera }
    set_variable = { GRE.communist_leaders_assigned = ccntera }
    set_variable = { GRE.fascist_leaders_assigned = fcntera }
    set_variable = { GRE.conventional_leaders_assigned = cocntera }
    set_variable = { GRE.socialdemocratic_leaders_assigned = sdcntera }
    set_variable = { GRE.monarchofascist_leaders_assigned = mfcntera }
    set_variable = { GRE.revolutionary_leaders_assigned = recntera }
    set_variable = { GRE.monarchist_leaders_assigned_fm = mcnterag } 
    set_variable = { GRE.republican_leaders_assigned_fm = rcnterag } 
    set_variable = { GRE.communist_leaders_assigned_fm = ccnterag } 
    set_variable = { GRE.fascist_leaders_assigned_fm = fcnterag } 
    set_variable = { GRE.conventional_leaders_assigned_fm = cocnterag } 
    set_variable = { GRE.socialdemocratic_leaders_assigned_fm = sdcnterag } 
    set_variable = { GRE.monarchofascist_leaders_assigned_fm = mfcnterag } 
    set_variable = { GRE.revolutionary_leaders_assigned_fm = recnterag } 
    add_assigned_army_or_navy = yes
    add_assigned_army_group = yes
    set_variable = { GRE.army_leaders_assigned = mcntera }
    set_variable = { GRE.army_leaders_assigned_fm = mcnterag }
    ###
    set_variable = { GRE.loyal_leaders = loyal_cnter }
    set_variable = { GRE.friendly_leaders = friendly_cnter }
    set_variable = { GRE.growing_leaders = growing_cnter }
    set_variable = { GRE.adequate_leaders = adequate_cnter }
    set_variable = { GRE.inconsequential_leaders = inconsequential_cnter }
    set_variable = { GRE.unfavorable_leaders = unfavorable_cnter }
    set_variable = { GRE.worsening_leaders = worsening_cnter }
    set_variable = { GRE.horrible_leaders = horrible_cnter }
    set_variable = { GRE.rebellious_leaders = rebellious_cnter }
    divide_temp_variable = { overall_cnter = GRE.army_leaders }
    set_variable = { GRE.overall_friendliness = overall_cnter }
    ##################################################################
    ##############################[NAVY]##############################
    ##################################################################
    find_num_weight_initialize_temps = yes
    every_navy_leader = {
        ###[Overall Beliefs]### 
        if = { limit = { has_trait = trait_GRE_stauch_monarchist_persona } add_to_temp_variable = { mcnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { mcntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_republican_persona } add_to_temp_variable = { rcnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { rcntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { rcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { rcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { rcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_communist_persona } add_to_temp_variable = { ccnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { ccntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { ccnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { ccnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { ccnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_stauch_fascist_persona } add_to_temp_variable = { fcnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { fcntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { fcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { fcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { fcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_conventional_leanings } add_to_temp_variable = { cocnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { cocntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { cocnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { cocnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { cocnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_socialdemocratic_leanings } add_to_temp_variable = { sdcnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { sdcntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { sdcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { sdcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { sdcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_monarchofascism_leanings } add_to_temp_variable = { mfcnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { mfcntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { mfcnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { mfcnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { mfcnterv4 = 1 } } }
        else_if = { limit = { has_trait = trait_GRE_revolutionary_leanings } add_to_temp_variable = { recnter = 1 } if = { limit = { is_assigned = yes } add_to_temp_variable = { recntera = 1 } } if = { limit = { has_trait = gre_war_veteran } add_to_temp_variable = { recnterv2 = 1 } } else_if = { limit = { has_trait = gre_two_war_veteran } add_to_temp_variable = { recnterv3 = 1 } } else_if = { limit = { has_trait = gre_three_war_veteran } add_to_temp_variable = { recnterv4 = 1 } } }
        ###[Friendliness]###
        ##[+4 to -4, depending on level Loyal->Friendly. If character has 2 beliefs, then the highest is taken into consideration]##
        if = { limit = { set_temp_variable = { tmpZ = 0.8 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { loyal_cnter = 1 } add_to_temp_variable = { overall_cnter = 4 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.7 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { friendly_cnter = 1 } add_to_temp_variable = { overall_cnter = 3 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.6 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { growing_cnter = 1 } add_to_temp_variable = { overall_cnter = 2 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.5 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { adequate_cnter = 1 } add_to_temp_variable = { overall_cnter = 1 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.4 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { inconsequential_cnter = 1 } add_to_temp_variable = { overall_cnter = 0 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.3 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { unfavorable_cnter = 1 } add_to_temp_variable = { overall_cnter = -1 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.2 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { worsening_cnter = 1 } add_to_temp_variable = { overall_cnter = -2 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.1 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { horrible_cnter = 1 } add_to_temp_variable = { overall_cnter = -3 } }
        else_if = { limit = { set_temp_variable = { tmpZ = 0.0 } is_ideologically_close_tmpZ = yes } add_to_temp_variable = { rebellious_cnter = 1 } add_to_temp_variable = { overall_cnter = -4 } }  
    }
    ###[Navy Leaders]###
    set_variable = { GRE.monarchist_leaders_n = mcnter }
    set_variable = { GRE.republican_leaders_n = rcnter }
    set_variable = { GRE.communist_leaders_n = ccnter }
    set_variable = { GRE.fascist_leaders_n = fcnter }
    set_variable = { GRE.conventional_leaders_n = cocnter }
    set_variable = { GRE.socialdemocratic_leaders_n = sdcnter }
    set_variable = { GRE.monarchofascist_leaders_n = mfcnter }
    set_variable = { GRE.revolutionary_leaders_n = recnter }
    ##[Assigned]##
    set_variable = { GRE.monarchist_leaders_n_assigned = mcntera }
    set_variable = { GRE.republican_leaders_n_assigned = rcntera }
    set_variable = { GRE.communist_leaders_n_assigned = ccntera }
    set_variable = { GRE.fascist_leaders_n_assigned = fcntera }
    set_variable = { GRE.conventional_leaders_n_assigned = cocntera }
    set_variable = { GRE.socialdemocratic_leaders_n_assigned = sdcntera }
    set_variable = { GRE.monarchofascist_leaders_n_assigned = mfcntera }
    set_variable = { GRE.revolutionary_leaders_n_assigned = recntera }
    add_assigned_army_or_navy = yes
    set_variable = { GRE.navy_leaders_assigned = mcntera }
    ###
    add_to_variable = { GRE.loyal_leaders = loyal_cnter }
    add_to_variable = { GRE.friendly_leaders = friendly_cnter }
    add_to_variable = { GRE.growing_leaders = growing_cnter }
    add_to_variable = { GRE.adequate_leaders = adequate_cnter }
    add_to_variable = { GRE.inconsequential_leaders = inconsequential_cnter }
    add_to_variable = { GRE.unfavorable_leaders = unfavorable_cnter }
    add_to_variable = { GRE.worsening_leaders = worsening_cnter }
    add_to_variable = { GRE.horrible_leaders = horrible_cnter }
    add_to_variable = { GRE.rebellious_leaders = rebellious_cnter }
    divide_temp_variable = { overall_cnter = GRE.navy_leaders }
    add_to_variable = { GRE.overall_friendliness = overall_cnter }
}



increase_indXYZQ_weighted = {
    if = { limit = { NOT = { check_variable = { indATK = 0 } } }
        if = { limit = { check_variable = { tmpATK = 0 } } set_temp_variable = { tmpATK = 1 } }
        if = { limit = { check_variable = { THIS.attack_level < 2 } } set_temp_variable = { base_chance = 100 } }
        else_if = { limit = { check_variable = { THIS.attack_level < 3 } } set_temp_variable = { base_chance = 80 } }
        else_if = { limit = { check_variable = { THIS.attack_level < 4 } } set_temp_variable = { base_chance = 50 } }
        else_if = { limit = { check_variable = { THIS.attack_level < 5 } } set_temp_variable = { base_chance = 20 } }
        else_if = { limit = { check_variable = { THIS.attack_level < 6 } } set_temp_variable = { base_chance = 10 } }
        else_if = { limit = { check_variable = { THIS.attack_level > 5 } } set_temp_variable = { base_chance = 5  } }
        ###[Veterancy]###
        if = { limit = {has_trait = gre_three_war_veteran} multiply_temp_variable = { base_chance = 1.3 } }
        else_if = { limit = {has_trait = gre_two_war_veteran} multiply_temp_variable = { base_chance = 1.2 } }
        else_if = { limit = {has_trait = gre_war_veteran} multiply_temp_variable = { base_chance = 1.1 } }
        round_temp_variable = base_chance
        clamp_temp_variable = {var=base_chance min=0 max=100}
        set_temp_variable = { cntr_chance = 100 }
        subtract_from_temp_variable = { cntr_chance = base_chance }
        random_list = {
            log = yes
            seed = random
            var:base_chance = { add_attack = tmpATK add_to_variable = { times_trained_in_attack = tmpATK } }
            var:cntr_chance = { }
        }
    }
    if = { limit = { NOT = { check_variable = { indDEF = 0 } } }
        if = { limit = { check_variable = { tmpDEF = 0 } } set_temp_variable = { tmpDEF = 1 } }
        if = { limit = { check_variable = { THIS.defense_level < 2 } } set_temp_variable = { base_chance = 100 } }
        else_if = { limit = { check_variable = { THIS.defense_level < 3 } } set_temp_variable = { base_chance = 80 } }
        else_if = { limit = { check_variable = { THIS.defense_level < 4 } } set_temp_variable = { base_chance = 50 } }
        else_if = { limit = { check_variable = { THIS.defense_level < 5 } } set_temp_variable = { base_chance = 20 } }
        else_if = { limit = { check_variable = { THIS.defense_level < 6 } } set_temp_variable = { base_chance = 10 } }
        else_if = { limit = { check_variable = { THIS.defense_level > 5 } } set_temp_variable = { base_chance = 5  } }
        ###[Veterancy]###
        if = { limit = {has_trait = gre_three_war_veteran} multiply_temp_variable = { base_chance = 1.3 } }
        else_if = { limit = {has_trait = gre_two_war_veteran} multiply_temp_variable = { base_chance = 1.2 } }
        else_if = { limit = {has_trait = gre_war_veteran} multiply_temp_variable = { base_chance = 1.1 } }
        round_temp_variable = base_chance
        clamp_temp_variable = {var=base_chance min=0 max=100}
        set_temp_variable = { cntr_chance = 100 }
        subtract_from_temp_variable = { cntr_chance = base_chance }
        random_list = {
            log = yes
            seed = random
            var:base_chance = { add_defense = tmpDEF add_to_variable = { times_trained_in_defense = tmpDEF } }
            var:cntr_chance = { }
        }
    }
    if = { limit = { NOT = { check_variable = { indPLA = 0 } } }
        if = { limit = { check_variable = { tmpPLA = 0 } } set_temp_variable = { tmpPLA = 1 } }
        if = { limit = { check_variable = { THIS.planning_level < 2 } } set_temp_variable = { base_chance = 100 } }
        else_if = { limit = { check_variable = { THIS.planning_level < 3 } } set_temp_variable = { base_chance = 80 } }
        else_if = { limit = { check_variable = { THIS.planning_level < 4 } } set_temp_variable = { base_chance = 50 } }
        else_if = { limit = { check_variable = { THIS.planning_level < 5 } } set_temp_variable = { base_chance = 20 } }
        else_if = { limit = { check_variable = { THIS.planning_level < 6 } } set_temp_variable = { base_chance = 10 } }
        else_if = { limit = { check_variable = { THIS.planning_level > 5 } } set_temp_variable = { base_chance = 5  } }
        ###[Veterancy]###
        if = { limit = {has_trait = gre_three_war_veteran} multiply_temp_variable = { base_chance = 1.3 } }
        else_if = { limit = {has_trait = gre_two_war_veteran} multiply_temp_variable = { base_chance = 1.2 } }
        else_if = { limit = {has_trait = gre_war_veteran} multiply_temp_variable = { base_chance = 1.1 } }
        round_temp_variable = base_chance
        clamp_temp_variable = {var=base_chance min=0 max=100}
        set_temp_variable = { cntr_chance = 100 }
        subtract_from_temp_variable = { cntr_chance = base_chance }
        random_list = {
            log = yes
            seed = random
            var:base_chance = { add_planning = tmpPLA add_to_variable = { times_trained_in_planning = tmpPLA } }
            var:cntr_chance = { }
        }
    }
    if = { limit = { NOT = { check_variable = { indLOG = 0 } } }
        if = { limit = { check_variable = { tmpLOG = 0 } } set_temp_variable = { tmpLOG = 1 } }
        if = { limit = { check_variable = { THIS.logistics_level < 2 } } set_temp_variable = { base_chance = 100 } }
        else_if = { limit = { check_variable = { THIS.logistics_level < 3 } } set_temp_variable = { base_chance = 80 } }
        else_if = { limit = { check_variable = { THIS.logistics_level < 4 } } set_temp_variable = { base_chance = 50 } }
        else_if = { limit = { check_variable = { THIS.logistics_level < 5 } } set_temp_variable = { base_chance = 20 } }
        else_if = { limit = { check_variable = { THIS.logistics_level < 6 } } set_temp_variable = { base_chance = 10 } }
        else_if = { limit = { check_variable = { THIS.logistics_level > 5 } } set_temp_variable = { base_chance = 5  } }
        ###[Veterancy]###
        if = { limit = {has_trait = gre_three_war_veteran} multiply_temp_variable = { base_chance = 1.3 } }
        else_if = { limit = {has_trait = gre_two_war_veteran} multiply_temp_variable = { base_chance = 1.2 } }
        else_if = { limit = {has_trait = gre_war_veteran} multiply_temp_variable = { base_chance = 1.1 } }
        round_temp_variable = base_chance
        clamp_temp_variable = {var=base_chance min=0 max=100}
        set_temp_variable = { cntr_chance = 100 }
        subtract_from_temp_variable = { cntr_chance = base_chance }
        random_list = {
            log = yes
            seed = random
            var:base_chance = { add_logistics = tmpLOG add_to_variable = { times_trained_in_logistics = tmpLOG } }
            var:cntr_chance = { }
        }
    }
}


adversities_pop_chance = {
    set_magnitude_based_on_preparedness_level = yes
    set_temp_variable = { critical_chance = 2 }
    multiply_temp_variable = { critical_chance = magnitude }
    set_temp_variable = { fate = random }
    multiply_temp_variable = { fate = 100 }
    set_variable = {GRE.fate=fate}
    if = {
        limit = { check_variable = { fate < critical_chance } }
        add_temporary_buff_to_units = {
            combat_offense = -0.1
            combat_defense = -0.1
            combat_breakthrough = -0.1
            org_damage_multiplier = 0.5
            str_damage_multiplier = 0.25
            cannot_retreat_while_attacking = 1.0
            cannot_retreat_while_defending = 1.0
            days = 7
        }
        add_timed_unit_leader_trait = {
                trait = gre_combat_adversities
                days = 7
        }
        unit_leader_event = { id = hellas.239 }
    }
}

calculate_chances_of_death_and_surrender_win = {
    if = {
        limit = { has_unpreparedness_level = yes }
        set_magnitude_based_on_preparedness_level = yes
        set_surrender_chance = yes
        set_temp_variable = { critical_chance = 1 }
        set_temp_variable = { critical_surrender_chance = 2 }
        multiply_temp_variable = { critical_chance = magnitude }
        multiply_temp_variable = { critical_surrender_chance = surrender_chance }
        set_temp_variable = { fate = random }
        multiply_temp_variable = { fate = 100 }
        if = {
            limit = { check_variable = { fate < critical_chance } }
            random_list = {
                seed = random
                50 = {
                    modifier = { factor = 1 has_trait = gre_critically_wounded }
                    unit_leader_event = { id = hellas.236 }
                }
                50 = {
                    modifier = { factor = 0 has_trait = gre_critically_wounded }
                    modifier = { factor = 1.2 has_trait = gre_war_veteran }
                    modifier = { factor = 1.4 has_trait = gre_two_war_veteran }
                    modifier = { factor = 1.6 has_trait = gre_three_war_veteran }
                    unit_leader_event = { id = hellas.237 }
                }
            }
        }
        if = {
            limit = { check_variable = { fate < critical_surrender_chance } }
            unit_leader_event = { id = hellas.238 }
        }
    }
}

calculate_chances_of_death_and_surrender_lose = {
    if = {
        limit = {
            has_unpreparedness_level = yes
        }
        set_magnitude_based_on_preparedness_level = yes
        set_surrender_chance = yes
        set_temp_variable = { critical_chance = 3 }
        set_temp_variable = { critical_surrender_chance = 5 }
        multiply_temp_variable = { critical_chance = magnitude }
        multiply_temp_variable = { critical_surrender_chance = surrender_chance }
        set_temp_variable = { fate = random }
        multiply_temp_variable = { fate = 100 }
        if = {
            limit = { check_variable = { fate < critical_chance } }
            random_list = {
                seed = random
                50 = {
                    modifier = { factor = 1 has_trait = gre_critically_wounded }
                    unit_leader_event = { id = hellas.236 }
                }
                50 = {
                    modifier = { factor = 0 has_trait = gre_critically_wounded }
                    modifier = { factor = 1.2 has_trait = gre_war_veteran }
                    modifier = { factor = 1.4 has_trait = gre_two_war_veteran }
                    modifier = { factor = 1.6 has_trait = gre_three_war_veteran }
                    unit_leader_event = { id = hellas.237 }
                }
            }
        }
        if = {
            limit = { check_variable = { fate < critical_surrender_chance } }
            unit_leader_event = { id = hellas.238 }
        }
    }
}

set_surrender_chance = {
    if = {
        set_temp_variable = { tmpZ = 80 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 70 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.05 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 60 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.1 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 50 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.2 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 40 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.4 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 30 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.6 }
    }
    else_if = {
        set_temp_variable = { tmpZ = 20 }
        limit = { is_ideologically_close_tmpZ = yes }
        set_temp_variable = { surrender_chance = 0.8 }
    }
    else = {
        set_temp_variable = { surrender_chance = 1 }
    }
    ######################################################
    multiply_temp_variable = { surrender_chance = magnitude }
}

set_magnitude_based_on_preparedness_level = {
    if = {
        limit = { has_trait = gre_unprepared_general_3 }
        set_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { has_trait = gre_unprepared_general_2 }
        set_temp_variable = { magnitude = 3 }
    }
    else_if = {
        limit = { has_trait = gre_unprepared_general_1 }
        set_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { has_trait = gre_unprepared_general_0 }
        set_temp_variable = { magnitude = 1 }
    }
    #######################################################
    if = {
        limit = { has_trait = gre_three_war_veteran }
        set_temp_variable = { magnitude_mult = 0.25 }
    }
    else_if = {
        limit = { has_trait = gre_two_war_veteran }
        set_temp_variable = { magnitude_mult = 0.5 }
    }
    else_if = {
        limit = { has_trait = gre_war_veteran }
        set_temp_variable = { magnitude_mult = 0.75 }
    }
    else = {
        set_temp_variable = { magnitude_mult = 1.5}
    }
    #######################################################
    multiply_temp_variable = { magnitude = magnitude_mult }
}

unit_leader_preparation_stats_fade = {
    hidden_effect = {
        if = { 
            limit = { check_variable = { GRE.leader_potency_drop_level < 2 } }
            every_army_leader = {
                if = { limit = { check_variable = { times_trained_in_attack > 2 } }
                    if = { limit = { check_variable = { times_trained_in_attack = 3 } } add_attack = -1 subtract_from_variable = { times_trained_in_attack = 1 } }
                    else_if = { limit = { check_variable = { times_trained_in_attack > 3 } check_variable = { times_trained_in_attack < 10 } } add_attack = -2 subtract_from_variable = { times_trained_in_attack = 2 } }
                    else_if = { limit = { check_variable = { times_trained_in_attack > 9 } } add_attack = -3 subtract_from_variable = { times_trained_in_attack = 3 } }
                }
                if = { limit = { check_variable = { times_trained_in_defense > 2 } }
                    if = { limit = { check_variable = { times_trained_in_defense = 3 } } add_defense = -1 subtract_from_variable = { times_trained_in_defense = 1 } }
                    else_if = { limit = { check_variable = { times_trained_in_defense > 3 } check_variable = { times_trained_in_defense < 10 } } add_defense = -2 subtract_from_variable = { times_trained_in_defense = 2 } }
                    else_if = { limit = { check_variable = { times_trained_in_defense > 9 } } add_defense = -3 subtract_from_variable = { times_trained_in_defense = 3 } }
                }
                if = { limit = { check_variable = { times_trained_in_planning > 2 } }
                    if = { limit = { check_variable = { times_trained_in_planning = 3 } } add_planning = -1 subtract_from_variable = { times_trained_in_planning = 1 } }
                    else_if = { limit = { check_variable = { times_trained_in_planning > 3 } check_variable = { times_trained_in_planning < 10 } } add_planning = -2 subtract_from_variable = { times_trained_in_planning = 2 } }
                    else_if = { limit = { check_variable = { times_trained_in_planning > 9 } } add_planning = -3 subtract_from_variable = { times_trained_in_planning = 3 } }
                }
                if = { limit = { check_variable = { times_trained_in_logistics > 2 } }
                    if = { limit = { check_variable = { times_trained_in_logistics = 3 } } add_logistics = -1 subtract_from_variable = { times_trained_in_logistics = 1 } }
                    else_if = { limit = { check_variable = { times_trained_in_logistics > 3 } check_variable = { times_trained_in_logistics < 10 } } add_logistics = -2 subtract_from_variable = { times_trained_in_logistics = 2 } }
                    else_if = { limit = { check_variable = { times_trained_in_logistics > 9 } } add_logistics = -3 subtract_from_variable = { times_trained_in_logistics = 3 } }
                }
            }
        }
    } # Total remaining after 2 reductions (for 2,3,4,5,6,7,8,9,10): 2 | 2 | 2 | 2 | 3 | 4 | 5 | 5
}

level_up_army_chief_of_staff = {
    if = {
        limit = { has_trait = greek_chief_of_staff_papagos_1 }
        remove_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_1
        }
        add_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_2
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_papagos_2 }
        remove_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_2
        }
        add_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_3
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_papagos_3 }
        remove_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_3
        }
        add_trait = {
            character = GRE_alexandros_papagos
            slot = army_chief
            trait = greek_chief_of_staff_papagos_4
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_drakos_1 }
        remove_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_1
        }
        add_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_2
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_drakos_2 }
        remove_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_2
        }
        add_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_3
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_drakos_3 }
        remove_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_3
        }
        add_trait = {
            character = GRE_markos_drakos
            slot = army_chief
            trait = greek_chief_of_staff_drakos_4
        }
    }
    if = {
        limit = { has_trait = greek_chief_of_staff_stanotas_1 }
        remove_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_1
        }
        add_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_2
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_stanotas_2 }
        remove_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_2
        }
        add_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_3
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_stanotas_3 }
        remove_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_3
        }
        add_trait = {
            character = GRE_georgios_stanotas
            slot = army_chief
            trait = greek_chief_of_staff_stanotas_4
        }
    }
    if = {
        limit = { has_trait = greek_chief_of_staff_zervas_1 }
        remove_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_1
        }
        add_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_2
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_zervas_2 }
        remove_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_2
        }
        add_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_3
        }
    }
    else_if = {
        limit = { has_trait = greek_chief_of_staff_zervas_3 }
        remove_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_3
        }
        add_trait = {
            character = GRE_napoleon_zervas
            slot = army_chief
            trait = greek_chief_of_staff_zervas_4
        }
    }
}

level_up_navy_chief_of_staff = {
    if = {
        limit = { has_trait = greek_navy_chief_sakellariou_1 }
        remove_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_1
        }
        add_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_2
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_sakellariou_2 }
        remove_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_2
        }
        add_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_3
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_sakellariou_3 }
        remove_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_3
        }
        add_trait = {
            character = GRE_alexandros_sakellariou
            slot = navy_chief
            trait = greek_navy_chief_sakellariou_4
        }
    }
    if = {
        limit = { has_trait = greek_navy_chief_demestichas_1 }
        remove_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_1
        }
        add_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_2
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_demestichas_2 }
        remove_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_2
        }
        add_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_3
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_demestichas_3 }
        remove_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_3
        }
        add_trait = {
            character = GRE_ioannis_demestichas
            slot = navy_chief
            trait = greek_navy_chief_demestichas_4
        }
    }
    if = {
        limit = { has_trait = greek_navy_chief_kavvadias_1 }
        remove_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_1
        }
        add_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_2
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_kavvadias_2 }
        remove_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_2
        }
        add_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_3
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_kavvadias_3 }
        remove_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_3
        }
        add_trait = {
            character = GRE_epameinondas_kavvadias
            slot = navy_chief
            trait = greek_navy_chief_kavvadias_4
        }
    }
    if = {
        limit = { has_trait = greek_navy_chief_oikonomou_1 }
        remove_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_1
        }
        add_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_2
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_oikonomou_2 }
        remove_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_2
        }
        add_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_3
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_oikonomou_3 }
        remove_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_3
        }
        add_trait = {
            character = GRE_dimitrios_oikonomou
            slot = navy_chief
            trait = greek_navy_chief_oikonomou_4
        }
    }
    if = {
        limit = { has_trait = greek_navy_chief_voulgaris_1 }
        remove_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_1
        }
        add_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_2
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_voulgaris_2 }
        remove_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_2
        }
        add_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_3
        }
    }
    else_if = {
        limit = { has_trait = greek_navy_chief_voulgaris_3 }
        remove_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_3
        }
        add_trait = {
            character = GRE_petros_voulgaris
            slot = navy_chief
            trait = greek_navy_chief_voulgaris_4
        }
    }
}

#is_character = GRE_alexandros_papagos
#is_character = GRE_markos_drakos
#is_character = GRE_georgios_stanotas
#is_character = GRE_napoleon_zervas
#is_character = GRE_nikolaos_plastiras
#is_character = GRE_charalambos_katsimitros
#is_character = GRE_georgios_kosmas
#is_character = GRE_ioannis_sotiris_alexakis
#is_character = GRE_konstantinos_davakis
#is_character = GRE_odysseas_aggelis
#is_character = GRE_aris_velouchiotis
#is_character = GRE_evripidis_bakirtzis
#is_character = GRE_alexandros_rossios

promote_officer = {
    level_up_army_chief_of_staff = yes
    level_up_navy_chief_of_staff = yes
    ###[Army]###
    if = { 
        limit = { is_character = GRE_alexandros_papagos }
        add_to_variable = { GRE.hc_papagos_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_papagos_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = {
            limit = { check_variable = { GRE.hc_papagos_rank = 1 } } 
            add_to_variable = { GRE.hc_papagos_mp = 0.03 }
            add_to_variable = { GRE.hc_papagos_mcp = 10 }
            add_to_variable = { GRE.hc_papagos_dcp = 0.05 }
            add_to_variable = { GRE.hc_papagos_ca = 0.05 }
            add_to_variable = { GRE.hc_papagos_cd = 0.05 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_papagos_rank = 2 } } 
            add_to_variable = { GRE.hc_papagos_mp = 0.05 }
            add_to_variable = { GRE.hc_papagos_mcp = 15 }
            add_to_variable = { GRE.hc_papagos_dcp = 0.10 }
            add_to_variable = { GRE.hc_papagos_ca = 0.05 }
            add_to_variable = { GRE.hc_papagos_cd = 0.05 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_papagos_rank = 3 } } 
            add_to_variable = { GRE.hc_papagos_mp = 0.10 }
            add_to_variable = { GRE.hc_papagos_mcp = 20 }
            add_to_variable = { GRE.hc_papagos_dcp = 0.2 }
            add_to_variable = { GRE.hc_papagos_ca = 0.10 }
            add_to_variable = { GRE.hc_papagos_cd = 0.10 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_markos_drakos } 
        add_to_variable = { GRE.hc_drakos_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_drakos_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_drakos_rank = 1 } } 
            add_to_variable = { GRE.hc_drakos_amf = 0.03 }
            add_to_variable = { GRE.hc_drakos_acc = 0.03 }
            add_to_variable = { GRE.hc_drakos_waf = -0.02 }
            add_to_variable = { GRE.hc_drakos_exp = 0.02 }
            add_to_variable = { GRE.hc_drakos_nsg = 4 }
            add_to_variable = { GRE.hc_drakos_osfp = -0.02 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_drakos_rank = 2 } } 
            add_to_variable = { GRE.hc_drakos_amf = 0.03 }
            add_to_variable = { GRE.hc_drakos_acc = 0.02 }
            add_to_variable = { GRE.hc_drakos_waf = -0.02 }
            add_to_variable = { GRE.hc_drakos_exp = 0.02 }
            add_to_variable = { GRE.hc_drakos_nsg = 4 }
            add_to_variable = { GRE.hc_drakos_osfp = -0.02 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_drakos_rank = 3 } } 
            add_to_variable = { GRE.hc_drakos_amf = 0.03 }
            add_to_variable = { GRE.hc_drakos_acc = 0.02 }
            add_to_variable = { GRE.hc_drakos_waf = -0.02 }
            add_to_variable = { GRE.hc_drakos_exp = 0.02 }
            add_to_variable = { GRE.hc_drakos_nsg = 4 }
            add_to_variable = { GRE.hc_drakos_osfp = -0.04 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_georgios_stanotas } 
        add_to_variable = { GRE.hc_stanotas_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_stanotas_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_stanotas_rank = 1 } } 
            add_to_variable = { GRE.hc_stanotas_rec = 0.03 }
            add_to_variable = { GRE.hc_stanotas_natt = 0.02 }
            add_to_variable = { GRE.hc_stanotas_bthr = 0.02 }
            add_to_variable = { GRE.hc_stanotas_ca = 0.03 }
            add_to_variable = { GRE.hc_stanotas_cd = 0.03 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_stanotas_rank = 2 } } 
            add_to_variable = { GRE.hc_stanotas_rec = 0.03 }
            add_to_variable = { GRE.hc_stanotas_natt = 0.03 }
            add_to_variable = { GRE.hc_stanotas_bthr = 0.02 }
            add_to_variable = { GRE.hc_stanotas_ca = 0.04 }
            add_to_variable = { GRE.hc_stanotas_cd = 0.04 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_stanotas_rank = 3 } } 
            add_to_variable = { GRE.hc_stanotas_rec = 0.05 }
            add_to_variable = { GRE.hc_stanotas_natt = 0.03 }
            add_to_variable = { GRE.hc_stanotas_bthr = 0.03 }
            add_to_variable = { GRE.hc_stanotas_ca = 0.05 }
            add_to_variable = { GRE.hc_stanotas_cd = 0.05 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_napoleon_zervas } 
        add_to_variable = { GRE.hc_zervas_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_zervas_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_zervas_rank = 1 } } 
            add_to_variable = { GRE.hc_zervas_asp = 0.03 }
            add_to_variable = { GRE.hc_zervas_mcp = 10 }
            add_to_variable = { GRE.hc_zervas_dcp = 0.05 }
            add_to_variable = { GRE.hc_zervas_lrr = 0.01 }
            add_to_variable = { GRE.hc_zervas_olwm = -0.01 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_zervas_rank = 2 } } 
            add_to_variable = { GRE.hc_zervas_asp = 0.03 }
            add_to_variable = { GRE.hc_zervas_mcp = 15 }
            add_to_variable = { GRE.hc_zervas_dcp = 0.10 }
            add_to_variable = { GRE.hc_zervas_olwm = -0.01 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_zervas_rank = 3 } } 
            add_to_variable = { GRE.hc_zervas_asp = 0.03 }
            add_to_variable = { GRE.hc_zervas_mcp = 20 }
            add_to_variable = { GRE.hc_zervas_dcp = 0.20 }
            add_to_variable = { GRE.hc_zervas_lrr = 0.01 }
            add_to_variable = { GRE.hc_zervas_olwm = -0.01 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_nikolaos_plastiras } 
        add_to_variable = { GRE.hc_plastiras_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_plastiras_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_plastiras_rank = 1 } } 
            add_to_variable = { GRE.hc_plastiras_ca = 0.06 }
            add_to_variable = { GRE.hc_plastiras_cd = 0.04 }
            add_to_variable = { GRE.hc_plastiras_asp = 0.03 }
            add_to_variable = { GRE.hc_plastiras_bthr = 0.02 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_plastiras_rank = 2 } } 
            add_to_variable = { GRE.hc_plastiras_ca = 0.06 }
            add_to_variable = { GRE.hc_plastiras_cd = 0.04 }
            add_to_variable = { GRE.hc_plastiras_asp = 0.03 }
            add_to_variable = { GRE.hc_plastiras_bthr = 0.02 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_plastiras_rank = 3 } } 
            add_to_variable = { GRE.hc_plastiras_ca = 0.12 }
            add_to_variable = { GRE.hc_plastiras_cd = 0.08 }
            add_to_variable = { GRE.hc_plastiras_asp = 0.03 }
            add_to_variable = { GRE.hc_plastiras_bthr = 0.03 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_charalambos_katsimitros } 
        add_to_variable = { GRE.hc_katsimitros_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_katsimitros_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_katsimitros_rank = 1 } } 
            add_to_variable = { GRE.hc_katsimitros_mentr = 0.04 }
            add_to_variable = { GRE.hc_katsimitros_sentr = 0.08 }
            add_to_variable = { GRE.hc_katsimitros_rentr = 0.06 }
            add_to_variable = { GRE.hc_katsimitros_waf = -0.04 }
            add_to_variable = { GRE.hc_katsimitros_nsg = 6 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_katsimitros_rank = 2 } } 
            add_to_variable = { GRE.hc_katsimitros_mentr = 0.04 }
            add_to_variable = { GRE.hc_katsimitros_sentr = 0.08 }
            add_to_variable = { GRE.hc_katsimitros_rentr = 0.06 }
            add_to_variable = { GRE.hc_katsimitros_waf = -0.06 }
            add_to_variable = { GRE.hc_katsimitros_nsg = 6 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_katsimitros_rank = 3 } } 
            add_to_variable = { GRE.hc_katsimitros_mentr = 0.03 }
            add_to_variable = { GRE.hc_katsimitros_sentr = 0.06 }
            add_to_variable = { GRE.hc_katsimitros_rentr = 0.07 }
            add_to_variable = { GRE.hc_katsimitros_waf = -0.06 }
            add_to_variable = { GRE.hc_katsimitros_nsg = 6 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_georgios_kosmas } 
        add_to_variable = { GRE.hc_kosmas_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_kosmas_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_kosmas_rank = 1 } } 
            add_to_variable = { GRE.hc_kosmas_infa = 0.04 }
            add_to_variable = { GRE.hc_kosmas_infd = 0.04 }
            add_to_variable = { GRE.hc_kosmas_infexpt = 0.1 }
            add_to_variable = { GRE.hc_kosmas_infexpc = 0.04 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_kosmas_rank = 2 } } 
            add_to_variable = { GRE.hc_kosmas_infa = 0.04 }
            add_to_variable = { GRE.hc_kosmas_infd = 0.04 }
            add_to_variable = { GRE.hc_kosmas_infexpt = 0.1 }
            add_to_variable = { GRE.hc_kosmas_infexpc = 0.05 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_kosmas_rank = 3 } } 
            add_to_variable = { GRE.hc_kosmas_infa = 0.03 }
            add_to_variable = { GRE.hc_kosmas_infd = 0.03 }
            add_to_variable = { GRE.hc_kosmas_infexpt = 0.1 }
            add_to_variable = { GRE.hc_kosmas_infexpc = 0.05 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_odysseas_aggelis } 
        add_to_variable = { GRE.hc_aggelis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_aggelis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_aggelis_rank = 1 } } 
            add_to_variable = { GRE.hc_aggelis_arta = 0.04 }
            add_to_variable = { GRE.hc_aggelis_artd = 0.04 }
            add_to_variable = { GRE.hc_aggelis_artexpt = 0.1 }
            add_to_variable = { GRE.hc_aggelis_artexpc = 0.04 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_aggelis_rank = 2 } } 
            add_to_variable = { GRE.hc_aggelis_arta = 0.04 }
            add_to_variable = { GRE.hc_aggelis_artd = 0.04 }
            add_to_variable = { GRE.hc_aggelis_artexpt = 0.1 }
            add_to_variable = { GRE.hc_aggelis_artexpc = 0.05 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_aggelis_rank = 3 } } 
            add_to_variable = { GRE.hc_aggelis_arta = 0.03 }
            add_to_variable = { GRE.hc_aggelis_artd = 0.03 }
            add_to_variable = { GRE.hc_aggelis_artexpt = 0.1 }
            add_to_variable = { GRE.hc_aggelis_artexpc = 0.05 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_konstantinos_davakis } 
        add_to_variable = { GRE.hc_davakis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_davakis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = {
            limit = { check_variable = { GRE.hc_davakis_rank = 1 } } 
            add_to_variable = { GRE.hc_davakis_off = 0.01 }
            add_to_variable = { GRE.hc_davakis_def = 0.01 }
            add_to_variable = { GRE.hc_davakis_bthr = 0.02 }
            add_to_variable = { GRE.hc_davakis_aspd = 0.02 }
            add_to_variable = { GRE.hc_davakis_specc = 0.04 }
            add_to_variable = { GRE.hc_davakis_asbc = 0.02 }
            add_to_variable = { GRE.hc_davakis_acpf = 0.02 }
            add_to_variable = { GRE.hc_davakis_sbb = 0.06 }
        }
        else_if = {
            limit = { check_variable = { GRE.hc_davakis_rank = 2 } } 
            add_to_variable = { GRE.hc_davakis_off = 0.01 }
            add_to_variable = { GRE.hc_davakis_def = 0.01 }
            add_to_variable = { GRE.hc_davakis_bthr = 0.06 }
            add_to_variable = { GRE.hc_davakis_aspd = 0.06 }
            add_to_variable = { GRE.hc_davakis_specc = 0.04 }
            add_to_variable = { GRE.hc_davakis_asbc = 0.04 }
            add_to_variable = { GRE.hc_davakis_acpf = 0.04 }
            add_to_variable = { GRE.hc_davakis_sbb = 0.06 }
        }
        if = {
            limit = { check_variable = { GRE.hc_davakis_rank = 3 } } 
            add_to_variable = { GRE.hc_davakis_off = 0.02 }
            add_to_variable = { GRE.hc_davakis_def = 0.02 }
            add_to_variable = { GRE.hc_davakis_bthr = 0.05 }
            add_to_variable = { GRE.hc_davakis_aspd = 0.05 }
            add_to_variable = { GRE.hc_davakis_specc = 0.08 }
            add_to_variable = { GRE.hc_davakis_asbc = 0.05 }
            add_to_variable = { GRE.hc_davakis_acpf = 0.05 }
            add_to_variable = { GRE.hc_davakis_sbb = 0.12 }
        }
    }
    else_if = { 
        limit = { is_character = GRE_ioannis_sotiris_alexakis } 
        add_to_variable = { GRE.hc_alexakis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_alexakis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = {
            limit = { check_variable = { GRE.hc_alexakis_rank = 1 } } 
            add_to_variable = { GRE.hc_alexakis_mtl = -0.1 }
            add_to_variable = { GRE.hc_alexakis_rgos = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rgf = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rdtg = -0.04 }
            add_to_variable = { GRE.hc_alexakis_cito = -12 }
            add_to_variable = { GRE.hc_alexakis_encf = 0.06 }
            add_to_variable = { GRE.hc_alexakis_eodc = 0.05 }
            add_to_variable = { GRE.hc_alexakis_rootout = 0.05 }
        }
        else_if = {
            limit = { check_variable = { GRE.hc_alexakis_rank = 2 } } 
            add_to_variable = { GRE.hc_alexakis_mtl = -0.1 }
            add_to_variable = { GRE.hc_alexakis_rgos = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rgf = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rdtg = -0.04 }
            add_to_variable = { GRE.hc_alexakis_cito = -11 }
            add_to_variable = { GRE.hc_alexakis_encf = 0.06 }
            add_to_variable = { GRE.hc_alexakis_eodc = 0.05 }
            add_to_variable = { GRE.hc_alexakis_rootout = 0.05 }
        }
        if = {
            limit = { check_variable = { GRE.hc_alexakis_rank = 3 } } 
            add_to_variable = { GRE.hc_alexakis_mtl = -0.1 }
            add_to_variable = { GRE.hc_alexakis_rgos = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rgf = -0.04 }
            add_to_variable = { GRE.hc_alexakis_rdtg = -0.04 }
            add_to_variable = { GRE.hc_alexakis_cito = -15 }
            add_to_variable = { GRE.hc_alexakis_encf = 0.07 }
            add_to_variable = { GRE.hc_alexakis_eodc = 0.05 }
            add_to_variable = { GRE.hc_alexakis_rootout = 0.05 }
        }
    }
    else_if = {
        limit = { is_character = GRE_aris_velouchiotis } 
        add_to_variable = { GRE.hc_velouchiotis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_velouchiotis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = {
            limit = { check_variable = { GRE.hc_velouchiotis_rank = 1 } } 
            add_to_variable = { GRE.hc_velouchiotis_base_casred = 0.04 }
            add_to_variable = { GRE.hc_velouchiotis_base_digs = 0.08 }
            add_to_variable = { GRE.hc_velouchiotis_base_expgain = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_attr = -0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_orgreg = 0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_recf = 0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_plansp = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_mtl = -0.1 }
        }
        else_if = {
            limit = { check_variable = { GRE.hc_velouchiotis_rank = 2 } } 
            add_to_variable = { GRE.hc_velouchiotis_base_casred = 0.04 }
            add_to_variable = { GRE.hc_velouchiotis_base_digs = 0.08 }
            add_to_variable = { GRE.hc_velouchiotis_base_expgain = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_attr = -0.04 }
            add_to_variable = { GRE.hc_velouchiotis_base_orgreg = 0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_recf = 0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_plansp = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_mtl = -0.1 }
        }
        if = {
            limit = { check_variable = { GRE.hc_velouchiotis_rank = 3 } } 
            add_to_variable = { GRE.hc_velouchiotis_base_casred = 0.04 }
            add_to_variable = { GRE.hc_velouchiotis_base_digs = 0.12 }
            add_to_variable = { GRE.hc_velouchiotis_base_expgain = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_attr = -0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_orgreg = 0.03 }
            add_to_variable = { GRE.hc_velouchiotis_base_recf = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_plansp = 0.05 }
            add_to_variable = { GRE.hc_velouchiotis_base_mtl = -0.1 }
        }
    }
    else_if = {
        limit = { is_character = GRE_evripidis_bakirtzis } 
        add_to_variable = { GRE.hc_bakirtzis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_bakirtzis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_bakirtzis_rank = 1 } } 
            add_to_variable = { GRE.hc_bakirtzis_arta = 0.04 }
            add_to_variable = { GRE.hc_bakirtzis_artd = 0.04 }
            add_to_variable = { GRE.hc_bakirtzis_maxp = 0.02 }
            add_to_variable = { GRE.hc_bakirtzis_spdp = 0.06 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_bakirtzis_rank = 2 } } 
            add_to_variable = { GRE.hc_bakirtzis_arta = 0.04 }
            add_to_variable = { GRE.hc_bakirtzis_artd = 0.04 }
            add_to_variable = { GRE.hc_bakirtzis_maxp = 0.03 }
            add_to_variable = { GRE.hc_bakirtzis_spdp = 0.05 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_bakirtzis_rank = 3 } } 
            add_to_variable = { GRE.hc_bakirtzis_arta = 0.03 }
            add_to_variable = { GRE.hc_bakirtzis_artd = 0.03 }
            add_to_variable = { GRE.hc_bakirtzis_maxp = 0.03 }
            add_to_variable = { GRE.hc_bakirtzis_spdp = 0.05 }
        }
    }
    else_if = {
        limit = { is_character = GRE_alexandros_rossios } 
        add_to_variable = { GRE.hc_rossios_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_rossios_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_rossios_rank = 1 } } 
            add_to_variable = { GRE.hc_rossios_infa = 0.03 }
            add_to_variable = { GRE.hc_rossios_infd = 0.03 }
            add_to_variable = { GRE.hc_rossios_infexpt = 0.08 }
            add_to_variable = { GRE.hc_rossios_infexpc = 0.04 }
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_rossios_rank = 2 } } 
            add_to_variable = { GRE.hc_rossios_infa = 0.03 }
            add_to_variable = { GRE.hc_rossios_infd = 0.03 }
            add_to_variable = { GRE.hc_rossios_infexpt = 0.08 }
            add_to_variable = { GRE.hc_rossios_infexpc = 0.04 }
        }
        if = { 
            limit = { check_variable = { GRE.hc_rossios_rank = 3 } } 
            add_to_variable = { GRE.hc_rossios_infa = 0.03 }
            add_to_variable = { GRE.hc_rossios_infd = 0.03 }
            add_to_variable = { GRE.hc_rossios_infexpt = 0.11 }
            add_to_variable = { GRE.hc_rossios_infexpc = 0.04 }
        }
    }
    ###[Navy]###
    else_if = {
        limit = { is_character = GRE_alexandros_sakellariou } 
        add_to_variable = { GRE.hc_sakellariou_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_sakellariou_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_sakellariou_rank = 1 } } 
            add_to_variable = { GRE.hc_sakellariou_cee = 0.03}
            add_to_variable = { GRE.hc_sakellariou_se = 0.03}
            add_to_variable = { GRE.hc_sakellariou_egc = 0.05}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_sakellariou_rank = 2 } } 
            add_to_variable = { GRE.hc_sakellariou_cee = 0.02}
            add_to_variable = { GRE.hc_sakellariou_se = 0.03}
            add_to_variable = { GRE.hc_sakellariou_egc = 0.05}
        }
        if = { 
            limit = { check_variable = { GRE.hc_sakellariou_rank = 3 } } 
            add_to_variable = { GRE.hc_sakellariou_cee = 0.03}
            add_to_variable = { GRE.hc_sakellariou_se = 0.03}
            add_to_variable = { GRE.hc_sakellariou_egc = 0.05}
        }
    }
    else_if = { 
        limit = { is_character = GRE_ioannis_demestichas } 
        add_to_variable = { GRE.hc_demestichas_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_demestichas_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_demestichas_rank = 1 } } 
            add_to_variable = { GRE.hc_demestichas_ai = 0.05}
            add_to_variable = { GRE.hc_demestichas_nips = 0.05}
            add_to_variable = { GRE.hc_demestichas_nic = 5}
            add_to_variable = { GRE.hc_demestichas_nip  = -0.05}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_demestichas_rank = 2 } } 
            add_to_variable = { GRE.hc_demestichas_ai = 0.05}
            add_to_variable = { GRE.hc_demestichas_nips = 0.05}
            add_to_variable = { GRE.hc_demestichas_nic = 10}
            add_to_variable = { GRE.hc_demestichas_nip  = -0.05}
        }
        if = { 
            limit = { check_variable = { GRE.hc_demestichas_rank = 3 } } 
            add_to_variable = { GRE.hc_demestichas_ai = 0.05}
            add_to_variable = { GRE.hc_demestichas_nips = 0.05}
            add_to_variable = { GRE.hc_demestichas_nic = 20}
            add_to_variable = { GRE.hc_demestichas_nip  = -0.05}
        }
    }
    else_if = { 
        limit = { is_character = GRE_epameinondas_kavvadias } 
        add_to_variable = { GRE.hc_kavvadias_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_kavvadias_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_kavvadias_rank = 1 } } 
            add_to_variable = { GRE.hc_kavvadias_egsf = 0.05}
            add_to_variable = { GRE.hc_kavvadias_nsaf = 0.03}
            add_to_variable = { GRE.hc_kavvadias_nsdf = 0.03}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_kavvadias_rank = 2 } } 
            add_to_variable = { GRE.hc_kavvadias_egsf = 0.05}
            add_to_variable = { GRE.hc_kavvadias_nsaf = 0.03}
            add_to_variable = { GRE.hc_kavvadias_nsdf = 0.03}
        }
        if = { 
            limit = { check_variable = { GRE.hc_kavvadias_rank = 3 } } 
            add_to_variable = { GRE.hc_kavvadias_egsf = 0.05}
            add_to_variable = { GRE.hc_kavvadias_nsaf = 0.03}
            add_to_variable = { GRE.hc_kavvadias_nsdf = 0.03}
        }
    }
    else_if = { 
        limit = { is_character = GRE_dimitrios_oikonomou } 
        add_to_variable = { GRE.hc_oikonomou_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_oikonomou_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_oikonomou_rank = 1 } } 
            add_to_variable = { GRE.hc_oikonomou_egcsf = 0.05}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_oikonomou_rank = 2 } } 
            add_to_variable = { GRE.hc_oikonomou_egcsf = 0.05}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
        }
        if = { 
            limit = { check_variable = { GRE.hc_oikonomou_rank = 3 } } 
            add_to_variable = { GRE.hc_oikonomou_egcsf = 0.05}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
            add_to_variable = { GRE.hc_oikonomou_ncsaf = 0.03}
        }
    }
    else_if = { 
        limit = { is_character = GRE_petros_voulgaris }
        add_to_variable = { GRE.hc_voulgaris_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_voulgaris_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_voulgaris_rank = 1 } } 
            add_to_variable = { GRE.hc_voulgaris_ns = 0.03}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_voulgaris_rank = 2 } } 
            add_to_variable = { GRE.hc_voulgaris_ns = 0.03}
        }
        if = { 
            limit = { check_variable = { GRE.hc_voulgaris_rank = 3 } } 
            add_to_variable = { GRE.hc_voulgaris_ns = 0.03}
        }
    }
    else_if = { 
        limit = { is_character = GRE_dimitrios_loundras } 
        add_to_variable = { GRE.hc_loundras_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_loundras_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_loundras_rank = 1 } } 
            add_to_variable = { GRE.hc_loundras_cee = 0.04}
            add_to_variable = { GRE.hc_loundras_naaaf = 0.05}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_loundras_rank = 2 } } 
            add_to_variable = { GRE.hc_loundras_cee = 0.06}
            add_to_variable = { GRE.hc_loundras_naaaf = 0.05}
        }
        if = { 
            limit = { check_variable = { GRE.hc_loundras_rank = 3 } } 
            add_to_variable = { GRE.hc_loundras_cee = 0.06}
            add_to_variable = { GRE.hc_loundras_naaaf = 0.10}
        }
    }
    else_if = { 
        limit = { is_character = GRE_ioannis_toubas } 
        add_to_variable = { GRE.hc_toubas_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_toubas_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_toubas_rank = 1 } } 
            add_to_variable = { GRE.hc_toubas_nfcf = -0.03}
            add_to_variable = { GRE.hc_toubas_na = -0.02}
            add_to_variable = { GRE.hc_toubas_nac = -0.03}
            add_to_variable = { GRE.hc_toubas_ncef = -0.05}
            add_to_variable = { GRE.hc_toubas_nrs = 0.06}
            add_to_variable = { GRE.hc_toubas_nric = -0.06}
            add_to_variable = { GRE.hc_toubas_neuxc = -0.10}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_toubas_rank = 2 } } 
            add_to_variable = { GRE.hc_toubas_nfcf = -0.03}
            add_to_variable = { GRE.hc_toubas_na = -0.02}
            add_to_variable = { GRE.hc_toubas_nac = -0.03}
            add_to_variable = { GRE.hc_toubas_ncef = -0.05}
            add_to_variable = { GRE.hc_toubas_nrs = 0.06}
            add_to_variable = { GRE.hc_toubas_nric = -0.06}
            add_to_variable = { GRE.hc_toubas_neuxc = -0.10}
        }
        if = { 
            limit = { check_variable = { GRE.hc_toubas_rank = 3 } } 
            add_to_variable = { GRE.hc_toubas_nfcf = -0.03}
            add_to_variable = { GRE.hc_toubas_na = -0.02}
            add_to_variable = { GRE.hc_toubas_nac = -0.03}
            add_to_variable = { GRE.hc_toubas_ncef = -0.05}
            add_to_variable = { GRE.hc_toubas_nrs = 0.06}
            add_to_variable = { GRE.hc_toubas_nric = -0.06}
            add_to_variable = { GRE.hc_toubas_neuxc = -0.10}
        }
    }
    else_if = { 
        limit = { is_character = GRE_spyridon_avgeris } 
        add_to_variable = { GRE.hc_avgeris_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_avgeris_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_avgeris_rank = 1 } } 
            add_to_variable = { GRE.hc_avgeris_sbb = 0.05}
            add_to_variable = { GRE.hc_avgeris_ncsaf = 0.04}
            add_to_variable = { GRE.hc_avgeris_ncsdf = 0.04}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_avgeris_rank = 2 } } 
            add_to_variable = { GRE.hc_avgeris_sbb = 0.05}
            add_to_variable = { GRE.hc_avgeris_ncsaf = 0.04}
            add_to_variable = { GRE.hc_avgeris_ncsdf = 0.04}
        }
        if = { 
            limit = { check_variable = { GRE.hc_avgeris_rank = 3 } } 
            add_to_variable = { GRE.hc_avgeris_sbb = 0.05}
            add_to_variable = { GRE.hc_avgeris_ncsaf = 0.04}
            add_to_variable = { GRE.hc_avgeris_ncsdf = 0.04}
        }
    }
    else_if = { 
        limit = { is_character = GRE_miltiadis_iatridis } 
        add_to_variable = { GRE.hc_iatridis_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_iatridis_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_iatridis_rank = 1 } } 
            add_to_variable = { GRE.hc_iatridis_nfcf = 0.05}
            add_to_variable = { GRE.hc_iatridis_nv = -0.04}
            add_to_variable = { GRE.hc_iatridis_nsaf = 0.04}
            add_to_variable = { GRE.hc_iatridis_nsdf = 0.04}
            add_to_variable = { GRE.hc_iatridis_egsf = 0.05}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_iatridis_rank = 2 } } 
            add_to_variable = { GRE.hc_iatridis_nfcf = 0.05}
            add_to_variable = { GRE.hc_iatridis_nv = -0.04}
            add_to_variable = { GRE.hc_iatridis_nsaf = 0.04}
            add_to_variable = { GRE.hc_iatridis_nsdf = 0.04}
            add_to_variable = { GRE.hc_iatridis_egsf = 0.05}
        }
        if = { 
            limit = { check_variable = { GRE.hc_iatridis_rank = 3 } } 
            add_to_variable = { GRE.hc_iatridis_nfcf = 0.05}
            add_to_variable = { GRE.hc_iatridis_nv = -0.04}
            add_to_variable = { GRE.hc_iatridis_nsaf = 0.04}
            add_to_variable = { GRE.hc_iatridis_nsdf = 0.04}
            add_to_variable = { GRE.hc_iatridis_egsf = 0.05}
        }
    }
    else_if = { 
        limit = { is_character = GRE_pyrros_spyromilios } 
        add_to_variable = { GRE.hc_spyromilios_rank = 1 }
        set_temp_variable = { gui_refresh = GRE.hc_spyromilios_rank }
        add_to_temp_variable = { gui_refresh = 1 }
        ###[#1]###
        if = { 
            limit = { check_variable = { GRE.hc_spyromilios_rank = 1 } } 
            add_to_variable = { GRE.hc_spyromilios_nif = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nidb = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nd = 0.05}
            add_to_variable = { GRE.hc_spyromilios_nefsrpf = -0.05}
            add_to_variable = { GRE.hc_spyromilios_os = 0}
        }
        else_if = { 
            limit = { check_variable = { GRE.hc_spyromilios_rank = 2 } } 
            add_to_variable = { GRE.hc_spyromilios_nif = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nidb = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nd = 0.05}
            add_to_variable = { GRE.hc_spyromilios_nefsrpf = -0.05}
            add_to_variable = { GRE.hc_spyromilios_os = 0}
        }
        if = { 
            limit = { check_variable = { GRE.hc_spyromilios_rank = 3 } } 
            add_to_variable = { GRE.hc_spyromilios_nif = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nidb = 0.1}
            add_to_variable = { GRE.hc_spyromilios_nd = 0.05}
            add_to_variable = { GRE.hc_spyromilios_nefsrpf = -0.05}
            add_to_variable = { GRE.hc_spyromilios_os = 1}
        }
    }
    refresh_coc_gui_ranks = yes
}

refresh_coc_gui_ranks = {
    ####set_variable = { GRE.hc_rank@var }
    if = { limit = { is_character = GRE_alexandros_papagos } set_variable = { GRE.hc_rank@var:GRE.hc_papagos_seat = gui_refresh } }
    if = { limit = { is_character = GRE_markos_drakos } set_variable = { GRE.hc_rank@var:GRE.hc_drakos_seat = gui_refresh } }
    if = { limit = { is_character = GRE_georgios_stanotas } set_variable = { GRE.hc_rank@var:GRE.hc_stanotas_seat = gui_refresh } }
    if = { limit = { is_character = GRE_napoleon_zervas } set_variable = { GRE.hc_rank@var:GRE.hc_zervas_seat = gui_refresh } }
    if = { limit = { is_character = GRE_nikolaos_plastiras } set_variable = { GRE.hc_rank@var:GRE.hc_plastiras_seat = gui_refresh } }
    if = { limit = { is_character = GRE_charalambos_katsimitros } set_variable = { GRE.hc_rank@var:GRE.hc_katsimitros_seat = gui_refresh } }
    if = { limit = { is_character = GRE_georgios_kosmas } set_variable = { GRE.hc_rank@var:GRE.hc_kosmas_seat = gui_refresh } }
    if = { limit = { is_character = GRE_odysseas_aggelis } set_variable = { GRE.hc_rank@var:GRE.hc_aggelis_seat = gui_refresh } }
    if = { limit = { is_character = GRE_konstantinos_davakis } set_variable = { GRE.hc_rank@var:GRE.hc_davakis_seat = gui_refresh } }
    if = { limit = { is_character = GRE_ioannis_sotiris_alexakis } set_variable = { GRE.hc_rank@var:GRE.hc_alexakis_seat = gui_refresh } }
    if = { limit = { is_character = GRE_aris_velouchiotis } set_variable = { GRE.hc_rank@var:GRE.hc_velouchiotis_seat = gui_refresh } }
    if = { limit = { is_character = GRE_evripidis_bakirtzis } set_variable = { GRE.hc_rank@var:GRE.hc_bakirtzis_seat = gui_refresh } }
    if = { limit = { is_character = GRE_alexandros_rossios } set_variable = { GRE.hc_rank@var:GRE.hc_rossios_seat = gui_refresh } }
}

### Initialized by tmpX (number), tmpY (ideologyType)

randomly_purge_tmpX_officers = {
    resize_temp_array = { purge_factory = tmpX }
    if = { 
        limit = { check_variable = { tmpY = 0 } }
        for_each_loop = {
            array = purge_factory

            random_unit_leader = {
                limit = { is_operative=no has_trait = trait_GRE_stauch_communist_persona }
                if = { limit = { is_character = GRE_aris_velouchiotis } GRE_aris_velouchiotis = { unit_leader_event = { id = hellas.16 days = 0 } } } 
                set_purged_officer_flags = yes
            }
        }
    }
    else_if = {
        limit = { check_variable = {tmpY = 1} }
        for_each_loop = {
            array = purge_factory

            random_unit_leader = {
                limit = { is_operative=no has_trait = trait_GRE_stauch_republican_persona }
                set_purged_officer_flags = yes
            }
        }
    }
    else_if = {
        limit = { check_variable = {tmpY = 2} }
        for_each_loop = {
            array = purge_factory

            random_unit_leader = {
                limit = { is_operative=no is_general_undesired = yes }
                if = { limit = { is_character = GRE_aris_velouchiotis } GRE_aris_velouchiotis = { unit_leader_event = { id = hellas.16 days = 0 } } } 
                set_purged_officer_flags = yes
            }
        }
    }
}

#GRE_alexandros_papagos
#GRE_markos_drakos
#GRE_georgios_stanotas
#GRE_napoleon_zervas
#GRE_nikolaos_plastiras
#GRE_charalambos_katsimitros
#GRE_georgios_kosmas
#GRE_odysseas_aggelis
#GRE_konstantinos_davakis
#GRE_ioannis_sotiris_alexakis
#GRE_aris_velouchiotis
#GRE_evripidis_bakirtzis
#GRE_alexandros_rossios

set_purged_officer_flags = {
    if = { limit = { is_character = GRE_alexandros_papagos } set_variable = { GRE.hc_papagos_purged = 1 } GRE_alexandros_papagos = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_markos_drakos } set_variable = { GRE.hc_drakos_purged = 1 } GRE_markos_drakos = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_georgios_stanotas } set_variable = { GRE.hc_stanotas_purged = 1 } GRE_georgios_stanotas = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_napoleon_zervas } set_variable = { GRE.hc_zervas_purged = 1 } GRE_napoleon_zervas = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_nikolaos_plastiras } set_variable = { GRE.hc_plastiras_purged = 1 } GRE_nikolaos_plastiras = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_charalambos_katsimitros } set_variable = { GRE.hc_katsimitros_purged = 1 } GRE_charalambos_katsimitros = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_georgios_kosmas } set_variable = { GRE.hc_kosmas_purged = 1 } GRE_georgios_kosmas = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_ioannis_sotiris_alexakis } set_variable = { GRE.hc_alexakis_purged = 1 } GRE_ioannis_sotiris_alexakis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_konstantinos_davakis } set_variable = { GRE.hc_davakis_purged = 1 } GRE_konstantinos_davakis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_odysseas_aggelis } set_variable = { GRE.hc_aggelis_purged = 1 } GRE_odysseas_aggelis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_aris_velouchiotis } set_variable = { GRE.hc_velouchiotis_purged = 1 } GRE_aris_velouchiotis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_evripidis_bakirtzis } set_variable = { GRE.hc_bakirtzis_purged = 1 } GRE_evripidis_bakirtzis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_alexandros_rossios } set_variable = { GRE.hc_rossios_purged = 1 } GRE_alexandros_rossios = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_alexandros_sakellariou } set_variable = { GRE.hc_sakellariou_purged = 1 } GRE_alexandros_sakellariou = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_ioannis_demestichas } set_variable = { GRE.hc_demestichas_purged = 1 } GRE_ioannis_demestichas = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_epameinondas_kavvadias } set_variable = { GRE.hc_kavvadias_purged = 1 } GRE_epameinondas_kavvadias = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_dimitrios_loundras } set_variable = { GRE.hc_loundras_purged = 1 } GRE_dimitrios_loundras = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_dimitrios_oikonomou } set_variable = { GRE.hc_oikonomou_purged = 1 } GRE_dimitrios_oikonomou = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_ioannis_toubas } set_variable = { GRE.hc_toubas_purged = 1 } GRE_ioannis_toubas = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_petros_voulgaris } set_variable = { GRE.hc_voulgaris_purged = 1 } GRE_petros_voulgaris = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_spyridon_avgeris } set_variable = { GRE.hc_avgeris_purged = 1 } GRE_spyridon_avgeris = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_miltiadis_iatridis } set_variable = { GRE.hc_iatridis_purged = 1 } GRE_miltiadis_iatridis = { set_character_flag = purged_by_regime } }
    else_if = { limit = { is_character = GRE_pyrros_spyromilios } set_variable = { GRE.hc_spyromilios_purged = 1 } GRE_pyrros_spyromilios = { set_character_flag = purged_by_regime } }
    else = { set_character_flag = purged_by_regime set_nationality = AGO }
}

set_killed_officer_flags = {
    if = { limit = { is_character = GRE_alexandros_papagos } set_variable = { GRE.hc_papagos_dead = 1 } GRE_alexandros_papagos = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_markos_drakos } set_variable = { GRE.hc_drakos_dead = 1 } GRE_markos_drakos = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_georgios_stanotas } set_variable = { GRE.hc_stanotas_dead = 1 } GRE_georgios_stanotas = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_napoleon_zervas } set_variable = { GRE.hc_zervas_dead = 1 } GRE_napoleon_zervas = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_nikolaos_plastiras } set_variable = { GRE.hc_plastiras_dead = 1 } GRE_nikolaos_plastiras = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_charalambos_katsimitros } set_variable = { GRE.hc_katsimitros_dead = 1 } GRE_charalambos_katsimitros = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_georgios_kosmas } set_variable = { GRE.hc_kosmas_dead = 1 } GRE_georgios_kosmas = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_ioannis_sotiris_alexakis } set_variable = { GRE.hc_aggelis_dead = 1 } GRE_ioannis_sotiris_alexakis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_konstantinos_davakis } set_variable = { GRE.hc_davakis_dead = 1 } GRE_konstantinos_davakis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_odysseas_aggelis } set_variable = { GRE.hc_aggelis_dead = 1 } GRE_odysseas_aggelis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_aris_velouchiotis } set_variable = { GRE.hc_velouchiotis_dead = 1 } GRE_aris_velouchiotis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_evripidis_bakirtzis } set_variable = { GRE.hc_bakirtzis_dead = 1 } GRE_evripidis_bakirtzis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_alexandros_rossios } set_variable = { GRE.hc_rossios_dead = 1 } GRE_alexandros_rossios = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_alexandros_sakellariou } set_variable = { GRE.hc_sakellariou_purged = 1 } GRE_alexandros_sakellariou = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_ioannis_demestichas } set_variable = { GRE.hc_demestichas_purged = 1 } GRE_ioannis_demestichas = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_epameinondas_kavvadias } set_variable = { GRE.hc_kavvadias_purged = 1 } GRE_epameinondas_kavvadias = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_dimitrios_loundras } set_variable = { GRE.hc_loundras_purged = 1 } GRE_dimitrios_loundras = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_dimitrios_oikonomou } set_variable = { GRE.hc_oikonomou_purged = 1 } GRE_dimitrios_oikonomou = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_ioannis_toubas } set_variable = { GRE.hc_toubas_purged = 1 } GRE_ioannis_toubas = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_petros_voulgaris } set_variable = { GRE.hc_voulgaris_purged = 1 } GRE_petros_voulgaris = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_spyridon_avgeris } set_variable = { GRE.hc_avgeris_purged = 1 } GRE_spyridon_avgeris = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_miltiadis_iatridis } set_variable = { GRE.hc_iatridis_purged = 1 } GRE_miltiadis_iatridis = { set_character_flag = killed_in_action } }
    else_if = { limit = { is_character = GRE_pyrros_spyromilios } set_variable = { GRE.hc_spyromilios_purged = 1 } GRE_pyrros_spyromilios = { set_character_flag = killed_in_action } }
    else = { set_character_flag = killed_in_action set_nationality = AGO }
}

set_surrendered_officer_flags = {
    if = { limit = { is_character = GRE_alexandros_papagos } set_variable = { GRE.hc_papagos_surrendered = 1 } GRE_alexandros_papagos = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_markos_drakos } set_variable = { GRE.hc_drakos_surrendered = 1 } GRE_markos_drakos = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_georgios_stanotas } set_variable = { GRE.hc_stanotas_surrendered = 1 } GRE_georgios_stanotas = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_napoleon_zervas } set_variable = { GRE.hc_zervas_surrendered = 1 } GRE_napoleon_zervas = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_nikolaos_plastiras } set_variable = { GRE.hc_plastiras_surrendered = 1 } GRE_nikolaos_plastiras = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_charalambos_katsimitros } set_variable = { GRE.hc_katsimitros_surrendered = 1 } GRE_charalambos_katsimitros = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_georgios_kosmas } set_variable = { GRE.hc_kosmas_surrendered = 1 } GRE_georgios_kosmas = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_ioannis_sotiris_alexakis } set_variable = { GRE.hc_aggelis_surrendered = 1 } GRE_ioannis_sotiris_alexakis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_konstantinos_davakis } set_variable = { GRE.hc_davakis_surrendered = 1 } GRE_konstantinos_davakis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_odysseas_aggelis } set_variable = { GRE.hc_aggelis_surrendered = 1 } GRE_odysseas_aggelis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_aris_velouchiotis } set_variable = { GRE.hc_velouchiotis_surrendered = 1 } GRE_aris_velouchiotis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_evripidis_bakirtzis } set_variable = { GRE.hc_bakirtzis_surrendered = 1 } GRE_evripidis_bakirtzis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_alexandros_rossios } set_variable = { GRE.hc_rossios_surrendered = 1 } GRE_alexandros_rossios = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_alexandros_sakellariou } set_variable = { GRE.hc_sakellariou_purged = 1 } GRE_alexandros_sakellariou = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_ioannis_demestichas } set_variable = { GRE.hc_demestichas_purged = 1 } GRE_ioannis_demestichas = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_epameinondas_kavvadias } set_variable = { GRE.hc_kavvadias_purged = 1 } GRE_epameinondas_kavvadias = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_dimitrios_loundras } set_variable = { GRE.hc_loundras_purged = 1 } GRE_dimitrios_loundras = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_dimitrios_oikonomou } set_variable = { GRE.hc_oikonomou_purged = 1 } GRE_dimitrios_oikonomou = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_ioannis_toubas } set_variable = { GRE.hc_toubas_purged = 1 } GRE_ioannis_toubas = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_petros_voulgaris } set_variable = { GRE.hc_voulgaris_purged = 1 } GRE_petros_voulgaris = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_spyridon_avgeris } set_variable = { GRE.hc_avgeris_purged = 1 } GRE_spyridon_avgeris = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_miltiadis_iatridis } set_variable = { GRE.hc_iatridis_purged = 1 } GRE_miltiadis_iatridis = { set_character_flag = surrendered_to_the_enemy } }
    else_if = { limit = { is_character = GRE_pyrros_spyromilios } set_variable = { GRE.hc_spyromilios_purged = 1 } GRE_pyrros_spyromilios = { set_character_flag = surrendered_to_the_enemy } }
    else = { set_character_flag = surrendered_to_the_enemy set_nationality = AGO }
}

### Is initialized by tmpX, tmpY and tmpZ through focus/dec/event/etc.
### TmY values:
###             0: Normal, 1: Ideology Leaning (growing), 2: Higher Officers w/o Ideology, 3: Higher Officers w/ Ideology, 66: Monthly LeftOvers
randomly_train_tmpX_officers = {
    
    resize_temp_array = { general_factory = tmpX }
    set_temp_variable = { cnt_left = tmpX }
    if = { 
        limit = { check_variable = { tmpY = 0 } }   ### Any debuff
        for_each_loop = {
            array = general_factory
        
            if = { 
                limit = { any_army_leader = { has_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { cnt_left = 1 }
            }   
        }
    }
    else_if = {
        limit = { check_variable = { tmpY = 1 } }   ### Ideologically, any debuff
        for_each_loop = {
            array = general_factory
        
            if = { 
                limit = { any_army_leader = { is_ideologically_close_tmpZ = yes has_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { is_ideologically_close_tmpZ = yes has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { cnt_left = 1 }
            }   
        }
    }
    else_if = {
        limit = { check_variable = { tmpY = 2 } }   ### Veteran, any debuff
        for_each_loop = {
            array = general_factory
        
            if = { 
                limit = { any_army_leader = { general_has_veterancy = yes has_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { general_has_veterancy = yes has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { cnt_left = 1 }
            }   
        }
    }
    else_if = {
        limit = { check_variable = { tmpY = 3 } }   ### Ideologically, veteran, any debuff
        for_each_loop = {
            array = general_factory
        
            if = { 
                limit = { any_army_leader = { is_ideologically_close_tmpZ = yes general_has_veterancy = yes has_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { is_ideologically_close_tmpZ = yes general_has_veterancy = yes has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { cnt_left = 1 }
            }   
        }
    }

    else_if = {
        limit = { check_variable = { tmpY = 4 } }    ### Ideologically, 3-4 debuff
        for_each_loop = {
            array = general_factory
        
            if = { 
                limit = { any_army_leader = { is_ideologically_close_tmpZ = yes has_very_low_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { is_ideologically_close_tmpZ = yes general_has_veterancy = yes has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { cnt_left = 1 }
            }
        }
    }

    if = {
        limit = { check_variable = { tmpY = 66 } }   ### Calls from monthly On Actions
        set_temp_variable = { cnt_left = 0 }
        for_each_loop = {
            array = general_factory

            if = {
                limit = { any_army_leader = { has_unpreparedness_level = yes not_recently_trained = yes } }
                random_army_leader = {
                    limit = { has_unpreparedness_level = yes not_recently_trained = yes }
                    reduce_unpreparedness = yes
                    increase_indXYZQ_weighted = yes
                    add_skill_level = tmpSKL
                }
                subtract_from_temp_variable = { GRE.training_leftovers = 1 }
            }
        }
    }

    add_to_variable = { GRE.training_leftovers = cnt_left }
}

calculate_unpreparedness = {
    
    set_temp_variable = { tmp_leader_number = GRE.army_leaders }
    multiply_temp_variable = { tmp_leader_number = 4 }
    set_temp_variable = { improvements_count = 0 }
    every_army_leader = {
        if = {
            limit = { has_trait = gre_unprepared_general_3 }
            add_to_temp_variable = { improvements_count = 0 }
        } 
        else_if = {
            limit = { has_trait = gre_unprepared_general_2 }
            add_to_temp_variable = { improvements_count = 1 }
        } 
        else_if = {
            limit = { has_trait = gre_unprepared_general_1 }
            add_to_temp_variable = { improvements_count = 2 }
        }
        else_if = {
            limit = { has_trait = gre_unprepared_general_0 }
            add_to_temp_variable = { improvements_count = 3 }
        }
        else = {
            add_to_temp_variable = { improvements_count = 4 }
        }
    }
    divide_temp_variable = { improvements_count = tmp_leader_number }
    set_variable = { GRE.preparedness_level = improvements_count }
}

#calculate_unpreparedness = {
#    
#    set_temp_variable = { tmp_leader_number = GRE.army_leaders }
#    multiply_temp_variable = { tmp_leader_number = 4 }
#    set_temp_variable = { improvements_count = 0 }
#    every_army_leader = {
#        if = {
#            limit = { has_trait = gre_unprepared_general_3 NOT = { has_trait = gre_recently_trained_general } }
#            add_to_temp_variable = { improvements_count = 0 }
#        } 
#        else_if = {
#            limit = { has_trait = gre_unprepared_general_2 NOT = { has_trait = gre_recently_trained_general } }
#            add_to_temp_variable = { improvements_count = 1 }
#        } 
#        else_if = {
#            limit = { has_trait = gre_unprepared_general_1 NOT = { has_trait = gre_recently_trained_general } }
#            add_to_temp_variable = { improvements_count = 2 }
#        }
#        else_if = {
#            limit = { has_trait = gre_unprepared_general_0 NOT = { has_trait = gre_recently_trained_general } }
#            add_to_temp_variable = { improvements_count = 3 }
#        }
#        else_if = {
#            limit = { NOT = { has_trait = gre_recently_trained_general } }
#            add_to_temp_variable = { improvements_count = 4 }
#        }
#    }
#    divide_temp_variable = { improvements_count = tmp_leader_number }
#    set_variable = { GRE.preparedness_level = improvements_count }
#
#}


reduce_unpreparedness = {
    custom_effect_tooltip = increase_preparation_level_tt
    if = {
        limit = { has_trait = gre_unprepared_general_3 }
        remove_unit_leader_trait  = gre_unprepared_general_3
    } 
    else_if = {
        limit = { has_trait = gre_unprepared_general_2 }
        remove_unit_leader_trait  = gre_unprepared_general_2 
    } 
    else_if = {
        limit = { has_trait = gre_unprepared_general_1 }
        remove_unit_leader_trait  = gre_unprepared_general_1
    } 
    else_if = {
        limit = { has_trait = gre_unprepared_general_0 }
        remove_unit_leader_trait  = gre_unprepared_general_0 
    } 
}

procure_me_generals_bugged = {
    set_variable = { GRE.name_index = 1 }
    resize_temp_array = {
        array = general_factory
        value = 1
        size = 84
    }
    for_each_loop = {
        array = general_factory

        set_temp_variable_to_random = { var = portrait_number min = 1 max = 20 integer = yes }
        meta_effect = {
            text = {
                create_corps_commander = {
                    name = "[COMMANDER_NAME]"
                    #picture = "Portrait_Europe_Generic_land_[COMMANDER_PORTRAIT].dds"
                    portrait_path = "gfx/leaders/Europe/Portrait_Europe_Generic_land_[COMMANDER_PORTRAIT].dds"
                    traits = { gre_unprepared_general_3 }
                    skill = 1
                    attack_skill = 1
                    defense_skill = 1
                    planning_skill = 1
                    logistics_skill = 1
                }
            }
            COMMANDER_NAME = "[GetGreekUnitLeaderName]"
            COMMANDER_PORTRAIT = "[?portrait_number|.0]"
        }
        add_to_variable = { GRE.name_index = 1 }
    }
    resize_temp_array = {
        array = general_factory
        value = 1
        size = 16
    }
    set_temp_variable = { portrait_number = 1 }
    for_each_loop = {
        array = general_factory

        meta_effect = {
            text = {
                create_navy_leader = {
                    name = "[COMMANDER_NAME]"
                    #picture = "Portrait_Europe_Generic_navy_[COMMANDER_PORTRAIT].dds"
                    portrait_path = "gfx/leaders/Europe/Portrait_Europe_Generic_navy_[COMMANDER_PORTRAIT].dds"
                    skill = 1
                    attack_skill = 1
                    defense_skill = 1
                    maneuvering_skill = 1
                    coordination_skill = 1
                }
            }
            COMMANDER_NAME = "[GetGreekUnitLeaderName]"
            COMMANDER_PORTRAIT = "[?portrait_number|.0]"
        }
        add_to_variable = { GRE.name_index = 1 }
        add_to_temp_variable = { GRE.portrait_number = 1 }
        if = { limit = { check_variable = { GRE.portrait_number = 8 } } set_temp_variable = { GRE.portrait_number = 11 } }
        else_if = { limit = { check_variable = { GRE.portrait_number = 17 } } set_temp_variable = { GRE.portrait_number = 1 } }
    }
    clear_variable = GRE.name_index
}


#############################################################################################################################################################################################
#######################################################################################[ GAME OF SHADOWS ]###################################################################################
#############################################################################################################################################################################################

########################################################################################
#######################################[ CLEAR FLAGS ]##################################
########################################################################################

clear_all_operation_flags = {
    clr_country_flag = gos_default
    clr_country_flag = gos_agency_cooperation
    clr_country_flag = gos_allowed_divisions
    clr_country_flag = bulgarian_dillema
}

########################################################################################
##################################[ MAX. ALLOWED DIVISIONS ]############################
########################################################################################

GRE_calculate_max_divisions = {
    set_temp_variable = { x = ITA.army_intel@GRE }
    multiply_temp_variable = { x = -0.25 }
    add_to_temp_variable = { x = 30 }
    round_temp_variable = x
    
    set_variable = { GRE.max_divs_allowed = x }
}

#############################################################################################################################################################################################
######################################################################################[ GRECO-ITALIAN WAR ]##################################################################################
#############################################################################################################################################################################################

#########################################################
################[Führer Directive No. 25]################
#########################################################

#########################################################
###############[ METAXAS RIBBENTROP PACT ]###############
#########################################################

calculate_mr_pact_threshold = {
    set_variable = { GRE.mr_negotiations_threshold = 100 }                                      ### Base Threshold Value [100]
    #[Metaxas Dead]#                                                                            ### [+10] if Metaxas is dead
    if = { 
        limit = { GRE_ioannis_metaxas = { is_country_leader = no } }
        add_to_variable = { GRE.mr_negotiations_threshold = 10 }
    }
    #[Influence]#
    set_temp_variable = { influence_adj = GER.favor@GRE }                                       ### [-25, +25], depending on influence
    divide_temp_variable = { influence_adj = 4 }
    subtract_from_variable = { GRE.mr_negotiations_threshold = influence_adj }
    #[AXAL Leaning]#
    calculate_axal_axis_multiplier_polarized = yes
    set_temp_variable = { axal_bonus = 15 }                                                     ### [-45, +45], depending on AXAL
    multiply_temp_variable = { axal_bonus = alax_multiplier }
    subtract_from_variable = { GRE.mr_negotiations_threshold = axal_bonus }
    #[Collaboration]#
    set_temp_variable = { collab_bonus = has_collaboration@GER }                                ### [-25, 0] depending on Collab
    multiply_variable = { collab_bonus = 10 }
    subtract_from_variable = { GRE.mr_negotiations_threshold = collab_bonus }
    ############################################################################################### [5, 180] max values
    set_variable = { GRE.mr_localization_threshold_none = mr_negotiations_threshold }
    set_variable = { GRE.mr_localization_threshold_low = mr_negotiations_threshold }
    set_variable = { GRE.mr_localization_threshold_medium = mr_negotiations_threshold }
    set_variable = { GRE.mr_localization_threshold_high = mr_negotiations_threshold }
    multiply_variable = { GRE.mr_localization_threshold_none       = 0.50 }                      ### Between [00, 50)% no chance for success [ 0 ]
    multiply_variable = { GRE.mr_localization_threshold_low        = 0.70 }                      ### Between [50, 70)% low chance for success [ 0 - 40 ]
    multiply_variable = { GRE.mr_localization_threshold_medium     = 0.80 }                      ### Between [70, 80)% medium chance for success [ 40 - 60 ]
    multiply_variable = { GRE.mr_localization_threshold_high       = 0.95 }                      ### Between [80, 95)% high chance for success [ 60 - 90 ]
    #                                                                                            ### Between [95, oo)% guaranteed chance for success [ 100 ]
}

MR_clear_variables = {
    clear_variable = mr_description
    clear_variable = mr_first_time_opening
    clear_variable = mr_asl_selected
    clear_variable = mr_atl_mma_selected
    clear_variable = mr_atl_ha_selected
    clear_variable = mr_atl_fs_selected
    clear_variable = mr_arsl_selected
    clear_variable = mr_demil_selected
    clear_variable = mr_block_attache_selected
    clear_variable = mr_block_lend_selected
    clear_variable = mr_limit_mils
    clear_variable = mr_better_rights
    clear_variable = mr_better_tariffs
    clear_variable = mr_mineral_athens
    clear_variable = mr_mineral_sterea
    clear_variable = mr_mineral_pelop
    clear_variable = mr_mineral_hpeiros
    clear_variable = mr_mineral_aegean
    clear_variable = mr_work_force
    clear_variable = mr_mussolini_fate
    clear_variable = mr_greek_land_acq
    clear_variable = mr_ital_north
    clear_variable = mr_exp_date
    clear_variable = mr_north_afr_aff
    clear_variable = mr_total_ratings
    clear_variable = mr_total_attemps
}

#########################################################
####################[ GERMAN STANCE ]####################
#########################################################

german_stance_in_greco_italian_war = {
    set_temp_variable = { x = GER.favor@GRE }
    divide_temp_variable = { x = 50 }                      # [0,2]
    add_to_temp_variable = { final = x }
    set_temp_variable = { x = GRE.axal }
    subtract_from_temp_variable = { x = 40 }
    if = { limit = { check_variable = { GRE.alax > 79.99 } } set_temp_variable = { final = 0 } }
    else_if = { limit = { check_variable = { GRE.alax < 20 } } add_to_temp_variable = { final = 2 } }
    else_if = { limit = { check_variable = { GRE.alax < 5 } } add_to_temp_variable = { final = 5 } }            ### Min 0, max 7
}

#########################################################
################[ TIRANA TREATY THRESH. ]################
#########################################################

calculate_tirana_treaty_threshold = {
    set_variable = { GRE.negotiations_willingness = 2 }                              ### [2]   Base
    add_to_variable = { GRE.negotiations_willingness = GRE.bulgarian_smackdown }     ### [0,3] depending on what you did with "Dash to Sofia"
    set_temp_variable = { influence_bonus = ITA.favor@GRE }
    divide_temp_variable = { influence_bonus = 40 }
    add_to_variable = { GRE.negotiations_willingness = influence_bonus }             ### [-2.5,2.5]  depending on influence
    set_temp_variable = { collab_bonus = has_collaboration@BUL }
    multiply_variable = { collab_bonus = 10 }                                   ### [0, 10] depending on collaboration
    add_to_variable = { GRE.negotiations_willingness = collab_bonus }
    set_temp_variable = { ger_influence_bonus = GER.favor@GRE }
    divide_temp_variable = { ger_influence_bonus = 80 }                         ### [-1.25,1.25] depending on influence w/ 
    add_to_variable = { GRE.negotiations_willingness = ger_influence_bonus }
    set_temp_variable = { factory_influence = GRE.num_of_factories}
    divide_temp_variable = { factory_influence = ITA.num_of_factories }
    multiply_temp_variable = { factory_influence = 2 }                          ### ~[0, 4) considering having double factories (impossible?)
    add_to_variable = { GRE.negotiations_willingness = factory_influence }
    set_temp_variable = { batalion_influence = GRE.num_battalions }
    divide_temp_variable = { batalion_influence = ITA.num_battalions }
    multiply_temp_variable = { batalion_influence = 4 }                         ### ~[0, 2) considering the difference between the two nations.
    add_to_variable = { GRE.negotiations_willingness = batalion_influence }
    ############################################################################### [-1.75, 24,75) max values
    if = {
        limit = {
            check_variable = { GRE.civilian_intel@ITA > 70.0 }
        }
        set_country_flag = enable_willingness_gui
    }
}

#########################################################
###############[ BULGARIAN CAPITULATION ]################
#########################################################

set_country_unwilling_to_help_bulgaria = {
    if = {
        limit = {
            NOT = { has_country_flag = unwilling_to_help_bulgaria }
        } 
        THIS = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = 200
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = 500
            }
            set_country_flag = unwilling_to_help_bulgaria
        }
    }
}

GRE_set_country_willing_to_help_bulgaria = {
    if = {
        limit = {
            has_country_flag = unwilling_to_help_bulgaria
        } 
        THIS = {
            add_ai_strategy = {
                type = dont_defend_ally_borders
                id = BUL
                value = -200
            }
            add_ai_strategy = {
                type = dont_join_wars_with
                id = BUL
                target_country = GRE
                value = -500
            }
            clr_country_flag = unwilling_to_help_bulgaria
        }
    }
}

###########################################################
#######################[ GREEK TRIUMPH ]###################
###########################################################

collect_faction_member_agreeableness = {
    every_country = { 
        limit = {
            is_in_faction_with = PREV                                                                      ## PREV is Greece's enemy faction leader (Germany almost always)
        }
        every_state = {                                                                                     # Here we calculate the core population of the country because the game really thought
            limit = {                                                                                       # it wouldn't be a good idea to make max_manpower_k not 100% include non-core manpower in the mix.
                is_core_of = PREV
                is_owned_and_controlled_by = PREV
            }
            add_to_variable = { PREV.nation_core_population = state_population_k }
        }
        set_variable = { THIS.check = THIS.nation_core_population }
        ###[Favor Part]###
        if = {
            limit = {
                is_in_array = {                                                                             # Here we work on influenceable nations (historically: Germany/Italy/Bulgaria).
                    array = global.favor_mechanic
                    value = THIS.id
                }                
            }
            if = {
                limit = { check_variable = { THIS.favor@GRE > 79 } }                                          # If we have Excellent influence over.
                add_to_variable = { THIS.nation_agreeableness_score = 2 }
            }
            else = {
                limit = { check_variable = { THIS.favor@GRE > 49 } }                                        # If we have Great influence over.
                add_to_variable = { THIS.nation_agreeableness_score = 1 }
            }
        }
        ###[Manpower Part]###
        divide_variable = { THIS.nation_core_population = casualties_k }                                     # Example Germany: Supposedly 80M population. For 3M casualties we get 26.6667. So if we have worse than 3M casualties for a 80M population we get max score for aggreabl. Levels are 2M/1M/500K (change respectively ofc)
        if = {                                                                                          # The reason I divided in that order is due to a lack of 0.xxxxxxx digits the engine seems to have. It will ruin the results. However by changing the order of division we get proper results, we just need to squish our stupid brains to make sense of the non-sensible numbers.
            limit = { check_variable = { THIS.nation_core_population < 26 } }
            add_to_variable = { THIS.nation_agreeableness_score = 3 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 40 } }
            add_to_variable = { THIS.nation_agreeableness_score = 2 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 80 } }
            add_to_variable = { THIS.nation_agreeableness_score = 1 }
        }
        else_if = {                                                                                         
            limit = { check_variable = { THIS.nation_core_population < 160 } }
            add_to_variable = { THIS.nation_agreeableness_score = 0.5 }
        }
        ###[Additional Stuff TBD]###
    }
}

#############################################################################################################################################################################################
##############################################################################[ HELLENIC STATE SCRIPTED EFFECTS ]############################################################################
#############################################################################################################################################################################################

#########################################################
####################[GRE/D05 XOR FUC]####################
#########################################################

gre_hs_xor = {                                                                  ## Here we basically implement an XOR function to return (-> var:event_sender) the ID of the tag (between GRE/Hellenic State) that is controlled by the human player
    if = {                                                                       # Basically we do not want to send the event twice, while we also ensure that it goes to the player.
        limit = {
            GRE = { is_ai = no }
            event_target:hellenic_state = { is_ai = yes }
        }
        set_variable = { event_sender = GRE.id }
    }
    else_if = {
        limit = {
            GRE = { is_ai = yes }
            event_target:hellenic_state = { is_ai = no }
        }
        set_variable = { event_sender = event_target:hellenic_state } 
    }
    else = {
        set_variable = { event_sender = GRE.id }
    }
}

#########################################################
###################[NATIONAL RESISTANCE]#################
#########################################################
##Variables: For GER/ITA/BUL we keep 3 variables (casualties + captured + total )
############ For Greek side we same 3 variables, but also equipment variables to simulate resistance strength
############ Generally, the higher equipment+strength of resistance (manpower+guns+etc) the higher the chance of a better battle result.
############ Every battle however is set to won/lost based on historical truth. Unless I find no info about the battle so its basically a sandbox with an accurate name so its completely based on above stats.
############ The idea is for those ~600 battles to happen in the 3-4 years of occupation on their historical dates. Manpower will be drawn directly from GER/ITA/BUL manpower pool (casualties+captured)
############ Reprisals work likewise but 1 variable (casualties). They are taken from state manpower not your country's as they are about civilians.
############ End goal to simulate the 7%-11% of population lost by Greece, but also weight this based upon players decisions.
############ I figured just displaying battle names would be too superficial, however I can't make 600 events (please god), so I incorporated a WoT basically into a gameplay mechanic.
############ Hope this makes sense ;) 
##Weights:   Resistance weights (Resistance state modifier, STR{=manpower+equipment}), Political weights (Communist/Democrat/Monarchist/Fascist relations), Others(occasionally black market, populance agitation, etc)
##Results:
#RES_battle_type_loss_heavy = {}
#RES_battle_type_loss_small = {}
#RES_battle_type_undetermined = { }
#RES_battle_type_won_small = {}
#RES_battle_type_won_mediocre = {}
#RES_battle_type_won_heavy = {}


HS_RES_calculate_state_growth_effect = {
    # This function calculates a state's andartes manpower increase daily, through a series of conditions.
}

HS_RES_set_base_replenishment = {
    ###[EAM]###
    if = {
        limit = { date>1942.2.1 date<1942.6.1 }                                                         # February42 - June42 (days=120)
        set_variable = { elas_base_rep = 15 }
    }
    else_if = {
        limit = { date<1942.11.25 }                                                                     # June42 - November25 (days=177)
        set_variable = { elas_base_rep = 30 }
    }
    else_if = {
        limit = { date<1943.7.1 }                                                                       # November25 - July43 (days=395) -> base ~20.000
        set_variable = { elas_base_rep = 32 }
    }
    else_if = {
        limit = { date<1944.10.1 }                                                                      # July43 - Oct44 (days=456) -> base ~80.000
        set_variable = { elas_base_rep = 135 }
    }
    ###[EDES]###
    if = {
        limit = { date>1942.7.23 date<1942.11.25 }                                                      # 23July42 - November25 (days=125)
        set_variable = { edes_base_rep = 14 }
    }
    else_if = {
        limit = { date<1943.7.1 }                                                                       # November25 - July43 (days=395) -> base ~20.000
        set_variable = { edes_base_rep = 18.5 }
    }
    else_if = {
        limit = { date<1944.10.1 }                                                                      # July43 - Oct44 (days=456) -> base ~80.000
        set_variable = { edes_base_rep = 26 }
    }
    ###[REST]###
    if = {
        limit = { date<1942.6.1 }                                                                       # February42 - June42 (days=~420)
        set_variable = { rest_base_rep = 2 }
    }
    else_if = {
        limit = { date<1942.11.25 }                                                                     # June42 - November25 (days=177)
        set_variable = { rest_base_rep = 3 }
    }
    else_if = {
        limit = { date<1943.7.1 }                                                                       # November25 - July43 (days=395)
        set_variable = { rest_base_rep = 4 }
    }
    else_if = {
        limit = { date<1944.10.1 }                                                                      # July43 - Oct44 (days=456)
        set_variable = { rest_base_rep = 5 }
    }
}

HS_resistance_manpower_increase = {
    if = { 
        limit = {
            date > 1942.9.1
            date < 1943.3.1
        }
        set_temp_variable = { elas_manpower_add = 77.6 }
        set_temp_variable = { elas_equipment_add = 25.9 }
        set_temp_variable = { edes_manpower_add = 15.3 }
        set_temp_variable = { edes_equipment_add = 5.1 }
    }
    else_if = { 
        limit = {
            date > 1943.3.1
            date < 1944.2.1
        }
        set_temp_variable = { elas_manpower_add = 60 }
        set_temp_variable = { elas_equipment_add = 20 }
        set_temp_variable = { edes_manpower_add = 12 }
        set_temp_variable = { edes_equipment_add = 4 }
    }
    else_if = { 
        limit = {
            date > 1944.2.1
        }
        set_temp_variable = { elas_manpower_add = 83.3 }
        set_temp_variable = { elas_equipment_add = 27.8 }
        set_temp_variable = { edes_manpower_add = 16.6 }
        set_temp_variable = { edes_equipment_add = 5.5 }
    }
    ### GLOBAL MODIFIERS ###
    HS_resistance_popularity_bonus = yes
    ### FACTION MODIFIERS ###
    HS_resistance_growth_potential = yes
    ### MULT ###
    multiply_temp_variable = { elas_manpower_add = elas_temp_per }
    multiply_temp_variable = { elas_equipment_add = elas_temp_per }
    multiply_temp_variable = { edes_manpower_add = edes_temp_per }
    multiply_temp_variable = { edes_equipment_add = edes_temp_per }
    ### ROUNDING ###
    round_temp_variable = elas_manpower_add
    round_temp_variable = edes_manpower_add
    round_temp_variable = elas_equipment_add
    round_temp_variable = edes_equipment_add
    ### ADD TO POOL ###
    add_to_variable = { GRE.elas_manpower = elas_manpower_add }
    add_to_variable = { GRE.elas_equipment = elas_equipment_add }
    add_to_variable = { GRE.edes_manpower = edes_manpower_add }
    add_to_variable = { GRE.edes_equipment = edes_equipment_add }
    HS_resistance_recalculate_ratios = yes
}

HS_resistance_popularity_bonus = {
    set_temp_variable = { temp_per = 1 }
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        THIS = {
            if = {
                limit = {
                    has_dynamic_modifier = { modifier = black_market_obscure_controlled }
                }
                add_to_temp_variable = { temp_per = 0.01 }
            }
            else_if = {
                limit = {
                    has_dynamic_modifier = { modifier = black_market_cemented_controlled }
                }
                add_to_temp_variable = { temp_per = 0.03 }
            }
            else_if = {
                limit = {
                    has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
                }
                add_to_temp_variable = { temp_per = 0.05 }
            }   
        }                                   
    }
    if = { 
        limit = { event_target:hellenic_state = { has_completed_focus = divert_population_to_the_resistance } }
        add_to_temp_variable = { temp_per = 0.50 }
    }
}

HS_resistance_growth_potential = {
    set_temp_variable = { elas_temp_per = temp_per }
    set_temp_variable = { edes_temp_per = temp_per }
    if = {
        limit = {
            check_variable = { GRE.edes_ratio > 1.99 }
        }
        add_to_temp_variable = { edes_temp_per = 0.25 }
    }
    else_if = {
        limit = {
            check_variable = { GRE.elas_ratio > 1.99 }
        }
        add_to_temp_variable = { elas_temp_per = 0.25 }
    }

}

HS_resistance_recalculate_ratios = {
    set_temp_variable = { x = GRE.elas_manpower }
    set_temp_variable = { y = GRE.elas_equipment }
    divide_temp_variable = { y = x }    
    set_variable = { GRE.elas_ratio = y }
    set_temp_variable = { x = GRE.edes_manpower }
    set_temp_variable = { y = GRE.edes_equipment }
    divide_temp_variable = { y = x }    
    set_variable = { GRE.edes_ratio = y }
}


#######BATTLES
####MANPOWER
###Strength (Us)
###Strength (Them)
###Losses (Us)
###Losses (Them)
###POW (Us)
###POW (Them)      
####EQUIPMENT
###Lost (Us)
###Lost (Them)
###Captured (Us)
###Captured (Them)
####MODIFIERS
###Manpower
###Equipment 

EDES_resistance_battle_weighted_sandbox = {                                            ## Contains WEIGHTED resistance battle outcomes based on certain modifiers. RES_GROUP ALWAYS WINS
    set_temp_variable = { magnitude = 0 }
    ################################################
    if = {
        limit = { check_variable = { GRE.edes_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################[Magnitude Clamped]
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################[Greek Combatant Size]
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################[Opponent Size relevant to Greek Size]
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################[Losses Calculation]
    set_temp_variable = { t1 = greek_combatant_size }                           
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.3
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.5
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.2
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.6
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.65
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.4
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.15
            max = 0.70
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.3
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.4
            max = 0.75
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.5
            max = 0.9
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.6
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.edes_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.edes_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.edes_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.edes_total_manpower_losses = t1 }                         # Edes total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}


ELAS_resistance_battle_weighted_sandbox = {                                            ## Contains WEIGHTED resistance battle outcomes based on certain modifiers. RES_GROUP ALWAYS WINS
    set_temp_variable = { magnitude = 0 }
    ################################################
    if = {
        limit = { check_variable = { GRE.elas_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################[Magnitude Clamped]
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################[Greek Combatant Size]
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################[Opponent Size relevant to Greek Size]
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################[Losses Calculation]
    set_temp_variable = { t1 = greek_combatant_size }                           
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.3
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.5
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.2
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.6
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.5
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.65
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.4
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.15
            max = 0.70
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.3
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.4
            max = 0.75
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.1
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.5
            max = 0.9
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.6
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.elas_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.elas_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.elas_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.elas_total_manpower_losses = t1 }                         # elas total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}

EDES_resistance_battle_sandbox = {                                            ## Contains UNWEIGHTED resistance battle outcomes based on certain modifiers.
    set_temp_variable = { magnitude = 0 }
    if = {
        limit = { check_variable = { GRE.edes_manpower > 40000 } }
        add_to_temp_variable = { magnitude = 5 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 30000 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 20000 } }
        add_to_temp_variable = { magnitude = 3 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 15000 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_manpower > 12500 } }
        add_to_temp_variable = { magnitude = 1 }
    }
    ################################################
    if = {
        limit = { check_variable = { GRE.edes_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.edes_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################[Magnitude Clamped]
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################[Greek Combatant Size]
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################[Opponent Size relevant to Greek Size]
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################[Losses Calculation]
    set_temp_variable = { t1 = greek_combatant_size }                           
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.01
            max = 0.15
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.20
            max = 0.90
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.01
            max = 0.20
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.2
            max = 0.9
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.4
            max = 0.95
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.5
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.edes_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.edes_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.edes_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.edes_total_manpower_losses = t1 }                         # Edes total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}





ELAS_resistance_battle_sandbox = {                                            ## Contains UNWEIGHTED resistance battle outcomes based on certain modifiers.
    set_temp_variable = { magnitude = 0 }
    if = {
        limit = { check_variable = { GRE.elas_manpower > 150000 } }
        add_to_temp_variable = { magnitude = 5 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 125000 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 100000 } }
        add_to_temp_variable = { magnitude = 3 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 75000 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_manpower > 50000 } }
        add_to_temp_variable = { magnitude = 1 }
    }
    ################################################
    if = {
        limit = { check_variable = { GRE.elas_ratio > 1.99 } }
        add_to_temp_variable = { magnitude = 10 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.74 } }
        add_to_temp_variable = { magnitude = 8 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.49 } }
        add_to_temp_variable = { magnitude = 6 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 1.24 } }
        add_to_temp_variable = { magnitude = 4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.99 } }
        add_to_temp_variable = { magnitude = 2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.74 } }
        add_to_temp_variable = { magnitude = -2 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.49 } }
        add_to_temp_variable = { magnitude = -4 }
    }
    else_if = {
        limit = { check_variable = { GRE.elas_ratio > 0.24 } }
        add_to_temp_variable = { magnitude = -6 }
    }
    else = {
        add_to_temp_variable = { magnitude = -10 }
    }
    ################################################
    clamp_temp_variable = {
        var = magnitude
        min = -10
        max = 10
    }
    ################################################
    random_list = {
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 200
                max = 400
            }
        }
        30 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 100
                max = 200
            }
        }
        25 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 400
                max = 600
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 600
                max = 1200
            }
        }
        10 = {
            randomize_temp_variable = {
                var = greek_combatant_size
                distribution = uniform
                min = 1200
                max = 2500
            }
        }
    }
    ##################################################################
    set_temp_variable = { opponent_combatant_size = greek_combatant_size }
    random_list = {
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 400
                max = 600
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = 200
                max = 400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        30 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -100
                max = 100
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        25 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -400
                max = -200
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
        10 = {
            randomize_temp_variable = {
                var = x
                distribution = uniform
                min = -600
                max = -400
            }
            add_to_temp_variable = { opponent_combatant_size = x }
        }
    }
    ##################################################################
    
    ################################################
    set_temp_variable = { t1 = greek_combatant_size }
    set_temp_variable = { t2 = opponent_combatant_size }
    set_temp_variable = { t3 = opponent_combatant_size }
    if = { 
        limit = { check_variable = { magnitude < -6 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.85
            max = 1
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.15
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < -4 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.45
            max = 0.85
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 0 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
    }
    else_if = { 
        limit = { check_variable = { magnitude < 5 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.35
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.45
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 7 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.25
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.45
            max = 0.85
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.40
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 9 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.2
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.55
            max = 0.90
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.05
            max = 0.60
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    else_if = { 
        limit = { check_variable = { magnitude < 11 } }
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.05
            max = 0.10
        }
        multiply_temp_variable = { t1 = temp_manpower_lost }                            ## Greek Manpower Lost
        randomize_temp_variable = {
            var = temp_manpower_lost
            distribution = uniform
            min = 0.85
            max = 1
        }
        multiply_temp_variable = { t2 = temp_manpower_lost }                            ## Enemy Manpower Lost
        randomize_temp_variable = {
            var = temp_equipment_captured
            distribution = uniform
            min = 0.25
            max = 1
        }
        multiply_temp_variable = { t3 = temp_equipment_captured }                       ## Equipment that we captured
    }
    ####################################################################################################################################
    if = { 
        limit = { check_variable = { magnitude > 0 } }
        set_temp_variable = { t4 = t1 }                                                  ## Lost half equipment on victories (lets say they get recovered)
        divide_temp_variable = { t4 = 2 }
        add_to_variable = { GRE.elas_equipment = t3 }                                     # Equipment Captured in Battle
    }
    subtract_from_variable = { GRE.elas_manpower = t1 }                               # Manpower Lost in Battle
    subtract_from_variable = { GRE.elas_equipment = t4 }                              # Equipment Lost in Battle
    add_to_variable = { GRE.elas_total_manpower_losses = t1 }                         # ELAS total losses counter
    add_to_variable = { THIS.losses_from_greek_resistance = t2 }                      # Occupier's losses from resistance (for display purposes)
    multiply_temp_variable = { t2 = -1 }
    THIS = { add_manpower = t2 }                                                      # Remove losses from manpower pool.   
    ####################################################################################################################################    
}

#########################################################
###################[HELLENIC STATE SE]###################
#########################################################


HS_GUI_clear_main_variables = {
    clear_variable=cycle_choice
    clear_variable=cycle_ind_1
    clear_variable=cycle_ind_2
    clear_variable=cycle_ind_var_1 
    clear_variable=cycle_ind_var_2 
    clear_variable=cycle_ind_var_3
}

#####[Calculation for State GUI]#####

HS_GUI_initialize_composition = {
    set_variable = { combatant_percentage=0 }
    set_variable = { noncombatant_percentage=1 }
    set_variable = { reservist_percentage=0 }
    set_variable = { available_noncombatants=andartes }
}

HS_GUI_set_food_distribution = {
    set_temp_variable = { tmp=cycle_ind_var_1 }
    subtract_from_temp_variable = { tmp=state_food_distribution_manpower } 
    subtract_from_variable = { available_noncombatants=tmp }
    set_variable={ state_food_distribution_manpower=cycle_ind_var_1 }
    set_variable={ state_food_distribution_efficiency=cycle_ind_2 }
    set_variable={ res_group_state_stb=cycle_ind_var_2 }
    set_variable={ res_group_state_fam=cycle_ind_var_3 }
} 

HS_GUI_set_reconnaissance = {
    set_temp_variable = { tmp=cycle_ind_var_1 }
    subtract_from_temp_variable = { tmp=state_reconnaissance_manpower }
    subtract_from_variable = { available_noncombatants=tmp }
    set_variable={ state_reconnaissance_manpower=cycle_ind_var_1 }
    set_variable={ state_reconnaissance_efficiency=cycle_ind_2 }
    set_variable={ res_group_state_recon=cycle_ind_var_2 }
} 

HS_GUI_set_intel_gathering = {
    set_temp_variable = { tmp=cycle_ind_var_1 }
    subtract_from_temp_variable = { tmp=state_intel_gathering_manpower }
    subtract_from_variable = { available_noncombatants=tmp }
    set_variable={ state_intel_gathering_manpower=cycle_ind_var_1 }
    set_variable={ state_intel_gathering_efficiency=cycle_ind_2 }
    set_variable={ res_group_intel_gathering=cycle_ind_var_2 }
} 

HS_GUI_refresh_food_distribution = {
    if = { 
        limit = { check_variable = { y>0 } check_variable= { available_noncombatants<y } }
        set_temp_variable = { z=state_food_distribution_manpower }
        divide_temp_variable = { z=x }
        set_variable = { state_food_distribution_efficiency=z }
        set_variable = { res_group_state_stb=0.10 }
        multiply_variable = { res_group_state_stb=state_food_distribution_efficiency }
        if = {
            limit = { check_variable={ var=state_food_distribution_efficiency value=1.75 compare=greater_than_or_equals } }
            set_variable = { res_group_state_fam=-3 }
        }
        else_if = {
            limit = { check_variable={ var=state_food_distribution_efficiency value=1.25 compare=greater_than_or_equals } }
            set_variable = { res_group_state_fam=-2 }
        }
        else_if = {
            limit = { check_variable={ var=state_food_distribution_efficiency value=0.75 compare=greater_than_or_equals } }
            set_variable = { res_group_state_fam=-1 }
        }
        else = { set_variable = { res_group_state_fam=0 } }
    }
    else = { subtract_from_variable = { available_noncombatants=y } }
}

HS_GUI_refresh_reconnaissance = {
    if = {
        limit = { check_variable = { y>0 } check_variable= { available_noncombatants<y } }
        set_temp_variable = { z=state_reconnaissance_manpower }
        divide_temp_variable = { z=x }
        set_variable = { state_reconnaissance_efficiency=z }
        set_variable = { res_group_state_recon=0.50 }
        multiply_variable = { res_group_state_recon=state_reconnaissance_efficiency }
    }
    else = { subtract_from_variable = { available_noncombatants=y } }
}

HS_GUI_refresh_intel_gathering = {
    if = {
        limit = { check_variable = { y>0 } check_variable= { available_noncombatants<y } }
        set_temp_variable = { z=state_intel_gathering_manpower }
        divide_temp_variable = { z=x }
        set_variable = { state_intel_gathering_efficiency=z }
        set_variable = { res_group_state_recon=0.50 }
        multiply_variable = { res_group_intel_gathering=state_intel_gathering_efficiency }
    }
    else = { subtract_from_variable = { available_noncombatants=y } }
}

HS_GUI_WEEKLY_refresh_pool_or_effects = {
    ###[Food Distribution]###
    ######
}

HS_GUI_WEEKLY_check_requirement_changes = {
    if = {
        limit = { NOT={ check_variable={ state_food_distribution_efficiency=0 } } }
        HS_GUI_UNARMED_food_distribution_variable_preparation=yes
        set_temp_variable = { x=state_food_distribution_efficiency }
        multiply_temp_variable = { x=cycle_ind_1 }
        if = {
            limit = { NOT={ check_variable={ x=state_food_distribution_manpower } } }
            set_temp_variable={ y=x }
            subtract_from_temp_variable={ y=state_food_distribution_manpower }
            HS_GUI_refresh_food_distribution=yes
        }
    }
    if = {
        limit = { NOT={ check_variable={ state_reconnaissance_efficiency=0 } } }
        HS_GUI_UNARMED_reconnaissance_variable_preparation=yes
        set_temp_variable = { x=state_reconnaissance_efficiency }
        multiply_temp_variable = { x=cycle_ind_1 }
        if = {
            limit = { NOT={ check_variable={ x=state_reconnaissance_manpower } } }
            set_temp_variable={ y=x }
            subtract_from_temp_variable={ y=state_reconnaissance_manpower }
            HS_GUI_refresh_reconnaissance=yes
        }
    }
    if = {
        limit = { NOT={ check_variable={ state_intel_gathering_efficiency=0 } } }
        HS_GUI_UNARMED_intel_gathering_variable_preparation=yes
        set_temp_variable = { x=state_intel_gathering_efficiency }
        multiply_temp_variable = { x=cycle_ind_1 }
        if = {
            limit = { NOT={ check_variable={ x=state_intel_gathering_manpower } } }
            set_temp_variable={ y=x }
            subtract_from_temp_variable={ y=state_intel_gathering_manpower }
            HS_GUI_refresh_intel_gathering=yes
        }
    }
}

HS_GUI_UNARMED_food_distribution_variable_preparation = {
    ###[ Set Indicators to Current Values ]###
    set_variable = { cycle_ind_var_1=state_food_distribution_manpower }
    set_variable = { cycle_ind_2=state_food_distribution_efficiency}
    HS_GUI_UNARMED_food_distribution_set_display_effects=yes
    ##############################################
    set_temp_variable = { total_mult=0 }
    set_temp_variable = { x=THIS.fields }
    multiply_temp_variable = { x=0.5 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.forest }
    multiply_temp_variable = { x=0.75 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.urban }
    multiply_temp_variable = { x=1.25 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.hills }
    multiply_temp_variable = { x=1.75 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.mountains }
    multiply_temp_variable = { x=2.5 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.island }
    multiply_temp_variable = { x=3.0 }
    add_to_temp_variable = { total_mult=x }
    divide_temp_variable = { total_mult=province_num }
    #####################################################
    set_temp_variable = { x=20 }
    multiply_temp_variable = { x=province_num }
    multiply_temp_variable = { x=total_mult }
    set_temp_variable = { y=state_population_k }
    multiply_temp_variable = { y=0.125 }
    add_to_temp_variable = { x=y }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_food_distribution_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount }
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    HS_GUI_UNARMED_food_distribution_set_display_effects = yes
}

HS_GUI_UNARMED_food_distribution_set_display_effects = {
    set_variable = { cycle_ind_var_2=0.10 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
    if = { 
        limit = { check_variable={ var=cycle_ind_2 value=1.75 compare=greater_than_or_equals } }
        set_variable = { cycle_ind_var_3=-3 }
    }
    else_if = { 
        limit = { check_variable={ var=cycle_ind_2 value=1.25 compare=greater_than_or_equals } }
        set_variable = { cycle_ind_var_3=-2 }
    }
    else_if = { 
        limit = { check_variable={ var=cycle_ind_2 value=0.75 compare=greater_than_or_equals } }
        set_variable = { cycle_ind_var_3=-1 }
    }
    else = { set_variable = { cycle_ind_var_3=0 } }
}

HS_GUI_UNARMED_reconnaissance_variable_preparation = {
    ###[ Set Indicators to Current Values ]###
    set_variable = { cycle_ind_var_1=state_reconnaissance_manpower }
    set_variable = { cycle_ind_2=state_reconnaissance_efficiency}
    HS_GUI_UNARMED_reconnaissance_set_display_effects=yes
    ##############################################
    set_temp_variable = { total_mult=0 }
    set_temp_variable = { x=THIS.fields }
    multiply_temp_variable = { x=0.25 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.forest }
    multiply_temp_variable = { x=1.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.urban }
    multiply_temp_variable = { x=2.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.hills }
    multiply_temp_variable = { x=3.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.mountains }
    multiply_temp_variable = { x=4.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.island }
    multiply_temp_variable = { x=1.50 }
    add_to_temp_variable = { total_mult=x }
    divide_temp_variable = { total_mult=province_num }
    #####################################################
    set_temp_variable = { x=50 }
    multiply_temp_variable = { x=province_num }
    multiply_temp_variable = { x=total_mult }
    if={ limit={ check_variable={ base=1 } } multiply_temp_variable={ x=1.2} }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_reconnaissance_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    HS_GUI_UNARMED_reconnaissance_set_display_effects=yes
}

HS_GUI_UNARMED_reconnaissance_set_display_effects = {
    set_variable = { cycle_ind_var_2=0.50 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
}

HS_GUI_UNARMED_intel_gathering_variable_preparation = {
    ###[ Set Indicators to Current Values ]###
    set_variable = { cycle_ind_var_1=state_intel_gathering_manpower }
    set_variable = { cycle_ind_2=state_intel_gathering_efficiency}
    HS_GUI_UNARMED_intel_gathering_set_display_effects=yes
    ##############################################
    set_variable={ cycle_ind_1=500 }
}

HS_GUI_UNARMED_intel_gathering_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount }
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    HS_GUI_UNARMED_intel_gathering_set_display_effects=yes
}

HS_GUI_UNARMED_intel_gathering_set_display_effects = {
    set_variable = { cycle_ind_var_2=0.50 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
}

HS_GUI_UNARMED_route_planning_variable_preparation = {
    set_temp_variable = { x=THIS.distance_to@GRE.RES_HQ_STATE }
    multiply_temp_variable = { x=10 }
    if = { limit={ is_coastal=yes } multiply_temp_variable={ x=2 } }
    if = { limit={ check_variable={ base>0 } } multiply_temp_variable={ x=2 } }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_route_planning_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    set_variable = { cycle_ind_var_2=-0.30 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
    set_variable = { cycle_ind_var_3=-0.20 }
    multiply_variable = { cycle_ind_var_3=cycle_ind_2 }
}

HS_GUI_UNARMED_fortify_position_variable_preparation = {
    set_temp_variable = { total_mult=0 }
    set_temp_variable = { x=THIS.fields }
    multiply_temp_variable = { x=4.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.forest }
    multiply_temp_variable = { x=1.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.urban }
    multiply_temp_variable = { x=8.00 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.hills }
    multiply_temp_variable = { x=0.75 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.mountains }
    multiply_temp_variable = { x=0.50 }
    add_to_temp_variable = { total_mult=x }
    set_temp_variable = { x=THIS.island }
    multiply_temp_variable = { x=1.00 }
    add_to_temp_variable = { total_mult=x }
    divide_temp_variable = { total_mult=province_num }
    #####################################################
    set_temp_variable = { x=200 }
    multiply_temp_variable = { x=province_num }
    multiply_temp_variable = { x=total_mult }
    if={ limit={ check_variable={ base=1 } } multiply_temp_variable={ x=1.2} }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_fortify_position_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    set_variable = { cycle_ind_var_2=0.50 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
}

HS_GUI_UNARMED_inspire_populace_variable_preparation = {
    set_temp_variable = { x=THIS.province_num }
    multiply_temp_variable = { x=20 }
    set_temp_variable = { y=state_population_k }
    multiply_temp_variable = { y=0.125 }
    add_to_temp_variable = { x=y }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_inspire_populace_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    set_variable = { cycle_ind_var_2=2 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
    set_variable = { cycle_ind_var_3=0.20 }
    multiply_variable = { cycle_ind_var_3=cycle_ind_2 }
}

HS_GUI_UNARMED_seek_aid_variable_preparation = {
    set_temp_variable = { x=10000 }
    divide_temp_variable = { x=state_population_k }
    if = { limit={ is_coastal=yes } multiply_temp_variable={ x=2 } }
    if = { limit={ check_variable={ base>0 } } multiply_temp_variable={ x=2 } }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_seek_aid_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    set_variable = { cycle_ind_var_2=8 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
}

HS_GUI_UNARMED_sabotage_variable_preparation = {
    set_temp_variable = { x=THIS.distance_to@GRE.RES_HQ_STATE }
    multiply_temp_variable = { x=10 }
    if = { limit={ is_coastal=yes } multiply_temp_variable={ x=2 } }
    if = { limit={ check_variable={ base>0 } } multiply_temp_variable={ x=2 } }
    set_variable={ cycle_ind_1=x }
}

HS_GUI_UNARMED_sabotage_change_amount_effect = {
    add_to_variable={ cycle_ind_var_1=change_amount } 
    set_temp_variable = { x=cycle_ind_1 }
    multiply_temp_variable = { x=2 }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=THIS.available_noncombatants }
    clamp_variable={ var=cycle_ind_var_1 min=0 max=x }
    set_variable = { cycle_ind_2=cycle_ind_var_1 }
    divide_variable = { cycle_ind_2=cycle_ind_1 }
    ####################[Effects]#######################
    set_variable = { cycle_ind_var_2=-0.30 }
    multiply_variable = { cycle_ind_var_2=cycle_ind_2 }
    set_variable = { cycle_ind_var_3=-0.20 }
    multiply_variable = { cycle_ind_var_3=cycle_ind_2 }
}

#####[Calculation for Events]#####

HS_GAR_EVNT_outcome_calculation = {
    # This function calculates the chances on the severity of an event (e.g. plundered state) depending on certain parameters like agitation, anger but also chance. There are 9 outcomes.
    # Least Severe - Most Severe
    #set_temp_variable = { x=state_agitation }
    #set_temp_variable = { y=controller:ANGER@GRE }
    #set_temp_variable = { z=controller:AGI@GRE }
    #set_temp_variable = { q=controller:calm_days@GRE }
    #set_temp_variable = { e=controller:PERSONALITY@GRE }
    ###[Least Severe - case0]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=-3 }
    add_to_temp_variable = { case0=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=-3 }
    add_to_temp_variable = { case0=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=-3 }
    add_to_temp_variable = { case0=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=4 }
    add_to_temp_variable = { case0=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case0=200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case0=100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case0=-100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case0=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case0=-300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case0=-200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case0=-300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case0=50 } }
    divide_temp_variable = { case0=5 }
    clamp_temp_variable = { var=case0 min=10 }
    ###[case1]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=-2.5 }
    add_to_temp_variable = { case1=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=-2.5 }
    add_to_temp_variable = { case1=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=-2.5 }
    add_to_temp_variable = { case1=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=3 }
    add_to_temp_variable = { case1=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case1=175 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case1=75 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case1=-75 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case1=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case1=-250 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case1=-175 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case1=-250 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case1=25 } }
    divide_temp_variable = { case1=5 }
    clamp_temp_variable = { var=case1 min=10 }
    ###[case2]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=-2 }
    add_to_temp_variable = { case2=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=-2 }
    add_to_temp_variable = { case2=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=-2 }
    add_to_temp_variable = { case2=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=2.5 }
    add_to_temp_variable = { case2=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case2=150 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case2=50 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case2=-50 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case2=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case2=-300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case2=-200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case2=-300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case2=50 } }
    divide_temp_variable = { case2=5 }
    clamp_temp_variable = { var=case2 min=10 }
    ###[case3]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=-1.5 }
    add_to_temp_variable = { case3=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=-1.5 }
    add_to_temp_variable = { case3=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=-1.5 }
    add_to_temp_variable = { case3=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=1.75 }
    add_to_temp_variable = { case3=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case3=100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case3=25 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case3=-25 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case3=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case3=-200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case3=-100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case3=-200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case3=25 } }
    divide_temp_variable = { case3=5 }
    clamp_temp_variable = { var=case3 min=10 }
    ###[case4]###
    ##############################################
    ##############################################
    set_temp_variable = { case4=100 }
    ##############################################
    ##############################################
    ###[case5]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=1.5 }
    add_to_temp_variable = { case5=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=1.5 }
    add_to_temp_variable = { case5=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=1.5 }
    add_to_temp_variable = { case5=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=-1.75 }
    add_to_temp_variable = { case5=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case5=-100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case5=-25 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case5=25 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case5=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case5=200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case5=100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case5=200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case5=-25 } }
    divide_temp_variable = { case5=5 }
    clamp_temp_variable = { var=case5 min=10 }
    ###[case6]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=2 }
    add_to_temp_variable = { case6=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=2 }
    add_to_temp_variable = { case6=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=2 }
    add_to_temp_variable = { case6=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=-2.5 }
    add_to_temp_variable = { case6=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case6=-150 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case6=-50 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case6=50 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case6=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case6=300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case6=200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case6=300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case6=-50 } }
    divide_temp_variable = { case6=5 }
    clamp_temp_variable = { var=case6 min=10 }
    ###[case7]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=2.5 }
    add_to_temp_variable = { case7=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=2.5 }
    add_to_temp_variable = { case7=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=2.5 }
    add_to_temp_variable = { case7=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=-3 }
    add_to_temp_variable = { case7=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case7=-175 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case7=-75 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case7=75 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case7=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case7=250 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case7=175 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case7=250 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case7=-25 } }
    divide_temp_variable = { case7=5 }
    clamp_temp_variable = { var=case7 min=10 }
    ###[Most Severe - case8]###
    set_temp_variable = { x=state_agitation }
    multiply_temp_variable = { x=3 }
    add_to_temp_variable = { case8=x }
    set_temp_variable = { x=controller:AGI@GRE }
    multiply_temp_variable = { x=3 }
    add_to_temp_variable = { case8=x }
    set_temp_variable = { x=controller:ANGER@GRE }
    multiply_temp_variable = { x=3 }
    add_to_temp_variable = { case8=x }
    set_temp_variable = { x=controller:calm_days@GRE }
    multiply_temp_variable = { x=-4 }
    add_to_temp_variable = { case8=x }
    if = { limit={ check_variable={ controller:PERSONALITY@GRE=1 } } add_to_temp_variable={ case8=-200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=2 } } add_to_temp_variable={ case8=-100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=3 } } add_to_temp_variable={ case8=100 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=4 } } add_to_temp_variable={ case8=0 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=5 } } add_to_temp_variable={ case8=300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=6 } } add_to_temp_variable={ case8=200 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=7 } } add_to_temp_variable={ case8=300 } }
    else_if = { limit={ check_variable={ controller:PERSONALITY@GRE=8 } } add_to_temp_variable={ case8=-50 } }
    divide_temp_variable = { case8=5 }
    clamp_temp_variable = { var=case8 min=10 }
    ##############################################
    ##############################################
    ##############################################
    ##############################################
}

##################################

HS_shut_down_the_games_resistance_mechanic_in_states = {
    every_state = {
        limit = { is_core_of = GRE }
        cancel_resistance = yes
        force_disable_resistance = { clear = yes }
    }
}

HS_add_daily_agitation_to_states = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = { 
            limit = { NOT = { check_variable = { THIS.modifier@state_agitation_token=0 } } }
            add_to_variable = { THIS.state_agitation = THIS.modifier@state_agitation_token }
        }
        else = { subtract_from_variable = { state_agitation=0.10 } }
    }
}

HS_add_daily_andartes_to_states = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = { 
            limit = { NOT = { check_variable = { THIS.modifier@state_andartes_token=0 } } }
            add_to_variable = { THIS.andartes = THIS.modifier@state_andartes_token }
        }
    }
}

HS_set_daily_base_reconnaissance = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = {
            limit = { NOT = { check_variable = { THIS.modifier@state_daily_reconnaissance_percentage_token=0 } } }
            set_temp_variable = { y=THIS.modifier@state_daily_reconnaissance_percentage_token }
            divide_temp_variable = { y=100 }
            add_to_variable = { THIS.reconnaissance_level = y }
        }
        else = { 
            subtract_from_variable = { THIS.reconnaissance_level=0.25 }
        }
        clamp_variable = { var=THIS.reconnaissance_level min=THIS.modifier@state_base_reconnaissance_percentage_token max=100 }
    }
}

HS_add_daily_combined_modifiers = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = {
            limit = { NOT = { check_variable = { modifier@state_agitation_token=0 } } }
            add_to_variable = { state_agitation = modifier@state_agitation_token }
        }
        else = { subtract_from_variable = { state_agitation=0.10 } }
        if = {
            limit = { NOT = { check_variable = { modifier@state_andartes_token=0 } } }
            add_to_variable = { andartes = modifier@state_andartes_token }
        }
        if = {
            limit = { NOT = { check_variable = { THIS.modifier@state_daily_reconnaissance_percentage_token=0 } } }
            add_to_variable = { THIS.reconnaissance_level = THIS.modifier@state_daily_reconnaissance_percentage_token }
        }
        else = { subtract_from_variable = { THIS.reconnaissance_level=0.25 } }
        clamp_variable = { var=THIS.reconnaissance_level min=THIS.modifier@state_base_reconnaissance_percentage_token max=100 }
    }
}

#####[Resistance]#####

#####[Garrisons]#####
####[Weekly Rotation Between States]#### !!!Crete/Aegean/Ionians/Evros have static garrisons!!! !!!Bulgarians Keep Static Garrisons on their States, unless they are given more land!!!
##[Normal Behavior - Patrol]##
##[Normal Behavior - Plunder]##
##[Normal Behavior - Binge]##
##[Normal Behavior - Doze off]##
##[Normal Behavior - Alert]##
##[Agitated Behavior - Reprisals]##
##[Agitated Behavior - Clash-Seeking]##
##[Agitated Behavior - Partisan-Sweeping & Info-Gathering]##
##[Agitated Behavior - Terrorize Populace]##
##[Agitated Behavior - ]##
#####[Personality]#####
####[ Normal Behavior ]####
###[Normal - Peaceful]###
##-30% patrol, 30% alert, 20% doze-off, 10% binge, 10% plunder, base span per mission (kommandatur/com_piazza): 10days.
###[Normal - Indulgent]###
##-5% patrol, 5% alert, 40% doze-off, 40% binge, 10% plunder, base span per mission (kommandatur/com_piazza): 15days.
###[Normal - Defiling]###
##-0% patrol, 10% alert, 20% doze-off, 30% binge, 40% plunder, base span per mission (kommandatur/com_piazza): 7days.
###[Normal - Cautious]###
##-5% patrol, 80% alert, 5% doze-off, 5% binge, 5% plunder, base span per mission (kommandatur/com_piazza): 12days, AVOIDS: states with high andartes' strength.
####[ Agitated Behavior ]####
###[Agitated - Vengeful]###
##-Only triggered upon killings of German/Italian/Bulgarian soldiers, or on other extreme circumstances. 100%-Reprisals, base span per mission (kommandatur/com_piazza): 10days.
###[Agitated - Hedonistic]###
##-33% binge, 33% plunder, 33% terrorize populace.
###[Agitated - Sadistic]###
##-33% plunder, 67% terrorize populace
###[Agitated - Pragmatic]###
##-50% Clash-Seeking, 50% Partisan-Sweeping & Info-Gathering
##

######[]#####

HS_GAR_fire_respective_state_events = {
    if = { 
        limit = { check_variable={ THIS.GAR_BEH@GRE = 2 } } 
        gre_hs_xor=yes
        for_each_scope_loop = {
            array=targeted_states_for_plunder
            state_event = { id=hellas.1016 days=0 }
        }
    }
    else_if = { 
        limit = { check_variable={ THIS.GAR_BEH@GRE = 3 } } 
        gre_hs_xor=yes
        for_each_scope_loop = {
            array=global.greek_occupied_states_all

            if = {
                limit = { check_variable = { THIS.controller=PREV.original_tag } }
                random_list = {
                    seed=random
                    90 = {}
                    10 = { state_event = { id=hellas.1017 days=0 } }
                }
            }
        }
    }
}

HS_GAR_update_personality_THIS = {
    # This function selects personality for occupier depending on certain variables.
    # Variables Used: ANGER@GRE, AGI@GRE, CALM_DAYS@GRE, 
    set_variable = { THIS.PERSONALITY@GRE = 1 }
    HS_GAR_PER_CHANCE_calc_peaceful_b1 = yes
    HS_GAR_PER_CHANCE_calc_indulgent_b2 = yes
    HS_GAR_PER_CHANCE_calc_defiling_b3 = yes
    HS_GAR_PER_CHANCE_calc_cautious_b4 = yes
    #HS_GAR_PER_CHANCE_calc_vengeful_b5 = yes
    #HS_GAR_PER_CHANCE_calc_hedonistic_b6 = yes
    #HS_GAR_PER_CHANCE_calc_sadistic_b7 = yes
    #HS_GAR_PER_CHANCE_calc_pragmatic_b8 = yes
    random_list = {
        seed=random
        #log=yes
        b1 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=1 }} }  set_variable={ THIS.PERSONALITY@GRE = 1 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 10 } } }
        b2 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=2 }} }  set_variable={ THIS.PERSONALITY@GRE = 2 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 15 } } }
        b3 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=3 }} }  set_variable={ THIS.PERSONALITY@GRE = 3 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 7  } } }
        b4 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=4 }} }  set_variable={ THIS.PERSONALITY@GRE = 4 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 12 } } }
        b5 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=5 }} }  set_variable={ THIS.PERSONALITY@GRE = 5 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 10 } } }
        b6 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=6 }} }  set_variable={ THIS.PERSONALITY@GRE = 6 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 10 } } }
        b7 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=7 }} }  set_variable={ THIS.PERSONALITY@GRE = 7 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 10 } } }
        b8 = { if = { limit={ NOT={check_variable={ THIS.PERSONALITY@GRE=8 }} }  set_variable={ THIS.PERSONALITY@GRE = 8 } set_variable={ THIS.PERSONALITY_DAYS@GRE = 0 } set_variable={ THIS.GAR_BASE_MISSION_TIMEOUT = 10 } } }
    }
}

HS_GAR_PER_CHANCE_calc_peaceful_b1 = {                              # y = (200 - AGI - ANGER + 3.334*calm_days)/3
    set_temp_variable = { x=calm_days@GRE }
    clamp_temp_variable = { var=x min=0 max=90 }
    multiply_temp_variable = { x=3.334 }
    set_temp_variable = { b1=x }
    add_to_temp_variable = { b1=200 }
    subtract_from_temp_variable = { b1=ANGER@GRE }
    subtract_from_temp_variable = { b1=AGI@GRE }
    divide_temp_variable = { b1=3 }
    clamp_temp_variable = { var=b1 min=0 }
}

HS_GAR_PER_CHANCE_calc_indulgent_b2 = {
    if = { 
        limit = { check_variable = { THIS.PERSONALITY@GRE = 1 } } 
        set_temp_variable = { b2=b1 } 
        set_temp_variable = { q=THIS.PERSONALITY_DAYS@GRE }
        log="[?q] - [?THIS.PERSONALITY_DAYS@GRE]"
        if = { limit = { check_variable={ var=THIS.PERSONALITY_DAYS@GRE value=7 compare=less_than_or_equals } } multiply_temp_variable={ q=2 } }
        else_if = { limit = { check_variable={ var=THIS.PERSONALITY_DAYS@GRE value=14 compare=less_than_or_equals } } multiply_temp_variable={ q=7 } }
        else = { multiply_temp_variable={ q=12 } }
        add_to_temp_variable = { b2=q }
        divide_temp_variable = { b2=2 }
        clamp_temp_variable = { var=b2 min=0 }
    }
    else = {
        set_temp_variable = { b2=0 }
    }
}

HS_GAR_PER_CHANCE_calc_defiling_b3 = {
    if = { limit={ check_variable={ var=THIS.AGI@GRE value=30 compare=less_than} } set_temp_variable={ b3=THIS.AGI@GRE } multiply_temp_variable={ b3=3.334 } }
    else_if = { limit={ check_variable={ var=THIS.AGI@GRE value=60 compare=less_than} } set_temp_variable={ b3=THIS.AGI@GRE } multiply_temp_variable={ b3=-1.5 } }
    else = { set_temp_variable = { b3=0 } }
    ############################################
    set_temp_variable = { x=THIS.ANGER@GRE }
    add_to_temp_variable = { x=3.334 }
    add_to_temp_variable = { b3=x }
    ############################################
    set_temp_variable = { x=calm_days@GRE }
    clamp_temp_variable = { var=x min=0 max=90 }
    multiply_temp_variable = { x=3.334 }
    ############################################
    set_temp_variable = { x=OCC_BINGE_PAST2 }
    add_to_temp_variable = { x=OCC_PLUNDER_PAST2 }
    if = { limit={ check_variable={ var=x value=2 compare=less_than_or_equals} } add_to_temp_variable={ b3=300 } }
    else_if = { limit={ check_variable={ var=x value=4 compare=equals} } add_to_temp_variable={ b3=100 } }
    else_if = { limit={ check_variable={ var=x value=6 compare=equals} } add_to_temp_variable={ b3=50 } }
    else = { add_to_temp_variable={ b3=25 } }
    ############################################
    divide_temp_variable = { b3=4 }
    clamp_temp_variable = { var=b3 min=0 }
}

HS_GAR_PER_CHANCE_calc_cautious_b4 = {
    set_temp_variable = { x=calm_days@GRE }
    clamp_temp_variable = { var=x min=0 max=90 }
    multiply_temp_variable = { x=-3.334 }
    set_temp_variable = { b4=x }
    set_temp_variable = { x=4 }
    multiply_temp_variable = { b4=AGI@GRE }
    add_to_temp_variable = { b4=x }
    divide_temp_variable = { b4=2 }
    clamp_temp_variable = { var=b4 min=0 }
}

HS_GAR_behavior_clear_variables_for_next = {
    if = {
        limit = { check_variable={ THIS.GAR_BEH@GRE=2 } }
        clear_variable = states_targeted
        #clear_array = targeted_states_for_plunder
    }
}

HS_GAR_behavior_patrol = {
    # In this behavior scenario, a good chunk of forces goes out on patrol (countryside) and the rest stick to their barracks and close-by commodities.
    # Crete is both a town + countryside, but solely relies on its garisson.
    set_variable = { THIS.GAR_BEH@GRE = 1 }
    HS_GAR_calculate_total_garrison_in_mainland_states_for_THIS = yes
    HS_GAR_calculate_state_weights_for_behavior_THIS = yes
    ##
    #HS_GAR_distribute_forces_based_on_behavior_THIS = yes
}

HS_GAR_behavior_plunder = {
    # In this behavior scenario, a good chunk of forces goes out to plunder the selected number of states and the rest stick to their barracks and close-by commodities.
    # Crete is both a town + countryside, but solely relies on its garisson.
    set_variable = { THIS.GAR_BEH@GRE = 2 }
    HS_GAR_calculate_total_garrison_in_mainland_states_for_THIS = yes
    HS_GAR_BEH_select_plunder_targets_THIS = yes
    HS_GAR_calculate_state_weights_for_behavior_THIS = yes
    ##
    #HS_GAR_distribute_forces_based_on_behavior_THIS = yes
}

HS_GAR_behavior_binge = {
    set_variable = { THIS.GAR_BEH@GRE = 3 }
    # In this behavior scenario, Germans sit where they are and enjoy life by eating and drinking too much, causing random bad events on states based on certain conditions.
    # These events might increase agitation, or even increase famine level. It triggers for ALL states, but chance is low so only some will be affected.
}

HS_GAR_behavior_doze = {
    set_variable = { THIS.GAR_BEH@GRE = 4 }
    # In this behavior scenario, Germans sit where they are and enjoy life by doing absolutely nothing. Negative debuffs because they are too aloof.
}

HS_GAR_behavior_alert = {
    # In this behavior scenario, Germans will go on full alert and stand still keeping an eye for resistance acts. Their combat bonuses increase, while even recon. missions
    # become harder. They will draw back in their bases and prepare.
    set_variable = { THIS.GAR_BEH@GRE = 5 }
    HS_GAR_calculate_total_garrison_in_mainland_states_for_THIS = yes
    HS_GAR_calculate_state_weights_for_behavior_THIS = yes
    ##
    #HS_GAR_distribute_forces_based_on_behavior_THIS = yes
}

HS_GAR_select_behavior_THIS = {
    if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 1 } }         # Peaceful
        random_list = {
            seed=random
            log=yes
            30 = { HS_GAR_behavior_patrol=yes }
            30 = { HS_GAR_behavior_alert=yes }
            20 = { HS_GAR_behavior_doze=yes }
            10 = { HS_GAR_behavior_binge=yes }
            10 = { HS_GAR_behavior_plunder=yes }
        }
    }
    else_if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 2 } }          # Indulgent
        random_list = {
            seed=random
            log=yes
            5 = { HS_GAR_behavior_patrol=yes }
            5 = { HS_GAR_behavior_alert=yes }
            40 = { HS_GAR_behavior_doze=yes }
            40 = { HS_GAR_behavior_binge=yes }
            10 = { HS_GAR_behavior_plunder=yes }
        }
    }
    else_if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 3 } }           # Defiling
        random_list = {
            seed=random
            log=yes
            0 = { HS_GAR_behavior_patrol=yes }
            10 = { HS_GAR_behavior_alert=yes }
            20 = { HS_GAR_behavior_doze=yes }
            30 = { HS_GAR_behavior_binge=yes }
            40 = { HS_GAR_behavior_plunder=yes }
        }
    }
    else_if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 4 } }            # Cautious
        random_list = {
            seed=random
            30 = { HS_GAR_behavior_patrol=yes }
            30 = { HS_GAR_behavior_alert=yes }
            20 = { HS_GAR_behavior_doze=yes }
            10 = { HS_GAR_behavior_binge=yes }
            10 = { HS_GAR_behavior_plunder=yes }
        }
    }
    else_if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 5 } }
        random_list = {
            seed=random
            5 = { HS_GAR_behavior_patrol=yes }
            80 = { HS_GAR_behavior_alert=yes }
            5 = { HS_GAR_behavior_doze=yes }
            5 = { HS_GAR_behavior_binge=yes }
            5 = { HS_GAR_behavior_plunder=yes }
        }
    }
    else_if = {
        limit = { check_variable={ THIS.PERSONALITY@GRE = 6 } }
        random_list = {
            seed=random
            30 = { HS_GAR_behavior_patrol=yes }
            30 = { HS_GAR_behavior_alert=yes }
            20 = { HS_GAR_behavior_doze=yes }
            10 = { HS_GAR_behavior_binge=yes }
            10 = { HS_GAR_behavior_plunder=yes }
        }
    }
}

HS_GAR_distribute_forces_based_on_behavior_THIS = {
    for_each_loop = {
        array = THIS.hs_gar_current_behavior_weighted_states_id

        random_state = {
            limit = { state=v }
            set_temp_variable = { x = PREV.hs_gar_current_behavior_weighted_manpower_states_adj_value^i }
            multiply_temp_variable = { x = PREV.GAR_MAIN@GRE }
            set_variable = { gar = x }
            ###
            set_temp_variable = { x = PREV.hs_gar_current_behavior_weighted_equipment_states_adj_value^i }
            multiply_temp_variable = { x = PREV.infequip_MAIN@GRE }
            set_variable = { gar_infequip = x }
            ###
            set_temp_variable = { x = PREV.hs_gar_current_behavior_weighted_equipment_states_adj_value^i }
            multiply_temp_variable = { x = PREV.supequip_MAIN@GRE }
            set_variable = { gar_supequip = x }
            ###
            set_temp_variable = { x = PREV.hs_gar_current_behavior_weighted_equipment_states_adj_value^i }
            multiply_temp_variable = { x = PREV.artequip_MAIN@GRE }
            set_variable = { gar_artequip = x }
            HS_GAR_STATE_calculate_garrison_equipment_ratio=yes
        }
    }
}

HS_GAR_calculate_state_weights_for_behavior_THIS = {
    set_temp_variable = { total_state_manpower_score=0 }
    set_temp_variable = { total_state_equipment_score=0 }
    clear_array = THIS.hs_gar_current_behavior_weighted_states_id
    clear_array = THIS.hs_gar_current_behavior_weighted_manpower_states_value
    clear_array = THIS.hs_gar_current_behavior_weighted_manpower_states_adj_value
    clear_array = THIS.hs_gar_current_behavior_weighted_equipment_states_value
    clear_array = THIS.hs_gar_current_behavior_weighted_equipment_states_adj_value

    for_each_scope_loop = {
        array=global.greek_mainland_states_all
    
        if = {
            limit = { check_variable = { THIS.controller=PREV.original_tag } }
            if = {
                limit = { check_variable = { PREV.GAR_BEH@GRE = 1 } }                                                                                                           #### PATROL

                set_temp_variable = { state_manpower_score_is=100 }
                set_temp_variable = { state_equipment_score_is=100 }
                set_temp_variable = { manpower_weight=1 }
                set_temp_variable = { equipment_weight=1 }
                if = { limit={check_variable={base>0} } add_to_temp_variable={manpower_weight=-0.2} add_to_temp_variable={equipment_weight=-0.5} }                                  # Base 20%/50% less in bases
                if = { limit={has_dynamic_modifier={modifier=plundered_state} } add_to_temp_variable={manpower_weight=-0.2} add_to_temp_variable={equipment_weight=-0.2} }          # Base 20%/20$ less in plundered states
                if = { limit={has_dynamic_modifier={modifier=terrorized_populace} } add_to_temp_variable={manpower_weight=-0.15} add_to_temp_variable={equipment_weight=-0.15} }    # Base 15%/15% less in terrorized states
                if = { limit={has_dynamic_modifier={modifier=reprisals_massacres} } add_to_temp_variable={manpower_weight=-0.40} add_to_temp_variable={equipment_weight=-0.4} }     # Base 40%/40% less in massacred states
                if = { limit={has_dynamic_modifier={modifier=res_sabotaged} } add_to_temp_variable={manpower_weight=0.25} add_to_temp_variable={equipment_weight=0.4} }             # Base 25%/40% more in res sabotaged states
                if = { limit={has_dynamic_modifier={modifier=fac_sabotaged} } add_to_temp_variable={manpower_weight=0.40} add_to_temp_variable={equipment_weight=0.6} }             # Base 40%/60% more in fac sabotaged states
                multiply_temp_variable = { state_manpower_score_is=manpower_weight }                                                                                                # Base % found here
                multiply_temp_variable = { state_equipment_score_is=equipment_weight }
                multiply_temp_variable = { state_manpower_score_is=state_agitation }                                                                                                # State Agitation
                multiply_temp_variable = { state_equipment_score_is=state_agitation }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_states_id value=THIS.id }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_manpower_states_value value=state_manpower_score_is }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_equipment_states_value value=state_equipment_score_is }
                #log="[THIS.GetName] - MS:[?state_manpower_score_is], ES:[?state_equipment_score_is]"
            }
            else_if = {
                limit = { check_variable = { PREV.GAR_BEH@GRE = 2 } }                                                                                                            #### PLUNDER
                
                set_temp_variable = { state_manpower_score_is=100 }
                set_temp_variable = { state_equipment_score_is=100 }
                set_temp_variable = { manpower_weight=1 }
                set_temp_variable = { equipment_weight=1 }
                if = { limit={check_variable={base>0} } add_to_temp_variable={manpower_weight=0.5} add_to_temp_variable={equipment_weight=0.5} }                                    # Base 50%/50% more in bases
                if = { 
                    limit={ is_in_array={ array=PREV.targeted_states_for_plunder value=THIS.id } }
                    add_to_temp_variable={ manpower_weight=3.00 } 
                    add_to_temp_variable={ equipment_weight=4.00 }                                                                                                                  # Base 300%/400% more
                }
                multiply_temp_variable = { state_manpower_score_is=manpower_weight }                                                                                                # Base % found here
                multiply_temp_variable = { state_equipment_score_is=equipment_weight }
                multiply_temp_variable = { state_manpower_score_is=state_agitation }                                                                                                # State Agitation
                multiply_temp_variable = { state_equipment_score_is=state_agitation }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_states_id value=THIS.id }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_manpower_states_value value=state_manpower_score_is }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_equipment_states_value value=state_equipment_score_is }
                #log="[THIS.GetName] - MS:[?state_manpower_score_is], ES:[?state_equipment_score_is]"
            }
            if = {
                limit = { check_variable = { PREV.GAR_BEH@GRE = 5 } }                                                                                                           #### PATROL

                set_temp_variable = { state_manpower_score_is=100 }
                set_temp_variable = { state_equipment_score_is=100 }
                set_temp_variable = { manpower_weight=1 }
                set_temp_variable = { equipment_weight=1 }
                ################[Add Resource Bonus to base Value]##############
                calculate_state_resource_importance_ONLY = yes
                multiply_temp_variable = { total_worth=2 }                                                                                                                          # Base 200% more important resource defence.
                add_to_temp_variable = { state_manpower_score_is=total_worth }
                add_to_temp_variable = { state_equipment_score_is=total_worth }
                ################################################################
                if = { limit={check_variable={base>0} } add_to_temp_variable={manpower_weight=1.0} add_to_temp_variable={equipment_weight=1.0} }                                    # Base 200%/200% more in bases
                if = { limit={has_dynamic_modifier={modifier=res_sabotaged} } add_to_temp_variable={manpower_weight=0.5} add_to_temp_variable={equipment_weight=0.5} }              # Base 50%/50% more in res sabotaged states
                if = { limit={has_dynamic_modifier={modifier=fac_sabotaged} } add_to_temp_variable={manpower_weight=0.5} add_to_temp_variable={equipment_weight=0.5} }              # Base 50%/50% more in fac sabotaged states
                multiply_temp_variable = { state_manpower_score_is=manpower_weight }                                                                                                # Base % found here
                multiply_temp_variable = { state_equipment_score_is=equipment_weight }
                multiply_temp_variable = { state_manpower_score_is=state_agitation }                                                                                                # State Agitation
                multiply_temp_variable = { state_equipment_score_is=state_agitation }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_states_id value=THIS.id }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_manpower_states_value value=state_manpower_score_is }
                add_to_array = { array=PREV.hs_gar_current_behavior_weighted_equipment_states_value value=state_equipment_score_is }
                #log="[THIS.GetName] - MS:[?state_manpower_score_is], ES:[?state_equipment_score_is]"
            }
        }
    }
    for_each_loop = { array=THIS.hs_gar_current_behavior_weighted_manpower_states_value add_to_temp_variable={ total_state_manpower_score=v } }
    for_each_loop = { array=THIS.hs_gar_current_behavior_weighted_equipment_states_value add_to_temp_variable={ total_state_equipment_score=v } }
    #log="[THIS.GetName] - TMS:[?total_state_manpower_score], TES:[?total_state_equipment_score]"
    for_each_loop = {
        array = THIS.hs_gar_current_behavior_weighted_manpower_states_value 
        
        set_temp_variable = { x = v }
        divide_temp_variable = { x = total_state_manpower_score }
        add_to_array = { array = THIS.hs_gar_current_behavior_weighted_manpower_states_adj_value value = x }
    }
    for_each_loop = {
        array = THIS.hs_gar_current_behavior_weighted_equipment_states_value 
        
        set_temp_variable = { x = v }
        divide_temp_variable = { x = total_state_equipment_score }
        add_to_array = { array = THIS.hs_gar_current_behavior_weighted_equipment_states_adj_value value = x }
    }
}

HS_GAR_BEH_select_plunder_targets_THIS = {
    # This function selects a set number of states depending on certain parameters.
    HS_GAR_calculate_garrison_ratios_THIS = yes
    ###[Phase #1: Select how many states to plunder]###
    if = {
        limit = { check_variable={total_ratio<2.00 } }
        set_temp_variable = { b1=50 }
        multiply_temp_variable = { b1=total_ratio }  # b1=50x
        set_temp_variable = { b2=100 }
        subtract_from_temp_variable = { b2=b1 }
        random_list = {
            seed=random
            var:b1 = { set_variable = { THIS.states_targeted@GRE=2 } }
            var:b2 = { set_variable = { THIS.states_targeted@GRE=1 } }
        }
    }
    else = {
        set_temp_variable = { b1=50 }
        multiply_temp_variable = { b1=total_ratio }
        subtract_from_temp_variable = { b1=100 }     # b1=50x - 100
        set_temp_variable = { b2=100 }
        subtract_from_temp_variable = { b2=b1 }
        random_list = {
            seed=random
            var:b1 = { set_variable = { THIS.states_targeted@GRE=3 } }
            var:b2 = { set_variable = { THIS.states_targeted@GRE=2 } }
        }
    }
    ###[Phase #2: Select which states to plunder]###
    clear_array = THIS.targeted_states_for_plunder
    clear_array = THIS.hs_gar_targeted_states_for_plunder_id
    clear_array = THIS.hs_gar_targeted_states_for_plunder_value
    for_each_scope_loop = {
        array=global.greek_occupied_states_all 

        if = {
            limit = { check_variable = { THIS.controller=PREV.original_tag } }
            #[Add Resource Bonus to base Value]#
            calculate_state_resource_importance_ONLY = yes
            set_temp_variable = { state_score_is=100 }
            set_temp_variable = { state_weight_is=1 }
            add_to_temp_variable = { state_score_is=total_worth }
            ####################################
            if = { limit={check_variable={base>0} } add_to_temp_variable={state_weight_is=-0.2} }                                           # Base 20% less in bases
            if = { limit={has_dynamic_modifier={modifier=plundered_state} } add_to_temp_variable={state_weight_is=-0.8} }                   # Base 80$ less in plundered states
            if = { limit={has_dynamic_modifier={modifier=terrorized_populace} } add_to_temp_variable={state_weight_is=-0.15} }              # Base 5% less in terrorized states
            if = { limit={has_dynamic_modifier={modifier=reprisals_massacres} } add_to_temp_variable={state_weight_is=-0.40} }              # Base 5% less in massacred states
            multiply_temp_variable = { state_score_is=state_weight_is }
            add_to_array = { array=PREV.hs_gar_targeted_states_for_plunder_id value=THIS.id }
            add_to_array = { array=PREV.hs_gar_targeted_states_for_plunder_value value=state_score_is }
        }
    }
    resize_temp_array = { array=plunder_states_cnt value=1 size=var:THIS.states_targeted@GRE }
    for_each_loop = {
        array = plunder_states_cnt

        find_highest_in_array = { array=THIS.hs_gar_targeted_states_for_plunder_value value=junk index=highest_index }
        set_variable = { THIS.hs_gar_targeted_states_for_plunder_value^highest_index = -1000 }
        add_to_array = { THIS.targeted_states_for_plunder = THIS.hs_gar_targeted_states_for_plunder_id^highest_index }
        #log="[?THIS.targeted_states_for_plunder^i.GetName] - [?highest_index] - [?junk]"
    }                                                                                                                                        # Now our array ONLY contains the to be plundered states.
}

HS_GAR_calculate_garrison_ratios_THIS = {
    # This function calculates garrison's manpower and equipment ratios.
    set_temp_variable = { gar_mratio = THIS.GAR@GRE }
    divide_temp_variable = { gar_mratio = THIS.REQ_GAR@GRE }
    #
    set_temp_variable = { x = THIS.infequip@GRE }
    divide_temp_variable = { x = THIS.REQ_infequip@GRE }
    add_to_temp_variable = { gar_eratio = x }
    #
    set_temp_variable = { x = THIS.supequip@GRE }
    divide_temp_variable = { x = THIS.REQ_supequip@GRE }
    add_to_temp_variable = { gar_eratio = x }
    #
    set_temp_variable = { x = THIS.artequip@GRE }
    divide_temp_variable = { x = THIS.REQ_artequip@GRE }
    add_to_temp_variable = { gar_eratio = x }
    #
    divide_temp_variable = { gar_eratio = 3 }
    #
    set_temp_variable = { total_ratio = gar_mratio }
    add_to_temp_variable = { total_ratio = gar_eratio }
    divide_temp_variable = { total_ratio = 2 }
}

HS_GAR_calculate_total_garrison_in_mainland_states_for_THIS = {
    clear_variable = THIS.GAR_MAIN@GRE
    clear_variable = THIS.infequip_MAIN@GRE
    clear_variable = THIS.supequip_MAIN@GRE
    clear_variable = THIS.artequip_MAIN@GRE
    for_each_scope_loop = {
        array=global.greek_mainland_states_all

        if = {
            limit = { check_variable = { THIS.controller=PREV.original_tag } }
            add_to_variable = { PREV.GAR_MAIN@GRE = THIS.GAR }
            add_to_variable = { PREV.infequip_MAIN@GRE = THIS.GAR_INFEQUIP }
            add_to_variable = { PREV.supequip_MAIN@GRE = THIS.GAR_SUPEQUIP }
            add_to_variable = { PREV.artequip_MAIN@GRE = THIS.GAR_ARTEQUIP }
        }
    }
}

HS_GAR_calculate_state_weights_for_THIS = {
    set_temp_variable = { total_state_score = 0 }
    clear_array = THIS.hs_gar_weighted_states_id
    clear_array = THIS.hs_gar_weighted_states_value
    clear_array = THIS.hs_gar_weighted_states_adj_value

    for_each_scope_loop = {
        array=global.greek_occupied_states_all
    
        if = {
            limit = { check_variable = { THIS.controller=PREV.original_tag } }

            if = { limit = { state=47 } set_temp_variable = { state_score_is=30 } }
            else_if = { limit = { state=839 } set_temp_variable = { state_score_is=25 } }
            else_if = { limit = { state=182 } set_temp_variable = { state_score_is=20 } }
            else = { set_temp_variable = { state_score_is=5 } }
            if = {
                limit = { is_island_state=yes NOT={state=182} }
                add_to_temp_variable = { state_score_is=-3 }
            }
            calculate_state_resource_importance_ONLY = yes
            add_to_temp_variable = { state_score_is=total_worth }
            add_to_array = { array=PREV.hs_gar_weighted_states_id value=THIS.id }
            add_to_array = { array=PREV.hs_gar_weighted_states_value value=state_score_is }
        }
    }
    for_each_loop = { array=THIS.hs_gar_weighted_states_value add_to_temp_variable={ total_state_score=v } }
    for_each_loop = {
        array = THIS.hs_gar_weighted_states_value 
        
        set_temp_variable = { x = v }
        divide_temp_variable = { x = total_state_score }
        add_to_array = { array = THIS.hs_gar_weighted_states_adj_value value = x }
    }
}

HS_GAR_calculate_state_weights = {
    set_temp_variable = { total_state_score = 0 }
    clear_array = GRE.hs_gar_weighted_states_id
    clear_array = GRE.hs_gar_weighted_states_value
    clear_array = GRE.hs_gar_weighted_states_adj_value

    if = {
        limit = { OR = { check_variable={global.HS_GERITA_GAR_coordination=0} NOT={OR={original_tag=GER original_tag=ITA}} } }
        for_each_scope_loop = {
            array=global.greek_occupied_states_all
        
            if = {
                limit = { check_variable = { THIS.controller=PREV.original_tag } }

                if = { limit = { state=47 } set_temp_variable = { state_score_is=30 } }
                else_if = { limit = { state=839 } set_temp_variable = { state_score_is=25 } }
                else_if = { limit = { state=182 } set_temp_variable = { state_score_is=20 } }
                else = { set_temp_variable = { state_score_is=5 } }
                if = {
                    limit = {
                        is_island_state = yes
                        NOT = { state=182 }
                    }
                    add_to_temp_variable = { state_score_is=-3 }
                }
                calculate_state_resource_importance_ONLY = yes                                      #[With 7 INF and all decisions between 2 and 11]#
                add_to_temp_variable = { state_score_is=total_worth }
                GRE = { add_to_array = { array=hs_gar_weighted_states_id value=PREV.id } }
                GRE = { add_to_array = { array=hs_gar_weighted_states_value value=state_score_is } }
            }
        }
    }
    for_each_loop = { array=GRE.hs_gar_weighted_states_value add_to_temp_variable={ total_state_score=v } }
    #log="TOTAL STATE SCORE - [?total_state_score]"
    for_each_loop = {
        array = GRE.hs_gar_weighted_states_value 
        
        set_temp_variable = { x = v }
        divide_temp_variable = { x = total_state_score }
        add_to_array = { array = GRE.hs_gar_weighted_states_adj_value value = x }
    }
}

###################################[Main Hellenic State Garrison Functions]###################################

HS_GAR_monthly_replenishment_effect_for_THIS = {
    log="Monthly Replenishment Stats for [?THIS.GetNameDef]"
    HS_GAR_calculate_required_manpower_for_THIS = yes
    HS_GAR_calculate_required_equipment_for_THIS = yes
    HS_calculate_manpower_ratio_for_THIS = yes
    HS_calculate_equipment_ratio_for_THIS = yes
    HS_GAR_calculate_replenishment_quotas_for_THIS = yes
    HS_GAR_monthly_distributions_effect = yes
}

HS_GAR_overall_distribution_for_THIS = {
    # This function takes the entire pool of soldiers/equipment and distributes them based on set conditions.
    # Crete, Evros, Ionian and Aegean Islands have static Garrisons.
    HS_GAR_calculate_state_weights_for_THIS = yes
    for_each_loop = {
        array = THIS.hs_gar_weighted_states_id

        random_state = {
            limit = { state=v }
            set_temp_variable = { x = PREV.hs_gar_weighted_states_adj_value^i }
            multiply_temp_variable = { x = PREV.GAR@GRE }
            set_variable = { gar = x }
            set_temp_variable = { x = PREV.hs_gar_weighted_states_adj_value^i }
            multiply_temp_variable = { x = PREV.infequip@GRE }
            set_variable = { gar_infequip = x }
            set_temp_variable = { x = PREV.hs_gar_weighted_states_adj_value^i }
            multiply_temp_variable = { x = PREV.supequip@GRE }
            set_variable = { gar_supequip = x }
            set_temp_variable = { x = PREV.hs_gar_weighted_states_adj_value^i }
            multiply_temp_variable = { x = PREV.artequip@GRE }
            set_variable = { gar_artequip = x }
            ###################################################################
            HS_GAR_STATE_calculate_garrison_equipment_ratio = yes
            #log = "LOG ME [?PREV.hs_gar_weighted_states_adj_value^i] - [?i]"
        }
    }
}

###################################[Auxillary Functions]###################################

HS_GAR_STATE_calculate_garrison_equipment_ratio = {
    # This function calculates garisson equipment ratio in state.
    set_temp_variable = { y = 0 }
    set_temp_variable = { x = gar_artequip }
    multiply_temp_variable = { x = 166.667 }
    add_to_temp_variable = { y = x }
    set_temp_variable = { x = gar_supequip }
    multiply_temp_variable = { x = 50 }
    add_to_temp_variable = { y = x }
    set_temp_variable = { x = gar_infequip }
    multiply_temp_variable = { x = 10 }
    add_to_temp_variable = { y = x }
    divide_temp_variable = { y = 3 }
    divide_temp_variable = { y = gar }
    set_variable = { GAR_RATIO = y }
}

HS_GAR_monthly_distributions_effect = {
    # This function either replenishes or recalls troops based on certain conditions.
    ###[Manpower]###
    set_temp_variable = { this_gar = THIS.GAR@GRE }
    set_temp_variable = { this_req_gar = THIS.REQ_GAR@GRE }
    multiply_temp_variable = { this_req_gar = THIS.REP_MAN_PER@GRE }
    subtract_from_temp_variable = { this_req_gar = this_gar }
    ###[Equipment]###
    set_temp_variable = { this_infequip = THIS.infequip@GRE }
    set_temp_variable = { this_req_infequip = THIS.REQ_infequip@GRE }
    multiply_temp_variable = { this_req_infequip = THIS.REP_EQ_INF_PER@GRE }
    subtract_from_temp_variable = { this_req_infequip = this_infequip }
    set_temp_variable = { this_supequip = THIS.supequip@GRE } 
    set_temp_variable = { this_req_supequip = THIS.REQ_supequip@GRE }
    multiply_temp_variable = { this_req_supequip = THIS.REP_EQ_SUP_PER@GRE }
    subtract_from_temp_variable = { this_req_supequip = this_supequip }
    set_temp_variable = { this_artequip = THIS.artequip@GRE }
    set_temp_variable = { this_req_artequip = THIS.REQ_artequip@GRE }
    multiply_temp_variable = { this_req_artequip = THIS.REP_EQ_ART_PER@GRE }
    subtract_from_temp_variable = { this_req_artequip = this_artequip }
    ###[Call Effects]###
    HS_GAR_monthly_distributions_replenish_or_recall_manpower_effect = yes
    HS_GAR_monthly_distributions_replenish_or_recall_equipment_effect = yes
    log="Troop & Equipment Distribution:"
    log=" Manpower Moved: [?this_req_gar]"
    log=" InfEquip Moved: [?this_req_infequip]"
    log=" SupEquip Moved: [?this_req_supequip]"
    log=" ArtEquip Moved: [?this_req_artequip]"
    log="------------------------------------------------"
}

HS_GAR_monthly_distributions_replenish_or_recall_manpower_effect = {
    if = {
        limit = { THIS = { has_manpower > this_req_gar } }
        round_temp_variable = this_req_gar
        add_to_temp_variable = { this_gar = this_req_gar }
        multiply_temp_variable = { this_req_gar = -1 }
        THIS = { add_manpower = x }
        set_variable = { THIS.GAR@GRE = this_gar }
    }
}

HS_GAR_monthly_distributions_replenish_or_recall_equipment_effect = {
    if = {
        limit = { check_variable = { THIS.num_equipment@infantry_equipment > this_req_infequip } }
        round_temp_variable = this_req_infequip
        add_to_temp_variable = { this_infequip = this_req_infequip }
        multiply_temp_variable = { this_req_infequip = -1 }
        THIS = { 
            add_equipment_to_stockpile = {
                type = infantry_equipment
                amount = this_req_infequip
            }
        }
        set_variable = { THIS.infequip@GRE = this_infequip }
    }
    if = {
        limit = { check_variable = { THIS.num_equipment@support_equipment > this_req_supequip } }
        round_temp_variable = this_req_supequip
        add_to_temp_variable = { this_supequip = this_req_supequip }
        multiply_temp_variable = { this_req_supequip = -1 }
        THIS = { 
            add_equipment_to_stockpile = {
                type = support_equipment
                amount = this_req_supequip
            }
        }
        set_variable = { THIS.supequip@GRE = this_supequip }
    }
    if = {
        limit = { check_variable = { THIS.num_equipment@artillery_equipment > this_req_artequip } }
        round_temp_variable = this_req_artequip
        add_to_temp_variable = { this_artequip = this_req_artequip }
        multiply_temp_variable = { this_req_artequip = -1 }
        THIS = { 
            add_equipment_to_stockpile = {
                type = artillery_equipment
                amount = this_req_artequip
            }
        }
        set_variable = { THIS.artequip@GRE = this_artequip }
    }
}

HS_GAR_calculate_agitation_level_for_THIS = {
    set_temp_variable = { agi_cnt=0 }
    set_temp_variable = { num_of_controlled_states=0 }
    for_each_scope_loop = {
        array = global.greek_occupied_states_all

        if = {
            limit = { is_controlled_by = PREV }
            set_temp_variable = { x = state_agitation }
            multiply_temp_variable = { x = state_agitation_multiplier }
            add_to_temp_variable = { agi_cnt = x }
            add_to_temp_variable = { num_of_controlled_states = state_agitation_multiplier }
        }
    }
    divide_temp_variable = { agi_cnt = num_of_controlled_states }
    set_variable = { THIS.AGI@GRE = agi_cnt }
    #################################################################
    log="------------------------"
    log="The agitation level met on [THIS.GetNameDef] states is [?THIS.AGI@GRE]"
}

HS_GAR_get_manpower_formula = {
    if = {
        limit = { original_tag = GER }
        set_temp_variable = { base = 40000 }
        set_temp_variable = { multip = 2600 }
    }
    else_if = {
        limit = { original_tag = ITA }
        set_temp_variable = { base = 60000 }
        set_temp_variable = { multip = 4300 }
    }
    else_if = {
        limit = { original_tag = BUL }
        set_temp_variable = { base = 20000 }
        set_temp_variable = { multip = 1300 }
    }
    else = {
        set_temp_variable = { base = 15000 }
        set_temp_variable = { multip = 1000 }
    }
}

HS_GAR_calculate_required_manpower_for_THIS = {
    # The following function calculates manpower requirements based off certain parameters.
    HS_GAR_calculate_agitation_level_for_THIS = yes
    HS_GAR_get_manpower_formula = yes
    multiply_temp_variable = { multip = THIS.AGI@GRE }
    add_to_temp_variable = { multip = base }
    set_variable = { THIS.REQ_GAR@GRE = multip }
}

HS_GAR_calculate_required_equipment_for_THIS = {
    # The following function calculates equipment requirements based off certain parameters.
    set_temp_variable = { x = THIS.REQ_GAR@GRE }
    multiply_temp_variable = { x = 0.1 }
    set_variable = { THIS.REQ_infequip@GRE = x }
    set_temp_variable = { x = THIS.REQ_GAR@GRE }
    multiply_temp_variable = { x = 0.02 }
    set_variable = { THIS.REQ_supequip@GRE = x }
    set_temp_variable = { x = THIS.REQ_GAR@GRE }
    multiply_temp_variable = { x = 0.006 }
    set_variable = { THIS.REQ_artequip@GRE = x }
}

HS_calculate_manpower_ratio_for_THIS = {
    ##[The Hard Way]##
    #[Army]#
    set_temp_variable = { sum = 0 }
    #1200#
    set_temp_variable = { x = num_battalions_with_type@motorized }
    multiply_temp_variable = { x = 1.2 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mechanized }
    multiply_temp_variable = { x = 1.2 }
    add_to_temp_variable = { sum = x }
    #1000#
    set_temp_variable = { x = num_battalions_with_type@cavalry }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@infantry }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@bicycle_battalion }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@marine }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mountaineers }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@paratrooper }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@camelry }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@railway_gun }
    multiply_temp_variable = { x = 1 }
    add_to_temp_variable = { sum = x }
    #850#
    set_temp_variable = { x = num_battalions_with_type@penal_battalion }
    multiply_temp_variable = { x = 0.85 }
    add_to_temp_variable = { sum = x }
    #500#
    set_temp_variable = { x = num_battalions_with_type@amphibious_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@amphibious_mechanized }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@anti_tank_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@armored_car }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@field_hospital }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@heavy_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@logistics }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@maintenance_company }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@medium_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@military_police }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@signal_company }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@recon }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@super_heavy_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@amphibious_light_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@amphibious_medium_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@amphibious_heavy_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mot_recon }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@armored_car_recon }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_tank_recon }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@medium_sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@heavy_sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@modern_sp_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_sp_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@medium_sp_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@heavy_sp_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@super_heavy_sp_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_tank_destroyer_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@medium_tank_destroyer_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@heavy_tank_destroyer_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@modern_tank_destroyer_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mot_anti_tank_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mot_anti_air_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mot_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@rocket_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@mot_rocket_artillery_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@motorized_rocket_brigade }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@modern_armor }
    multiply_temp_variable = { x = 0.5 }
    add_to_temp_variable = { sum = x }
    #300#
    set_temp_variable = { x = num_battalions_with_type@anti_tank }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@anti_air }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@artillery }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@engineer }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@light_flame_tank }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@medium_flame_tank }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@heavy_flame_tank }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_battalions_with_type@rocket_artillery }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    ############################################
    set_temp_variable = { x = amount_manpower_in_deployment_queue}
    divide_temp_variable = { x = 1000 }
    add_to_temp_variable = { sum = x }
    #[Navy]#
    set_temp_variable = { x = num_ships_with_type@battle_cruiser }
    multiply_temp_variable = { x = 5.2 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_ships_with_type@battleship }
    multiply_temp_variable = { x = 5.2 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_ships_with_type@carrier }
    multiply_temp_variable = { x = 5 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_ships_with_type@submarine }
    multiply_temp_variable = { x = 0.2 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_ships_with_type@destroyer }
    multiply_temp_variable = { x = 0.3 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_ships_with_type@heavy_cruiser }
    multiply_temp_variable = { x = 0.8 }
    add_to_temp_variable = { sum = x }
    #[Air]#
    set_temp_variable = { x = num_deployed_planes_with_type@fighter_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@CAS_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@nav_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@cv_fighter_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@cv_CAS_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@cv_nav_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@cv_nav_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@suicide_craft_equipment }
    multiply_temp_variable = { x = 0.02 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_deployed_planes_with_type@heavy_fighter_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@tac_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@scout_plane_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@jet_fighter_equipment }
    multiply_temp_variable = { x = 0.04 }
    add_to_temp_variable = { sum = x }
    set_temp_variable = { x = num_deployed_planes_with_type@strat_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@jet_strat_bomber_equipment }
    add_to_temp_variable = { x = num_deployed_planes_with_type@transport_plane_equipment }
    multiply_temp_variable = { x = 0.08 }
    add_to_temp_variable = { sum = x }
    #[Garisson]#
    set_temp_variable = { x = garrison_manpower_need }
    divide_temp_variable = { x = 1000 }
    add_to_temp_variable = { sum = x }
    ############################################
    set_temp_variable = { manpower_ratio = THIS.manpower_k }
    divide_temp_variable = { manpower_ratio = sum }
    ############################################
    log="The available manpower is [?THIS.manpower_k]"
    log="The fielded manpower is [?sum]"
    log="The manpower ratio is [?manpower_ratio]"
}

HS_calculate_equipment_ratio_for_THIS = {
    set_temp_variable = { equipment_inf_ratio = num_equipment@infantry_equipment }
    set_temp_variable = { equipment_sup_ratio = num_equipment@support_equipment }
    set_temp_variable = { equipment_art_ratio = num_equipment@artillery_equipment }
    set_temp_variable = { fielded_inf = num_equipment_in_armies@infantry_equipment }
    set_temp_variable = { fielded_sup = num_equipment_in_armies@support_equipment }
    set_temp_variable = { fielded_art = num_equipment_in_armies@artillery_equipment }
    divide_temp_variable = { equipment_inf_ratio = fielded_inf }
    divide_temp_variable = { equipment_sup_ratio = fielded_sup }
    divide_temp_variable = { equipment_art_ratio = fielded_art }
}

HS_GAR_calculate_replenishment_quotas_for_THIS = {
    # Variables: REP_MAN_PER@GRE, REP_EQ_INF_PER, REP_EQ_SUP_PER, REP_EQ_ART_PER.  # given to THIS.
    # Sub-Variables: 1-8: These 8 define the capabilities of replenishment
    # The following calculates the priority given by the Occupiers to the Occupation of Greece. This priority is vital in terms of replenishing manpower requirements,
    # as well as executing further actions. 
    ####[Part A: World Situation]####
    # Here we are checking each major Axis Front. If the Axis powers are going well, they might want to prioritize suppressing Greece more and vice-versa.
    # Major Fronts: Ostfront/Westfront/AfrikaFront/Nord(Norway/Denmark)
    ###[Situation in the Ostfront]###
    if = {
        limit = { original_tag=GER has_war_with = SOV }
        if = {
            limit = { HS_GER_OST_on_the_verge_of_victory_lvl4=yes }                     # has taken all 3 major Soviet cities
            set_temp_variable = { ost_weight=3.00 }
        }
        else_if = {
            limit = { HS_GER_OST_very_close_to_victory_lvl3=yes }                       # has taken all 2/3 major Soviet cities
            set_temp_variable = { ost_weight=2.50 }
        }
        else_if = {
            limit = { HS_GER_OST_close_to_victory_lvl2=yes }                            # has taken all 1/3 major Soviet cities
            set_temp_variable = { ost_weight=2.00 }
        }
        else_if = {
            limit = { set_temp_variable = { tmpPER=1 } HS_GER_OST_expanding_lvl1_at_least_tmpPER=yes HS_GER_OST_collapsing_lvl0=no }
            HS_GER_OST_calculate_expanding_lvl1_tmpPER=yes
            set_temp_variable = { ost_weight=0.70 }
            add_to_temp_variable = { ost_weight=tmpPER }
        }
        else_if = {
            limit = { HS_GER_OST_collapsing_lvl0=yes }
            set_temp_variable = { ost_weight=0.20 }
        }
    }
    else = { set_temp_variable = { ost_weight=1.00 } }
    log="Ost-Weight: [?ost_weight]"
    ###[Situation in the Westfront]###
    if = {
        limit = { original_tag=GER }
        if = {
            limit = { HS_GER_WST_main_westwall_integrity_violated=no }
            set_temp_variable = { wst_weight=1.00 }
        }
        else_if = {
            limit = { HS_GER_WST_main_westwall_integrity_violated=yes HS_GER_WST_paris_liberated=no }
            set_temp_variable = { wst_weight=0.80 }
        }
        else_if = {
            limit = { HS_GER_WST_main_westwall_integrity_violated=yes HS_GER_WST_paris_liberated=yes }
            set_temp_variable = { wst_weight=0.60 }
        }
    }
    else = { set_temp_variable = { wst_weight=1.00 } }
    log="West-Weight: [?wst_weight]"
    ###[Situation in the Nordfront]###
    if = {
        limit = { original_tag=GER }
        if = {
            limit = { HS_GER_WST_nord_westwall_integrity_violated=no }
            set_temp_variable = { nrd_weight=1.00 }
        }
        else_if = {
            limit = { HS_GER_WST_nord_westwall_integrity_violated=yes }
            set_temp_variable = { nrd_weight=0.85 }
        }
    }
    else = { set_temp_variable = { nrd_weight=1.00 } }
    log="Nord-Weight: [?nrd_weight]"
    ###[Situation in the Sudfront]###
    if = {
        limit = { OR = { original_tag=GER original_tag=ITA } }
        if = {
            limit = { HS_AXIS_SUD_Afrika_Conquered=yes }
            set_temp_variable = { sud_weight=2.00 }
        }
        else_if = {
            limit = { HS_AXIS_SUD_Afrika_Conquered=no HS_AXIS_SUD_Afrika_Lost=no }
            set_temp_variable = { sud_weight=0.75 }
        }
        else_if = {
            limit = { HS_AXIS_SUD_Afrika_Lost=yes }
            set_temp_variable = { sud_weight=1.25 }
        }
    }
    else = { set_temp_variable = { sud_weight=1.00 } }
    log="Sud-Weight: [?sud_weight]"
    ####[Part B: Oppressor Condition]####
    # Here we are checking Germany's condition. We are interested in manpower, equipment, surrender progress, stability and war support.
    # Math time: between 0-0.50 ratios, we have an '
    ##[Manpower]##
    if = { 
        limit = { OR = { check_variable = { var=manpower_ratio value=0.5 compare=less_than_or_equals } check_variable = { var=manpower_ratio value=1.0 compare=greater_than_or_equals } } }
        set_temp_variable = { manpower_score = manpower_ratio }
    }
    else = { set_temp_variable = { manpower_score = 1.00 } }
    log="Manpower Score: [?manpower_score]"
    ##[Equipment]##
    THIS = { HS_calculate_equipment_ratio_for_THIS = yes }
    if = { 
        limit = { OR = { check_variable = { var=equipment_inf_ratio value=0.5 compare=less_than_or_equals } check_variable = { var=equipment_inf_ratio value=1.0 compare=greater_than_or_equals } } }
        set_temp_variable = { equipment_inf_score = equipment_inf_ratio }
    }
    else = { set_temp_variable = { equipment_inf_score = 1.00 } }
    if = { 
        limit = { OR = { check_variable = { var=equipment_sup_ratio value=0.5 compare=less_than_or_equals } check_variable = { var=equipment_sup_ratio value=1.0 compare=greater_than_or_equals } } }
        set_temp_variable = { equipment_sup_score = equipment_sup_ratio }
    }
    else = { set_temp_variable = { equipment_sup_score = 1.00 } }
    if = { 
        limit = { OR = { check_variable = { var=equipment_art_ratio value=0.5 compare=less_than_or_equals } check_variable = { var=equipment_art_ratio value=1.0 compare=greater_than_or_equals } } }
        set_temp_variable = { equipment_art_score = equipment_art_ratio }
    }
    else = { set_temp_variable = { equipment_art_score = 1.00 } }
    log="Eq.Inf Score: [?equipment_inf_score]"
    log="Eq.Sup Score: [?equipment_sup_score]"
    log="Eq.Art Score: [?equipment_art_score]"
    ##[Surrender Progress]##
    set_temp_variable = { x = 4 }
    multiply_temp_variable = { x = THIS.surrender_progress }
    clamp_temp_variable = { var=x min=0 max=1 }
    set_temp_variable = { surrender_progress_penalty = 1 }
    subtract_from_temp_variable = { surrender_progress_penalty = x}
    log="Surrender Score: [?surrender_progress_penalty]"
    ##[Stability Effect]##
    ####[Part C: Oppressed Condition]####
    # Here we are checking Hellenic's State's situation. We are interested in actions and events (state or nationwide).
    ##[Agitation Ceiling]##
    HS_GAR_calculate_agitation_replenishment_ceiling_for_THIS=yes
    ####[Part D: Historical Accuracy Simulation]####
    # Here we are checking historical dates to give some weights. Germany will gradually take over Italy after a point, therefore their interest will peak (and fall later on when things go bad in the East).
    ####[Part E: Final Randomization and Replenishment Decision]####
    multiply_temp_variable = { manpower_score = surrender_progress_penalty }
    multiply_temp_variable = { manpower_score = ost_weight }
    multiply_temp_variable = { manpower_score = wst_weight }
    multiply_temp_variable = { manpower_score = nrd_weight }
    multiply_temp_variable = { manpower_score = sud_weight }
    multiply_temp_variable = { equipment_inf_score = surrender_progress_penalty }
    multiply_temp_variable = { equipment_inf_score = wst_weight }
    multiply_temp_variable = { equipment_inf_score = nrd_weight }
    multiply_temp_variable = { equipment_inf_score = sud_weight }
    multiply_temp_variable = { equipment_sup_score = surrender_progress_penalty }
    multiply_temp_variable = { equipment_sup_score = wst_weight }
    multiply_temp_variable = { equipment_sup_score = nrd_weight }
    multiply_temp_variable = { equipment_sup_score = sud_weight }
    multiply_temp_variable = { equipment_art_score = surrender_progress_penalty }
    multiply_temp_variable = { equipment_art_score = wst_weight }
    multiply_temp_variable = { equipment_art_score = nrd_weight }
    multiply_temp_variable = { equipment_art_score = sud_weight }
    clamp_temp_variable = { var=manpower_score max=rep_ceiling }
    clamp_temp_variable = { var=equipment_inf_score max=rep_ceiling }
    clamp_temp_variable = { var=equipment_sup_score max=rep_ceiling }
    clamp_temp_variable = { var=equipment_art_score max=rep_ceiling }
    set_variable = { THIS.REP_MAN_PER@GRE = manpower_score }
    set_variable = { THIS.REP_EQ_INF_PER@GRE = equipment_inf_score }
    set_variable = { THIS.REP_EQ_SUP_PER@GRE = equipment_sup_score }
    set_variable = { THIS.REP_EQ_ART_PER@GRE = equipment_art_score }
    log="--------------------FINAL----------------------"
    log="Final Manpower Score: [?manpower_score]"
    log="Final Eq.Inf Score: [?equipment_inf_score]"
    log="Final Eq.Sup Score: [?equipment_sup_score]"
    log="Final Eq.Art Score: [?equipment_art_score]"
    # Finally, here we allow some randomization based off weights to give a more interesting feeling.
    ####[Part E+: Intel Events for Greece]####
    # Last but not least, informative events will be sent to Greece if certain parameters are met, such as Intelligence and State Reconnaissance (mod).
}

HS_GAR_calculate_agitation_replenishment_ceiling_for_THIS = {
    # Agitation ceiling basically limits the max multiplier depending on the agitation met by occupying nation. For example if the agitation is dead 0 in all states, 
    # then the Germans do not have a reason to send more than the absolute necessary replenishments, even if they can send 4 times the number.
    if = { 
        limit = { check_variable = { var=THIS.AGI@GRE value=30 compare=less_than } }     # y=0.0066x+1
        set_temp_variable = { rep_ceiling=THIS.AGI@GRE }
        multiply_temp_variable = { rep_ceiling=0.66 }
        multiply_temp_variable = { rep_ceiling=0.01 }
        add_to_temp_variable = { rep_ceiling=1 }
    }
    else_if = { 
        limit = { check_variable = { var=THIS.AGI@GRE value=30 compare=greater_than_or_equals } check_variable = { var=THIS.AGI@GRE value=60 compare=less_than } }    # y=0.26667x-6.8
        set_temp_variable = { rep_ceiling=THIS.AGI@GRE }
        multiply_temp_variable = { rep_ceiling=26.667 }
        multiply_temp_variable = { rep_ceiling=0.01 }
        subtract_from_temp_variable = { rep_ceiling=6.8 }
    }
    else = { 
        #limit = { check_variable = { var=THIS.AGI@GRE value=30 compare=greater_than_or_equals } check_variable = { var=THIS.AGI@GRE value=60 compare=less_than } }    # y=x/20-1
        set_temp_variable = { rep_ceiling=THIS.AGI@GRE }
        multiply_temp_variable = { rep_ceiling=0.05 }
        subtract_from_temp_variable = { rep_ceiling=1 }
    }
    log="Agitation Ceiling: [?rep_ceiling]"
}


HS_GER_OST_calculate_expanding_lvl1_tmpPER = {                                                                                                                              # In total: 48.
    set_temp_variable = { tmpPER = 0 }
    if = { limit = { var:global.province_controllers^3734 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Krasnodar
    if = { limit = { var:global.province_controllers^9417 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Rostov
    if = { limit = { var:global.province_controllers^9461 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Voroshilovgrad
    if = { limit = { var:global.province_controllers^418 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kharkov
    if = { limit = { var:global.province_controllers^6474 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Stalino
    if = { limit = { var:global.province_controllers^3580 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kursk
    if = { limit = { var:global.province_controllers^413 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Voronezh
    if = { limit = { var:global.province_controllers^9355 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Orel
    if = { limit = { var:global.province_controllers^3335 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Bryansk
    if = { limit = { var:global.province_controllers^6262 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Tula
    if = { limit = { var:global.province_controllers^6398 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Lipetsk
    if = { limit = { var:global.province_controllers^382 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kaluga
    if = { limit = { var:global.province_controllers^11336 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Roslavl
    if = { limit = { var:global.province_controllers^306 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Smolensk
    if = { limit = { var:global.province_controllers^11241 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Vitebsk
    if = { limit = { var:global.province_controllers^9289 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Mogilev
    if = { limit = { var:global.province_controllers^11234 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Luki
    if = { limit = { var:global.province_controllers^117 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Novgorod
    if = { limit = { var:global.province_controllers^9197 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Volkhov
    if = { limit = { var:global.province_controllers^9098 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Luga
    if = { limit = { var:global.province_controllers^11202 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Pskov
    if = { limit = { var:global.province_controllers^4640 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Narva
    if = { limit = { var:global.province_controllers^3152 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Tallin
    if = { limit = { var:global.province_controllers^185 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kuressaare
    if = { limit = { var:global.province_controllers^9340 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Riga
    if = { limit = { var:global.province_controllers^3255 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Jekabils
    if = { limit = { var:global.province_controllers^310 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Daugavils
    if = { limit = { var:global.province_controllers^406 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Motodeczno
    if = { limit = { var:global.province_controllers^11370 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Minsk
    if = { limit = { var:global.province_controllers^3350 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Bobruysk
    if = { limit = { var:global.province_controllers^9288 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Gomel
    if = { limit = { var:global.province_controllers^525 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kiev
    if = { limit = { var:global.province_controllers^488 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Cherkasy
    if = { limit = { var:global.province_controllers^11561 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Krivol Rih
    if = { limit = { var:global.province_controllers^11437 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Dnipropetrovsk
    if = { limit = { var:global.province_controllers^11405 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Zaporozhe
    if = { limit = { var:global.province_controllers^3686 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Sevastopol
    if = { limit = { var:global.province_controllers^9680 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kerch
    if = { limit = { var:global.province_controllers^11670 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Odessa
    if = { limit = { var:global.province_controllers^476 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Vinnytsia
    if = { limit = { var:global.province_controllers^11479 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Lwow
    if = { limit = { var:global.province_controllers^3392 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Brzesc Litewski
    if = { limit = { var:global.province_controllers^11301 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Bialystok
    if = { limit = { var:global.province_controllers^3320 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Vilnius
    if = { limit = { var:global.province_controllers^6296 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Kaunas
    if = { limit = { var:global.province_controllers^9483 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Siauliai
    if = { limit = { var:global.province_controllers^9262 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Liepaja
    if = { limit = { var:global.province_controllers^3296 = { OR = { original_tag = GER is_in_faction_with = GER } } } add_to_temp_variable = { tmpPER = 1 } } #Ventspils
    divide_temp_variable = { tmpPER = 48 }
}

###################################[Obsolete Functions]###################################

#HS_GAR_weekly_shift_normal = {
#    if = { 
#        limit = { OR = { check_variable = { global.HS_GERITA_GAR_coordination = 0 } NOT = { OR = { original_tag=GER original_tag=ITA } } } }
#        set_temp_variable = { total_gar = THIS.GAR@GRE }
#    }
#    else = {
#        set_temp_variable = { total_gar = GER.GAR@GRE }
#        add_to_temp_variable = { total_gar = ITA.GAR@GRE }
#    }
#    HS_GAR_calculate_state_weights = yes
#    for_each_loop = {
#        array = GRE.hs_gar_weighted_states_id
#
#        random_state = {
#            limit = { state = v }
#            set_temp_variable = { x = GRE.hs_gar_weighted_states_adj_value^i }
#            multiply_temp_variable = { x = total_gar }
#            set_variable = { gar = x }
#        }
#    }
#}

#####################


trim_infrastructure = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        THIS = { 
            if = {
                limit = { infrastructure > 3 }
                remove_building = {
                    type = infrastructure
                    level = 2
                }
                damage_building = {
                    type = infrastructure
                    damage = 1
                }
            }
            else_if = {
                limit = { infrastructure > 1 }
                remove_building = {
                    type = infrastructure
                    level = 1
                }
                damage_building = {
                    type = infrastructure
                    damage = 1
                }
            }
            else_if = {
                limit = { infrastructure > 0 }
                damage_building = {
                    type = infrastructure
                    damage = 1
                }
            }
        }
    }
}

###################[GREAT FAMINE]###################
######levels 1-10
#####modifiers: (SEASON, YEAR, STATE, FOCUSES, DECISIONS)
####YEAR
###1941-1942 worst, 1943 second-to-worst, 1944 plain bad
####Seasons
###Winter worst, Spring bad, Summer-Autumn base
####Specific periods for historical acc ( November/1941-Januray/1942 x4, January/1941-March/1942 x6, gradual decrease afterwards).
####States
###Athens + Aegean Islands (worst), Thessaloniki (2nd worst), rest base
####Deaths/Level
###lvl10-200d/d (deaths/day)
###lvl09-175d/d
###lvl07-150d/d
###lvl06-125d/d
###lvl06-100d/d
###lvl05-80d/d
###lvl04-60d/d
###lvl03-40d/d
###lvl02-20d/d
###lvl01-10d/d
###lvl00-5d/d
####Example Calculations
###15 states total
##Athens@10 -> 200
##Aegean@10 -> 200
##Thessaloniki -> 175
##      half   -> 6x 60
##      half   -> 6x 30

HS_FAM_set_base_state_level = {
    for_each_scope_loop = {
        array=global.greek_occupied_states_all

        ####[State Weight]####
        if = {
            limit = { OR={ state=47 state=187 } }
            set_variable = { THIS.state_famine_base_level=2 }
        }
        else_if = {
            limit = { state=839 }
            set_variable = { THIS.state_famine_base_level=1 }
        }
        else = { set_variable = { THIS.state_famine_base_level=0 } }
        ####[Season Weight]####
        if = {
            limit = { date<1941.11.1 }
            set_temp_variable = { THIS.state_famine_base_level = 1 }                   ## IF SEP41->NOV41, then minimal losses
        }
        ###[First Big Hit]###
        else_if = { 
            limit = { date<1942.1.1 }
            if = { 
                limit = { OR={ state=47 state=187 state=839 } }
                add_to_variable = { THIS.state_famine_base_level = 4 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 1 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 2 } }
        }
        ###[Second Big Hit]###
        else_if = { 
            limit = { date<1942.4.1 }
            if = { 
                limit = { OR={ state=47 state=187 state=839 } }
                add_to_variable = { THIS.state_famine_base_level = 5 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 2 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 3 } }
        }
        ####[Spring&Summer&Autumn42]####
        else_if = { 
            limit = { date<1942.12.12 }
            if = { 
                limit = { OR={ state=47 state=187 state=839 } }
                add_to_variable = { THIS.state_famine_base_level = 2 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 0 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 1 } }
        }
        ####[Winter42-43]####
        else_if = { 
            limit = { date<1943.3.15 }
            if = { 
                limit = { OR={ state=47 state=187 } }
                add_to_variable = { THIS.state_famine_base_level = 3 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 1 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 2 } }
        }
        ####[Spring&Summer&Autumn43]####
        else_if = { 
            limit = { date<1943.12.10 }
            if = { 
                limit = { OR={ state=47 state=187 state=839 } }
                add_to_variable = { THIS.state_famine_base_level = 1 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 0 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 0 } }
        }
        ####[Winter44]####
        else_if = { 
            limit = { date<1944.3.15 }
            if = { 
                limit = { OR={ state=47 state=187 state=839 } }
                add_to_variable = { THIS.state_famine_base_level = 2 }
            }
            else_if = {
                limit = { OR = { state=836 state=186 state=840 state=184 state=182 } }
                add_to_variable = { THIS.state_famine_base_level = 1 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 1 } }
        }
        ####[Spring&Summer&Autumn44]####
        else_if = { 
            limit = { date<1944.10.15 }
            if = { 
                limit = { OR={ state=47 state=187 } }
                add_to_variable = { THIS.state_famine_base_level = 1 }
            }
            else = { add_to_variable = { THIS.state_famine_base_level = 0 } }
        }
    }
}

HS_FAM_calculate_stability_penalty = {
    if = {
        limit = { has_stability>0.49 has_stability<0.65 }
        set_variable = { hs_death_stability_famine=1 }
    }
    else_if = {
        limit = { has_stability>0.24 }
        set_variable = { hs_death_stability_famine=2 }
    }
    else_if = {
        limit = { has_stability<0.25 }
        set_variable = { hs_death_stability_famine=3 }
    }
}

HS_FAM_initialize = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        add_dynamic_modifier = { modifier=great_famine }                                     # Add the great_famine to state
    }
}

HS_FAM_toll_proc = {
    set_temp_variable = { level=THIS.modifier@famine_token }
    add_to_temp_variable = { level=GRE.modifier@famine_token }
    add_to_temp_variable = { level=event_target:hellenic_state.modifier@famine_token }
    if = { limit = { state=47 event_target:hellenic_state={ has_decision=HS_kurtulus } } add_to_temp_variable={ level=-1 } }
    #####[CLAMP LEVEL]#####
    clamp_temp_variable = {
        var = level
        min = 0
        max = 10
    }
    ##########[FINAL CALC]##########
    if = { limit={check_variable={level<1}} set_temp_variable_to_random = { var=x min=-10 max=0 integer=yes } }
    else_if = { limit={check_variable={level<2}} set_temp_variable_to_random = { var=x min=-20 max=0 integer=yes } }
    else_if = { limit={check_variable={level<3}} set_temp_variable_to_random = { var=x min=-30 max=-10 integer=yes } }
    else_if = { limit={check_variable={level<4}} set_temp_variable_to_random = { var=x min=-60 max=-20 integer=yes } }
    else_if = { limit={check_variable={level<5}} set_temp_variable_to_random = { var=x min=-80 max=-40 integer=yes } }
    else_if = { limit={check_variable={level<6}} set_temp_variable_to_random = { var=x min=-100 max=-60 integer=yes } }
    else_if = { limit={check_variable={level<7}} set_temp_variable_to_random = { var=x min=-125 max=-75 integer=yes } }
    else_if = { limit={check_variable={level<8}} set_temp_variable_to_random = { var=x min=-200 max=-100 integer=yes } }
    else_if = { limit={check_variable={level<9}} set_temp_variable_to_random = { var=x min=-250 max=-150 integer=yes } }
    else_if = { limit={check_variable={level<10}} set_temp_variable_to_random = { var=x min=-350 max=-250 integer=yes } }
    else_if = { limit={check_variable={level<11}} set_temp_variable_to_random = { var=x min=-500 max=-300 integer=yes } }
    THIS = { add_manpower = x }
    multiply_temp_variable = { x=-1 }
    add_to_variable = { GRE.total_lost_to_famine=x }
    add_to_variable = { THIS.lost_to_famine=x }
    #####
    set_variable = { THIS.famine_level = level }
}

HS_FAM_rate_handling = {
    set_temp_variable = { x=global.num_days }
    subtract_from_temp_variable = { x=global.famine_start_date }
    set_temp_variable = { y=75.12 }                                                         # y = 75.12x
    multiply_temp_variable = { y=days }
    set_temp_variable = { q=GRE.total_lost_to_famine }
    divide_temp_variable = { q=y }
}

###################[BLACK]###################

clear_all_black_market_flags = {
    clr_country_flag = black_market_option_crackdown
    clr_country_flag = black_market_option_invest
    clr_country_flag = black_market_option_win_over
}

HS_BM_event_based_black_market_shift = {
    gre_hs_xor=yes                                                                                                                 ## Random events will happen during famine to simulate the black market. Triggered WITH state scope
    if = {                                                                                                                          #Note: 3 positive, 3 negative levels. Positive to Negative and vice-versa means a swap in state not a reduction/increase.
        limit = { OR = { has_any_negative_black_market_level=yes has_any_positive_black_market_level=no } }                         #Here we only add negative levels (for positive player must act through various manners)
        random_list = {
            seed=random
            95 = { HS_BM_add_negative_level=yes }
            5 = { HS_BM_toggle=yes }
        }
    }
    else_if = {
        limit = { has_any_positive_black_market_level=yes }
        random_list = {
            seed=random
            50 = { HS_BM_toggle=yes }
            50 = { HS_BM_add_positive_level=yes }
        }
    }
}


HS_BM_add_negative_level = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_cemented }
        var:event_sender = { country_event = { id = hellas.10121 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
        var:event_sender = { country_event = { id = hellas.10121 days = 0 } }
    }
    else_if = { 
        limit = {
            NOT = {
                has_dynamic_modifier = { modifier = black_market_obscure }
                has_dynamic_modifier = { modifier = black_market_cemented }
                has_dynamic_modifier = { modifier = black_market_ubshakeable }
            } 
        } 
        add_dynamic_modifier = { modifier = black_market_obscure }
        var:event_sender = { country_event = { id = hellas.10121 days = 0 } }
    }
}

HS_BM_reduce_level = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
}

HS_BM_add_positive_level = {
    if = {
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
        var:event_sender = { country_event = { id = hellas.10122 days = 0 } }
    }
    else_if = {
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        var:event_sender = { country_event = { id = hellas.10122 days = 0 } }
    }
    else_if = {
        limit = { has_any_black_market_level=no } 
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
        var:event_sender = { country_event = { id = hellas.10122 days = 0 } }
    }
}

HS_BM_toggle = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_obscure }
        var:event_sender = { country_event = { id = hellas.10123 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented }
        var:event_sender = { country_event = { id = hellas.10123 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
        var:event_sender = { country_event = { id = hellas.10123 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
        var:event_sender = { country_event = { id = hellas.10124 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
        var:event_sender = { country_event = { id = hellas.10124 days = 0 } }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        var:event_sender = { country_event = { id = hellas.10124 days = 0 } }
    }
}

HS_BM_toggle_positive = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure } }
        remove_dynamic_modifier = { modifier = black_market_obscure }
        add_dynamic_modifier = { modifier = black_market_obscure_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented } } 
        remove_dynamic_modifier = { modifier = black_market_cemented }
        add_dynamic_modifier = { modifier = black_market_cemented_controlled }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable }
        add_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
    }
}

HS_BM_toggle_negative = {
    if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_obscure_controlled } }
        remove_dynamic_modifier = { modifier = black_market_obscure_controlled }
        add_dynamic_modifier = { modifier = black_market_obscure }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_cemented_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_cemented_controlled }
        add_dynamic_modifier = { modifier = black_market_cemented }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = black_market_ubshakeable_controlled } } 
        remove_dynamic_modifier = { modifier = black_market_ubshakeable_controlled }
        add_dynamic_modifier = { modifier = black_market_ubshakeable }
    }
}


HS_set_up_state_modifiers = {
    add_to_array = { global.german_occupied_states = 47 }
    add_to_array = { global.german_occupied_states = 841 }
    add_to_array = { global.german_occupied_states = 187 }
    add_to_array = { global.german_occupied_states = 731 }
    add_to_array = { global.german_occupied_states = 839 }
    add_to_array = { global.german_occupied_states = 838 }
    add_to_array = { global.italian_occupied_states = 185 }
    add_to_array = { global.italian_occupied_states = 837 }
    add_to_array = { global.italian_occupied_states = 835 }
    add_to_array = { global.italian_occupied_states = 836 }
    add_to_array = { global.italian_occupied_states = 186 }
    add_to_array = { global.italian_occupied_states = 842 }
    if = {
        limit = {
            BUL = {
                NOT = {
                    owns_state = 184
                    owns_state = 840
                }
            }
        }
        add_to_array = { global.italian_occupied_states = 184 }
        add_to_array = { global.italian_occupied_states = 840 }
    }
    else = {
        add_to_array = { global.bulgarian_occupied_states = 184 }
        add_to_array = { global.bulgarian_occupied_states = 840 }
    }
    add_to_array = { global.greek_occupied_states_all = 47 }
    add_to_array = { global.greek_occupied_states_all = 841 }
    add_to_array = { global.greek_occupied_states_all = 187 }
    add_to_array = { global.greek_occupied_states_all = 731 }
    add_to_array = { global.greek_occupied_states_all = 839 }
    add_to_array = { global.greek_occupied_states_all = 838 }
    add_to_array = { global.greek_occupied_states_all = 185 }
    add_to_array = { global.greek_occupied_states_all = 837 }
    add_to_array = { global.greek_occupied_states_all = 835 }
    add_to_array = { global.greek_occupied_states_all = 836 }
    add_to_array = { global.greek_occupied_states_all = 186 }
    add_to_array = { global.greek_occupied_states_all = 184 }
    add_to_array = { global.greek_occupied_states_all = 840 }
    add_to_array = { global.greek_occupied_states_all = 842 }
    #########################################################
    add_to_array = { global.greek_mainland_states_all = 47 }
    add_to_array = { global.greek_mainland_states_all = 731 }
    add_to_array = { global.greek_mainland_states_all = 839 }
    add_to_array = { global.greek_mainland_states_all = 838 }
    add_to_array = { global.greek_mainland_states_all = 185 }
    add_to_array = { global.greek_mainland_states_all = 835 }
    add_to_array = { global.greek_mainland_states_all = 836 }
    add_to_array = { global.greek_mainland_states_all = 186 }
    add_to_array = { global.greek_mainland_states_all = 184 }
    add_to_array = { global.greek_mainland_states_all = 840 }
    add_to_array = { global.greek_mainland_states_all = 184 }
    #########################################################
    if = {
        limit = { GRE = { has_completed_focus = GRE_crete_falls } }
        add_to_array = { global.greek_occupied_states_all = 182 }
    }
}

HS_calculate_factories_in_occupation_zones = {
    set_variable = { ITA.civsoccupied@GRE = 0 }
    set_variable = { GER.civsoccupied@GRE = 0 }
    set_variable = { BUL.civsoccupied@GRE = 0 }
    set_variable = { ITA.milsoccupied@GRE = 0 }
    set_variable = { GER.milsoccupied@GRE = 0 }
    set_variable = { BUL.milsoccupied@GRE = 0 }
    set_variable = { ITA.docksoccupied@GRE = 0 }
    set_variable = { GER.docksoccupied@GRE = 0 }
    set_variable = { BUL.docksoccupied@GRE = 0 }
    for_each_scope_loop = {
        array = global.german_occupied_states
        
        set_temp_variable = { state_civs = THIS.industrial_complex_level }
        set_temp_variable = { state_mils = THIS.arms_factory_level }
        set_temp_variable = { state_docks = THIS.building_level@dockyard  }
        add_to_variable = { GER.civsoccupied@GRE = state_civs }
        add_to_variable = { GER.milsoccupied@GRE = state_mils }
        add_to_variable = { GER.docksoccupied@GRE = state_docks }
    }
    for_each_scope_loop = {
        array = global.italian_occupied_states
        
        set_temp_variable = { state_civs = THIS.industrial_complex_level }
        set_temp_variable = { state_mils = THIS.arms_factory_level }
        set_temp_variable = { state_docks = THIS.building_level@dockyard  }
        add_to_variable = { ITA.civsoccupied@GRE = state_civs }
        add_to_variable = { ITA.milsoccupied@GRE = state_mils }
        add_to_variable = { ITA.docksoccupied@GRE = state_docks }
    }
    for_each_scope_loop = {
        array = global.bulgarian_occupied_states
        
        set_temp_variable = { state_civs = THIS.industrial_complex_level }
        set_temp_variable = { state_mils = THIS.arms_factory_level }
        set_temp_variable = { state_docks = THIS.building_level@dockyard  }
        add_to_variable = { BUL.civsoccupied@GRE = state_civs }
        add_to_variable = { BUL.milsoccupied@GRE = state_mils }
        add_to_variable = { BUL.docksoccupied@GRE = state_docks }
    }
    HS_calculate_total_factories_in_occupation_zones = yes
}

HS_calculate_total_factories_in_occupation_zones = {
    set_variable = { GRE.TotalOccupiedCivs = GER.civsoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedCivs = ITA.civsoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedCivs = BUL.civsoccupied@GRE }
    set_variable = { GRE.TotalOccupiedMils = GER.civsoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedMils = ITA.civsoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedMils = BUL.civsoccupied@GRE }
    set_variable = { GRE.TotalOccupiedDocks = GER.docksoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedDocks = ITA.docksoccupied@GRE }
    add_to_variable = { GRE.TotalOccupiedDocks = BUL.docksoccupied@GRE }
}

HS_flag_states = {
    47 = {
        set_variable = { province_num = 2 }
        set_variable = { urban = 2 }
        set_variable = { fld_r = 1.000 }
        set_variable = { state_agitation = 0 } 
        set_variable = { state_agitation_multiplier = 3 }
        ###
        set_variable = { HQ = 2 }
        add_to_array = { HQ_controller = GER.id }
        add_to_array = { HQ_controller = ITA.id }
        set_variable = { base = 1 }
        set_variable = { base_controller = controller }
    }
    835 = {
        set_variable = { province_num = 8 }
        set_variable = { fields = 2 }
        set_variable = { forest = 1 }
        set_variable = { hills = 3 }
        set_variable = { mountains = 2 }
        set_variable = { hnm = 5 }
        set_variable = { fld_r = 0.250 }
        set_variable = { hnm_r = 0.625 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.5 }
    }
    186 = {
        set_variable = { province_num = 7 }
        set_variable = { fields = 1 }
        set_variable = { hills = 3 }
        set_variable = { hnm = 3 }
        set_variable = { fld_r = 0.143 }
        set_variable = { hnm_r = 0.857 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.5 }
        set_variable = { base = 1 }
        set_variable = { base_controller = controller }
    }
    836 = {
        set_variable = { province_num = 9 }
        set_variable = { fields = 4 }
        set_variable = { hills = 3 }
        set_variable = { mountains = 2 }
        set_variable = { hnm = 5 }
        set_variable = { fld_r = 0.444 }
        set_variable = { hnm_r = 0.556 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.5 }
    }
    185 = {
        set_variable = { province_num = 9 }
        set_variable = { fields = 2 }
        set_variable = { hills = 3 }
        set_variable = { mountains = 4 }
        set_variable = { hnm = 7 }
        set_variable = { fld_r = 0.223 }
        set_variable = { hnm_r = 0.777 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.5 }
        ###
        set_variable = { base = 1 }
        set_variable = { base_controller = controller }
    }
    838 = {
        set_variable = { province_num = 9 }
        set_variable = { fields = 1 }
        set_variable = { hills = 1 }
        set_variable = { mountains = 7 }
        set_variable = { hnm = 8 }
        set_variable = { fld_r = 0.112 }
        set_variable = { hnm_r = 0.888 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.25 }
    }
    839 = {
        set_variable = { province_num = 2 }
        set_variable = { urban = 2 }
        set_variable = { fld_r = 1.000 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 3 }
        ###
        set_variable = { base = 1 }
        set_variable = { base_controller = controller }
    }
    731 = {
        set_variable = { province_num = 3 }
        set_variable = { fields = 2 }
        set_variable = { forest = 1 }
        set_variable = { fld_r = 0.666 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.25 }
    }
    840 = {
        set_variable = { HQ = 1 }
        add_to_array = { HQ_controller = BUL.id }
        set_variable = { province_num = 5 }
        set_variable = { fields = 2 }
        set_variable = { hills = 1 }
        set_variable = { mountains = 2 }
        set_variable = { hnm = 3 }
        set_variable = { fld_r = 0.334 }
        set_variable = { hnm_r = 0.666 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.25 }
    }
    184 = {
        set_variable = { province_num = 2 }
        set_variable = { hills = 1 }
        set_variable = { mountains = 1 }
        set_variable = { hnm = 2 }
        set_variable = { hnm_r = 1.000 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.25 }
    }
    841 = {
        set_variable = { province_num = 1 }
        set_variable = { mountains = 1 }
        set_variable = { hnm = 1 }
        set_variable = { hnm_r = 1 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1.25 }
    }
    837 = {
        set_variable = { province_num = 2 }
        set_variable = { island = 2 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1 }
    }
    842 = {
        set_variable = { province_num = 1 }
        set_variable = { island = 1 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1 }
    }
    187 = {
        set_variable = { province_num = 2 }
        set_variable = { island = 2 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 1 }
    }
    182 = {
        set_variable = { province_num = 4 }
        set_variable = { fields = 2 }
        set_variable = { hills = 2 }
        set_variable = { hnm = 2 }
        set_variable = { fld_r = 0.500 }
        set_variable = { hnm_r = 0.500 }
        set_variable = { state_agitation = 0 }
        set_variable = { state_agitation_multiplier = 2 }
    }
}

HS_add_angered_greeks = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        add_dynamic_modifier = { modifier = unyielding_greeks_angered }                                     # Adds to the value (state ID) the dynamic modifier.
    }
}

HS_increase_unyielding_greeks_by_one = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = {
            limit = { has_dynamic_modifier = { modifier = unyielding_greeks_angered } }
            remove_dynamic_modifier = { modifier = unyielding_greeks_angered }
            add_dynamic_modifier = { modifier = unyielding_greeks_determined }
        }
        else_if = {
            limit = { has_dynamic_modifier = { modifier = unyielding_greeks_determined } }
            remove_dynamic_modifier = { modifier = unyielding_greeks_determined }
            add_dynamic_modifier = { modifier = unyielding_greeks_ferocious }
        }
        else_if = { 
            limit = { NOT = { has_dynamic_modifier = { modifier = unyielding_greeks_ferocious } } }
            add_dynamic_modifier = { modifier = unyielding_greeks_angered }
        }
    }
}

HS_increase_unyielding_greeks_by_one_decision = {       
    if = {
        limit = { has_dynamic_modifier = { modifier = unyielding_greeks_angered } }
        remove_dynamic_modifier = { modifier = unyielding_greeks_angered }
        add_dynamic_modifier = { modifier = unyielding_greeks_determined }
    }
    else_if = {
        limit = { has_dynamic_modifier = { modifier = unyielding_greeks_determined } }
        remove_dynamic_modifier = { modifier = unyielding_greeks_determined }
        add_dynamic_modifier = { modifier = unyielding_greeks_ferocious }
    }
    else_if = { 
        limit = { NOT = { has_dynamic_modifier = { modifier = unyielding_greeks_ferocious } } }
        add_dynamic_modifier = { modifier = unyielding_greeks_angered }
    }
}

HS_increase_armed_resistance_by_one = {
    for_each_scope_loop = {
        array = global.greek_occupied_states_all
        
        if = { 
            limit = { 
                NOT = {
                    has_dynamic_modifier = { modifier = early_resistance_groups } 
                    has_dynamic_modifier = { modifier = strengthened_resistance_groups }
                    has_dynamic_modifier = { modifier = dominant_resistance_groups } 
                    has_dynamic_modifier = { modifier = unshakeable_resistance_groups }
                }
            }
            ###remove_dynamic_modifier = { modifier = GRE_italian_occupation_zone }
            ###remove_dynamic_modifier = { modifier = GRE_german_occupation_zone }
            add_dynamic_modifier = { modifier = early_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = early_resistance_groups } }
            remove_dynamic_modifier = { modifier = early_resistance_groups }
            add_dynamic_modifier = { modifier = strengthened_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = strengthened_resistance_groups } }
            remove_dynamic_modifier = { modifier = strengthened_resistance_groups }
            add_dynamic_modifier = { modifier = dominant_resistance_groups }
        }
        else_if = { 
            limit = { has_dynamic_modifier = { modifier = dominant_resistance_groups } }
            remove_dynamic_modifier = { modifier = dominant_resistance_groups }
            add_dynamic_modifier = { modifier = unshakeable_resistance_groups }
        }
    }
}

HS_increase_armed_resistance_by_one_decision = {      
    if = { 
        limit = { 
            NOT = {
                has_dynamic_modifier = { modifier = early_resistance_groups } 
                has_dynamic_modifier = { modifier = strengthened_resistance_groups }
                has_dynamic_modifier = { modifier = dominant_resistance_groups } 
                has_dynamic_modifier = { modifier = unshakeable_resistance_groups }
            }
        }
        ###remove_dynamic_modifier = { modifier = GRE_italian_occupation_zone }
        ###remove_dynamic_modifier = { modifier = GRE_german_occupation_zone }
        add_dynamic_modifier = { modifier = early_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = early_resistance_groups } }
        remove_dynamic_modifier = { modifier = early_resistance_groups }
        add_dynamic_modifier = { modifier = strengthened_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = strengthened_resistance_groups } }
        remove_dynamic_modifier = { modifier = strengthened_resistance_groups }
        add_dynamic_modifier = { modifier = dominant_resistance_groups }
    }
    else_if = { 
        limit = { has_dynamic_modifier = { modifier = dominant_resistance_groups } }
        remove_dynamic_modifier = { modifier = dominant_resistance_groups }
        add_dynamic_modifier = { modifier = unshakeable_resistance_groups }
    }
}

HS_calculate_initial_anger_level = {
    # This function calculates initial anger level on occupying forces. Not really meant to push too far, but some variability.
    # Italians were more bitter at first (cause they sucked), Germans were indifferent and Bulgarians probably the most brutal as they wanted to put forth their plans for annexation at all costs.0
    if = { limit={ GER={has_war_with=GRE} } add_to_array = { GRE.occupier_nations = GER.id } set_temp_variable = { base@GER = 0 } }
    if = { limit={ ITA={has_war_with=GRE} } add_to_array = { GRE.occupier_nations = ITA.id } set_temp_variable = { base@ITA = 15 } }
    if = { limit={ BUL={has_war_with=GRE} } add_to_array = { GRE.occupier_nations = BUL.id } set_temp_variable = { base@BUL = 30 } }
    if = { limit={ YUG={has_war_with=GRE} } add_to_array = { GRE.occupier_nations = YUG.id } set_temp_variable = { base@TUR = 0 } }
    if = { limit={ TUR={has_war_with=GRE} } add_to_array = { GRE.occupier_nations = TUR.id } set_temp_variable = { base@YUG = 0 } }
    ############################################
    for_each_scope_loop = {
        array=GRE.occupier_nations

        ###############[Influence]################
        set_temp_variable = { x = THIS.favor@GRE }
        divide_temp_variable = { x = -20 }
        add_to_temp_variable = { base@THIS = x }
        ###############[Casualties]###############
        if = { limit={casualties_inflicted_by={opponent=GRE thousands<60}} add_to_temp_variable={ base@THIS=0 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<100}} add_to_temp_variable={ base@THIS=1 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<200}} add_to_temp_variable={ base@THIS=2 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<300}} add_to_temp_variable={ base@THIS=3 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<400}} add_to_temp_variable={ base@THIS=4 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<500}} add_to_temp_variable={ base@THIS=5 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<600}} add_to_temp_variable={ base@THIS=6 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<700}} add_to_temp_variable={ base@THIS=7 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<800}} add_to_temp_variable={ base@THIS=8 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<900}} add_to_temp_variable={ base@THIS=9 } }
        else_if = { limit={casualties_inflicted_by={opponent=GRE thousands<1000}} add_to_temp_variable={ base@THIS=10 } }
        else = { add_to_temp_variable={ base@THIS=12 } }
    }
    for_each_scope_loop = {
        array=GRE.occupier_nations

        clamp_temp_variable = { var=base@THIS min=0 max=100 }
        set_variable = { THIS.ANGER@GRE = base@THIS }
    }
}

HS_set_up_areas_of_interest_arrays = {
    clear_array = global.main_westwall_state_array
    clear_array = global.nord_westwall_state_array
    clear_array = global.north_afrikan_states
    every_state = {
        limit = {
            OR = { is_core_of=FRA is_core_of=BEL is_core_of=HOL }
            is_on_continent = europe
            is_coastal = yes
            NOT = { state=1 }
        }
        add_to_array = { global.main_westwall_state_array = THIS }
    }
    every_state = {
        limit = {
            OR = { is_core_of=DEN is_core_of=NOR state=56 state=59 state=58}
            is_on_continent = europe
            is_coastal = yes
            NOT = { state=100 state=337 state=101 state=37 }
        }
        add_to_array = { global.nord_westwall_state_array = THIS }
    }
    every_state = {
        limit = {
            OR = { is_core_of=WES is_core_of=MOR is_core_of=ALG is_core_of=TUN is_core_of=LBA is_core_of=EGY is_core_of=ISR is_core_of=JOR }
        }
        add_to_array = { global.north_afrikan_states = THIS }
    }
}

HS_set_up_occupation_zones = {                                                                              ## We gonna use an array, yay, how I hate my life.
    add_to_array = { german_occupation_zone = 11905 } ##    EVROS
    add_to_array = { german_occupation_zone = 895 }   ##    CENTRAL MACEDONIA
    add_to_array = { german_occupation_zone = 3936 }
    add_to_array = { german_occupation_zone = 3526 }
    add_to_array = { german_occupation_zone = 11818 } ##    THESSALONIKI
    add_to_array = { german_occupation_zone = 936 }   ##    WESTERN MACEDONIA
    add_to_array = { german_occupation_zone = 10163 }
    add_to_array = { german_occupation_zone = 13240 }
    add_to_array = { german_occupation_zone = 9837 }
    add_to_array = { german_occupation_zone = 966 }
    add_to_array = { german_occupation_zone = 3980 }
    add_to_array = { german_occupation_zone = 863 }
    add_to_array = { german_occupation_zone = 841 }  
    add_to_array = { german_occupation_zone = 13249 } 
    add_to_array = { german_occupation_zone = 4109 }  ##    ATTIKA
    add_to_array = { german_occupation_zone = 11965 }
    add_to_array = { german_occupation_zone = 8435 }  ##    AEGEAN
    add_to_array = { german_occupation_zone = 6550 } 
    add_to_array = { german_occupation_zone = 11965 } 
    add_to_array = { italian_occupation_zone = 3401 }  ##   CYCLADES
    add_to_array = { italian_occupation_zone = 13237 } ##   HPEIROS
    add_to_array = { italian_occupation_zone = 13236 }
    add_to_array = { italian_occupation_zone = 13238 }
    add_to_array = { italian_occupation_zone = 9805 }
    add_to_array = { italian_occupation_zone = 3914 }
    add_to_array = { italian_occupation_zone = 6930 }
    add_to_array = { italian_occupation_zone = 9916 }
    add_to_array = { italian_occupation_zone = 13252 }
    add_to_array = { italian_occupation_zone = 13253 }
    add_to_array = { italian_occupation_zone = 10203 } ##   STEREA
    add_to_array = { italian_occupation_zone = 1106 }
    add_to_array = { italian_occupation_zone = 12001 }
    add_to_array = { italian_occupation_zone = 1205 }
    add_to_array = { italian_occupation_zone = 13241 }
    add_to_array = { italian_occupation_zone = 976 }
    add_to_array = { italian_occupation_zone = 1109 }
    add_to_array = { italian_occupation_zone = 7127 }
    add_to_array = { italian_occupation_zone = 13245 }
    add_to_array = { italian_occupation_zone = 13251 }
    add_to_array = { italian_occupation_zone = 3864 } ##    THESSALY
    add_to_array = { italian_occupation_zone = 3844 }
    add_to_array = { italian_occupation_zone = 3973 }
    add_to_array = { italian_occupation_zone = 11786 }
    add_to_array = { italian_occupation_zone = 11895 }
    add_to_array = { italian_occupation_zone = 13246 }
    add_to_array = { italian_occupation_zone = 13247 }
    add_to_array = { italian_occupation_zone = 13248 }
    add_to_array = { italian_occupation_zone = 13250 }
    add_to_array = { italian_occupation_zone = 3988 } ##    PELOP
    add_to_array = { italian_occupation_zone = 7211 }
    add_to_array = { italian_occupation_zone = 4193 }
    add_to_array = { italian_occupation_zone = 1173 }
    add_to_array = { italian_occupation_zone = 4178 }
    add_to_array = { italian_occupation_zone = 4078 }
    add_to_array = { italian_occupation_zone = 7096 }
    if = {
        limit = {
            BUL = {
                NOT = {
                    owns_state = 184
                    owns_state = 840
                }
            }
        }
        add_to_array = { italian_occupation_zone = 11774 }
        add_to_array = { italian_occupation_zone = 13242 }
        add_to_array = { italian_occupation_zone = 13243 }
        add_to_array = { italian_occupation_zone = 9797 }
        add_to_array = { italian_occupation_zone = 9930 }
        add_to_array = { italian_occupation_zone = 6990 }
        add_to_array = { italian_occupation_zone = 13244 }
    }
    for_each_loop = {         
        array = german_occupation_zone
        GER = { set_province_controller = v }
    }
    for_each_loop = {         
        array = italian_occupation_zone
        ITA = { set_province_controller = v }
    }
    HS_set_up_state_modifiers = yes
}

GR_HS_split_ideas = {
    if = {
        limit = { has_idea = GRE_masters_of_shipbuilding_2 }
        remove_ideas = GRE_masters_of_shipbuilding_2
        set_country_flag = had_masters_of_shipbuilding_2
    }
    if = {
        limit = { has_idea = GRE_masters_of_shipbuilding }
        remove_ideas = GRE_masters_of_shipbuilding
        set_country_flag = had_masters_of_shipbuilding
    }
    if = {
        limit = { has_idea = GRE_submarine_expertise }
        remove_ideas = GRE_submarine_expertise
        set_country_flag = had_submarine_expertise
    }
    if = {
        limit = { has_idea = GRE_IKA }
        remove_ideas = GRE_IKA
        set_country_flag = had_IKA
    }
    if = {
        limit = { has_idea = GRE_new_corporatism_combined }
        remove_ideas = GRE_new_corporatism_combined
        set_country_flag = had_new_corporatism_combined
    }
    else = {
        remove_ideas = GRE_sophistry_and_science_idea
        remove_ideas = GRE_new_corporatism
        remove_ideas = GRE_industrializing_society
        remove_ideas = GRE_farmer_culture
        if = {
            limit = { has_idea = GRE_spend_for_growth }
            remove_ideas = GRE_spend_for_growth
        }
    }
    if = {
        limit = { has_idea = GRE_cooperate_with_foreign_monopolies_spirit }
        remove_ideas = GRE_cooperate_with_foreign_monopolies_spirit
        set_country_flag = had_cooperate_with_foreign_monopolies_spirit
    }
    else = {
        remove_ideas = GRE_foreign_monopolies
        remove_ideas = GRE_foreign_monopolies_2
        remove_ideas = GRE_foreign_monopolies_3
        remove_ideas = GRE_foreign_monopolies_4
    }
    if = {
        limit = { has_idea = GRE_domestic_competition_2 }
        remove_ideas = GRE_domestic_competition_2
    }
    else = {
        remove_ideas = GRE_domestic_competition_1
        remove_ideas = GRE_domestic_competition_0
    }
    if = {
        limit = { has_idea = GRE_eon_kanellopoulos_year_2 }
        remove_ideas = GRE_eon_kanellopoulos_year_2
        set_country_flag = had_eon_kanellopoulos_year_2
    }
    else = {
        remove_ideas = GRE_eon_kanellopoulos_year_1
        remove_ideas = GRE_eon
    }
    if = {
        limit = { has_idea = GRE_schachtplan_incorporated }
        remove_ideas = GRE_schachtplan_incorporated
        set_country_flag = had_schachtplan_incorporated
    }
    else = {
        remove_ideas = GRE_schachtplan_fascistised
        remove_ideas = GRE_schachtplan_modified
        remove_ideas = GRE_schachtplan
    }
    remove_ideas = GRE_met_line_2
    remove_ideas = GRE_met_line
    remove_ideas = GRE_fifth_phalanx_crushed
    #remove_ideas = GRE_dummy_surrender
    remove_ideas = GRE_grecosoviet_trade_gre
    remove_ideas = GRE_tur_guar
    SOV = { remove_ideas = GRE_grecosoviet_trade_sov }
    remove_dynamic_modifier = { modifier = GRE_alternating_tariffs }
    remove_dynamic_modifier = { modifier = GRE_military_budget }
    remove_dynamic_modifier = { modifier = GRE_yfipourgeio_asfaleias }
    remove_dynamic_modifier = { modifier = GRE_yfipourgeio_propagandas }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_staff }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_army }
    remove_dynamic_modifier = { modifier = GRE_army_reform_hellenic_people }
    remove_dynamic_modifier = { modifier = GRE_grand_coalition_dynamic }
    if = {
        limit = { has_completed_focus = GRE_dreams_of_a_grand_coalition }
        add_dynamic_modifier = { modifier = GRE_grand_coalition_exiled_dynamic }
        set_variable = { GRE.bonus_stability@event_target:hellenic_state = 0.005 }
        set_variable = { GRE_grand_exiled_pp_fct = 0.25 }
        set_variable = { GRE_grand_exiled_atk_fct = 0.04 }
        set_variable = { GRE_grand_exiled_def_fct = 0.04 }
    }
    add_dynamic_modifier = { modifier = GRE_government_in_exile_lack_of_brains }
    add_dynamic_modifier = { modifier = GRE_government_in_exile_lack_of_production }
    set_variable = { GRE_research_bonus_lost_in_exile = -1 }
    set_variable = { GRE_factory_capacity_lost_in_exile = -2 }
    set_variable = { GRE_dockyard_capacity_lost_in_exile = -2 }
    set_variable = { true_legitimacy = 15 }
    add_ideas = recruit_siphoning_basic
    add_ideas = ministry_of_rolling_with_the_punches
    add_ideas = economy_under_construction
}

HS_split_characters_to_respective_nations = {
    GRE = {
        GRE_konstantinos_maniadakis = { set_nationality = GRE }                                 # GiE = Government in Exile
        GRE_theologos_nikoloudis = { set_nationality = GRE }                                    # GiE
        GRE_emmanouil_tsouderos = { set_nationality = GRE }                                     # GiE
        GRE_king_george = { set_nationality = GRE }                                             # GiE
        retire_character = GRE_kostas_kotzias                                                   # Through Turkey went to USA, where he stayed
        GRE_prodromos_bodosakis = { set_nationality = GRE }                                     # GiE, escaped
        GRE_sitsa_karaiskaki = { set_nationality = GRE }                                        # GiE (surprisingly), convicted to death 2 times, amnesty in 1954
        retire_character = GRE_nelly                                                            # Stuck at USA in 1939. Make event
        GRE_alexandros_kanelopoulos = { set_nationality = event_target:hellenic_state }         # Took over father's 'Company of Chemical Products & Fertilizers
        GRE_achilleas_kyrou = { set_nationality = event_target:hellenic_state }                 # Made Head of Newspaper by Germans, but quit, almost immediately
        GRE_aristeidis_dimitratos = { set_nationality = GRE }                                   # GiE
        GRE_andreas_apostolidis = { set_nationality = event_target:hellenic_state }             # -
        GRE_theodoros_tourkovasilis = { set_nationality = event_target:hellenic_state }         # During Rallis Gov. in 1943, took over National Bank, but arrested three months later and imprisoned by the Germans for 4 months.
        GRE_konstantinos_bastias = { set_nationality = event_target:hellenic_state }            # Imprisoned, released, labeled as dangerous
        GRE_pantelis_prevelakis = { set_nationality = event_target:hellenic_state }             # Fired, remained as proffessor
        GRE_archbishop_chrysanthos = { set_nationality = event_target:hellenic_state }          # Fired because he did not want to hold the oath ceremony for the occupational government
        GRE_archbishop_damaskinos = { set_nationality = event_target:hellenic_state }           # Hired because of the above
        GRE_nikos_zachariadis = { set_nationality = event_target:hellenic_state }               # Given to the Germans in 27 of April
        GRE_george_mercouris = { set_nationality = event_target:hellenic_state }                # Head of National Bank, died in 1943
        GRE_charalambos_katsimitros = { set_nationality = event_target:hellenic_state }         # Minister of Labor in Tsolakoglou and Agriculture 16/4/41-16/5/41. 20/9/41 resigned (accepted immediately)
        GRE_markos_drakos = { set_nationality = event_target:hellenic_state }                   # Imprisoned by Germans (with 4 more)
        GRE_alexandros_papagos = { set_nationality = event_target:hellenic_state }              # Imprisoned by Germans (with 4 more)
        GRE_themistoklis_sofoulis = { set_nationality = event_target:hellenic_state }           # Stayed, joined the right-winged AAA resistance group, that was in touch with the GiE. Refused collaboration with EAM. Arrested in 19/5/1944 by occ. forces
        GRE_dimitrios_psarros = { set_nationality = event_target:hellenic_state }               # Stayed, died during clash with EAM
        GRE_aris_velouchiotis = { set_nationality = event_target:hellenic_state }               # Stayed obv.
        GRE_georgios_grivas = { set_nationality = event_target:hellenic_state }                 # Organization X, fully anticommunist too.
        GRE_emmanouil_mantakas = { set_nationality = event_target:hellenic_state }              # EAM
        GRE_napoleon_zervas = { set_nationality = event_target:hellenic_state }                 # EDES
        GRE_nikolaos_plastiras = { set_nationality = GRE }                                      # Norm: Went to Vichy, Maniadakis pulled strings so he doesnt return to Greece. Oikoumeniki: GiE
        GRE_panagiotis_demestichas = { set_nationality = event_target:hellenic_state }          # Minister of Inferior @ Tsolakoglou
        GRE_georgios_tsolakoglou = { set_nationality = event_target:hellenic_state }            # Duh
        GRE_evripidis_bakirtzis = { set_nationality = event_target:hellenic_state }             # EAM
        GRE_georgios_kosmas = { set_nationality = event_target:hellenic_state }                 # Imprisoned by Germans (with 4 more)
        GRE_georgios_stanotas = { set_nationality = event_target:hellenic_state }               # Escaped to GiE in 1943
        GRE_ioannis_kotoulas = { set_nationality = GRE }                                        # Couldnt find shit, so GiE
        GRE_ioannis_pitsikas = { set_nationality = event_target:hellenic_state }                # Imprisoned by Germans (with 4 more)
        GRE_konstantinos_bakopoulos = { set_nationality = event_target:hellenic_state }         # Imprisoned by Germans (with 4 more)
        GRE_konstantinos_davakis = { set_nationality = event_target:hellenic_state }            # Imprisoned by Germans, died in ship accident while going to Italy
        GRE_konstantinos_ventiris = { set_nationality = event_target:hellenic_state }           # Stayed, leader of P.A.N, went to GiE in spring of 1944
        GRE_stefanos_sarafis = { set_nationality = event_target:hellenic_state }                # Stayed, AAA, tried to bring res groups together, captured by EAM, accepted to join and became a leader 
        GRE_theodoros_makridis = { set_nationality = event_target:hellenic_state }              # Leader figure in EAM (+teaching role as he was very capable in mil. tactics), anti-british
        GRE_christodoulos_tsigantes = { set_nationality = event_target:hellenic_state }         # Stayed, left for GiE in 1942.
        GRE_odysseas_aggelis = { set_nationality = GRE }                                        # GiE
        GRE_ioannis_sotiris_alexakis = { set_nationality = GRE }                                # GiE
        GRE_konstantinos_dovas = { set_nationality = event_target:hellenic_state }              # Theros resistance group
        GRE_athanasios_frontistis = { set_nationality = event_target:hellenic_state }           # PAO resistance group
        GRE_dimitrios_giatzis = { set_nationality = GRE }                                       # GiE
        GRE_solon_gikas = { set_nationality = event_target:hellenic_state }                     # Was captured in Chania Coup, fled to GiE in 1943
        GRE_paulos_giparis = { set_nationality = GRE }                                          # GiE immediately after Crete
        GRE_ignatios_kallergis = { set_nationality = GRE }                                      # Was not reinstated during war, 9/1941 through Ikaria went to Turkey and then to Cairo. Recalled in 12-12-1941
        GRE_pausanias_katsotas = { set_nationality = GRE }                                      # GiE
        GRE_anastasios_ntalipis = { set_nationality = GRE }                                     # GiE
        GRE_ioannis_paparrodou = { set_nationality = GRE }                                      # GiE if survived
        GRE_alexandros_rossios = { set_nationality = event_target:hellenic_state }              # Stayed, EAM
        GRE_panagiotis_spiliotopoulos = { set_nationality = event_target:hellenic_state }       # Theros, was assigned garrisson commander by occ. forces under Tsolakoglou          
        GRE_thrasivoulos_tsakalotos = { set_nationality = event_target:hellenic_state }         # Theros, left for Egypt in 1943.
        GRE_konstantinos_versis = { set_nationality = GRE }                                     # Suicide, when Tsolakoglou capitulated
        GRE_vasilios_vrachnos = { set_nationality = event_target:hellenic_state }               # Resistance Group Agnosti Merarchia, captured and sent to Germany.
        GRE_alexandros_sakellariou = { set_nationality = GRE }                                  # Minister of Naval Affairs GiE
        GRE_ioannis_demestichas = { set_nationality = event_target:hellenic_state }             # Stayed, fled to GiE in 1943
        GRE_epameinondas_kavvadias = { set_nationality = GRE }                                  # GiE
        GRE_dimitrios_loundras = { set_nationality = GRE }                                      # Prob GiE
        GRE_dimitrios_oikonomou = { set_nationality = GRE }                                     # Served in the Directorate-General of the Navy in the Ministry of National Defence of the collaborationist government in 1941–43
        GRE_ioannis_toubas = { set_nationality = GRE }                                          # GiE
        GRE_petros_voulgaris = { set_nationality = event_target:hellenic_state }                # Went to Private Sector
        GRE_spyridon_avgeris = { set_nationality = event_target:hellenic_state }                # Served in 1941–42 in the collaborationist government's Ministry of National Defence. In February 1942 he tried to escape to the Middle East and join the forces of the Greek government-in-exile, but he suffered a shipwreck on 18 February and managed only after many difficulties to reach his destination, joining the Greek Armed Forces in the Middle East on 15 May.
        GRE_miltiadis_iatridis = { set_nationality = GRE }                                      # GiE, led the Papanikolis to Allied-controlled Egypt. For the remainder of the war, he was assigned mostly shore duties, largely because of his often strained relationship with superiors. 
        GRE_pyrros_spyromilios = { set_nationality = GRE }                                      # GiE
        GRE_marinos_mitralexis = { set_nationality = GRE }                                      # GiE
        GRE_ioannis_kellas = { set_nationality = GRE }
        every_unit_leader = {
            limit = { NOT = { has_character_flag = og_char } }
            random_list = {
                seed = random
                50 = { set_nationality = GRE }
                50 = { set_nationality = event_target:hellenic_state }
            }
        }
    }
}

#########################################################
##################[GOVERNMENT IN EXILE]##################
#########################################################
GRE_calculate_government_in_exile = {
    if = { 
        limit = { check_variable = { legitimacy = -1 } }
        set_variable = { GRE_weekly_manpower_in_exile = 1250 }
    }
    else = {
        set_temp_variable = { x = GRE.exiled_government_strength }
        multiply_temp_variable = { x = 10 }
        set_variable = { GRE_weekly_manpower_in_exile = x }
    }
}

GRE_government_in_exile_setup = {
    set_temp_variable = { cnt = 0 }
    every_country = {
        limit = {
            is_in_array = {
                array = global.favor_mechanic
                value = THIS.id
            }
            is_major = yes
            is_in_faction_with = GRE
        }
        if = {
            limit = {
                check_variable = { var = favor@GRE value = 30 compare = less_than }
            }
            add_to_temp_variable = { cnt = -1 }
        }
        else_if = {
            limit = {
                check_variable = { var = favor@GRE value = 30 compare = greater_than_or_equals }
                check_variable = { var = favor@GRE value = 50 compare = less_than }
            }
            add_to_temp_variable = { cnt = 0 }
        }
        else_if = {
            limit = { 
                check_variable = { var = favor@GRE value = 50 compare = greater_than_or_equals }
                check_variable = { var = favor@GRE value = 80 compare = less_than }
            }
            add_to_temp_variable = { cnt = 1 }
        }
        else_if = {
            limit = {  
                check_variable = { var = favor@GRE value = 80 compare = greater_than_or_equals }
            }
            add_to_temp_variable = { cnt = 2 }
        }
        if = {
            limit = { original_tag = ENG }
            add_to_temp_variable = { cnt = 1 }
        }
    }
    if = {
        limit = { GRE = { has_dynamic_modifier = { modifier = GRE_grand_coalition_dynamic } } }
        add_to_temp_variable = { cnt = 3 }
    }  
    if = {
        limit = { GRE = { has_completed_focus = GRE_crete_holds } }
        add_to_temp_variable = { cnt = 3 }
    }
    #############################################
    if = { 
        limit = { check_variable = { cnt > 10 } }
        set_variable = { GRE.exiled_government_strength = 100 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 9 } }
        set_variable = { GRE.exiled_government_strength = 90 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 8 } }
        set_variable = { GRE.exiled_government_strength = 80 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 7 } }
        set_variable = { GRE.exiled_government_strength = 70 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 6 } }
        set_variable = { GRE.exiled_government_strength = 60 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 5 } }
        set_variable = { GRE.exiled_government_strength = 50 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 4 } }
        set_variable = { GRE.exiled_government_strength = 40 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 3 } }
        set_variable = { GRE.exiled_government_strength = 30 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 2 } }
        set_variable = { GRE.exiled_government_strength = 20 } 
    }
    else_if = {
        limit = { check_variable = { cnt > 1 } }
        set_variable = { GRE.exiled_government_strength = 10 } 
    }
}

GRE_issue_of_relocation = {
    if = {
        limit = { has_completed_focus = GRE_crete_holds }
        hidden_effect = { gre_hs_xor = yes var:event_sender = { country_event = { id = hellas.1013 days = 0 } } }
    }
    else = {
        hidden_effect = { gre_hs_xor = yes var:event_sender = { country_event = { id = hellas.1014 days = 0 } } }
    }
}

#########################################################
#########################################################
#########################################################
GER_pops_in_crete = {
    GER = {
        division_template = {
            name = "Fallschirmjäger Division - Unternehmen Merkur"
            division_names_group = GER_PAR_01
            priority = 2
            template_counter = 0
            regiments = {
                paratrooper = { x = 0 y = 0 }
                paratrooper = { x = 0 y = 1 }
                paratrooper = { x = 0 y = 2 }
                paratrooper = { x = 0 y = 3 }
                paratrooper = { x = 1 y = 0 }
                paratrooper = { x = 1 y = 1 }
                paratrooper = { x = 1 y = 2 }
                paratrooper = { x = 1 y = 3 }
                paratrooper = { x = 2 y = 0 }
                paratrooper = { x = 2 y = 1 }
                paratrooper = { x = 2 y = 2 }
                paratrooper = { x = 2 y = 3 }
                paratrooper = { x = 3 y = 0 }
                paratrooper = { x = 3 y = 1 }
                paratrooper = { x = 3 y = 2 }
                paratrooper = { x = 3 y = 3 }
            }
            support = { 
                artillery = { x = 0 y = 0 }
                engineer = { x = 0 y = 1 }
            } 
        }
        add_manpower = -100000
        GRE = { transfer_state = 299 }
        GER = { set_state_controller = 182 }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 1 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 1164
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 2 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 3 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 9940
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 4 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 4170
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 5 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        182 = {
            create_unit = {
                division = "division_name = { is_name_ordered = yes name_order = 6 } division_template = \"Fallschirmjäger Division - Unternehmen Merkur\" start_experience_factor = 1 start_equipment_factor = 1"
                owner = GER
                prioritize_location = 12058
            }
        }
        GRE = { set_state_controller = 182 }
        ENG = { transfer_state = 299 }
    }
}

spawn_subs = { 
    for_each_loop = {                                                          ## For here is either 1->6 or 1->12 depending on what we set before.
        array = ship_builder
        
        if = {
            limit = {
                FROM = { original_tag = GER }
            }
            add_equipment_production = {
                equipment = {
                    type = ship_hull_submarine_3
                    creator = "GRE"
                    version_name = "U-boat Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
        else = {
            add_equipment_production = {
                equipment = {
                    type = ship_hull_submarine_3
                    creator = "GRE"
                    version_name = "Undine Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
    }
    clear_array = ship_builder
}

spawn_ships = { 
    for_each_loop = {
        array = ship_builder
        
        if = {
            limit = {
                FROM = { original_tag = ENG }
            }
            add_equipment_production = {
                equipment = {
                    type = ship_hull_light_3
                    creator = "GRE"
                    version_name = "J/K/N Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
        else = {
            add_equipment_production = {
                equipment = {
                    type = ship_hull_light_3
                    creator = "GRE"
                    version_name = "Benson & Gleaves Class"
                }  
                requested_factories = 1
                progress = 0.99
                amount = 1
            }
        }
    }
    clear_array = ship_builder
}

#############################################################################################################################################################################################
##############################################################################[ ???? SCRIPTED EFFECTS ]############################################################################
#############################################################################################################################################################################################




#############################################################################################################################################
#########################################################[     FACTION SPECIFIC    ]#########################################################
#############################################################################################################################################

#############################################################################################
####################################[ THE HELLENIC ARMY ]####################################
#############################################################################################

###[Parameters]###
#1. Overall Effect Multiplier
#2. Faction Relationship
#3. Overall Military Grip
#4. Overall Military Relationship (Player with Military)
###[Effects]###
#1. Weekly Relations
#2. Daily PP
#3. Daily CP
#4. Assignment Cost
#5. Intel to Others
#6. Civil War Events (+ effect if it happens)
#7. Party Power-Up events (grants up to a specific amount)

#######################################################[Description]######################################################
#       Overall Military Grip defines the base magnitude of the effects.                                                 #
#           + Affects WRI(++) PP(++), CP(+++), AC(+++), I2O(+), Civil War Events (++++), Party Power-Up Events (++++)    #
#       Faction relationship defines how harsh the effects are, or how beneficial.                                       #
#           + Affects PP(+++), CP(++), AC(++), I2O(++++), Civil War Events(++), Party Power-Up Events (_)                #
#       Overall Effect Multiplier multiplies everything by itself in the end to express magnitude of political party.    #
#       Overall Military Relationship scales positive/negative to e.g. 1.05/0.95                                         #
#       Three states: Hostile / Neutral / Friendly (fluid though)                                                        #
#           + These states define whether negative/dependent/positive effects are applied                                #
#              -> Hostile: PP, CP, AC, I2O, CWE, PPUE (ascending = more power, worse effects), WRI (more power, better)  #
#              -> Neutral: WRI (more=better), PP, CP, PPUE (ascending). AC, I2O, CWE (irrelevant)                        #
#              -> Positive: WRI, PP, CP, AC, I2O, PPUE (ascending = more power, better effects), CWE (irrelevant)        #
#              Hostile:[0,40), Neutral:[40,60), Positive:[60,100]                                                        #
#       Military Grip Levels: (0,5), (5,10), (10,15), (15,30), (30,40), (40,50), (50,70), (70,90), (90,100)              #
##########################################################################################################################
#       Base Min-Max (each faction):
#       WRI: from -0.05-> 0.15
#       PP:  from -0.4 -> 0.2
#       CP:  from -0.2 -> 0.4
#       AC:  from +10  -> -2.5      (cant go below 0, meaning you cant get cp for assigning)
#       I2O: from +25  -> -5
#       CWE: from +50% -> xxx       (only applies on negative cases)
#       PUE: from -50% -> +50%      (temp)
##
# Formula:
#   For Negative Effects:
#     1-(FR/40) => 1st percentage
#   For Neutral Effects:
#    (FR-40)/20 => 1st percentage
#   For Positive Effects:
#    (FR-60)/40 => 1st percentage
#   For All Effects:
#     4*MG/100  => 2nd percentage
#  x ----------------------------- 
#           final percentage        x       Base Min/Max value.

shutdown_gre_the_army_dyn = {
    clear_variable = gre_the_army_pp
    clear_variable = gre_the_army_cp
    clear_variable = gre_the_army_cp_cost
    clear_variable = gre_the_army_intel_to_others
    clear_variable = gre_the_army_mon
    clear_variable = gre_the_army_dem
    clear_variable = gre_the_army_com
    clear_variable = gre_the_army_fas
    clear_variable = mon_wri
    clear_variable = mon_ppue_freq
    clear_variable = mon_dpp
    clear_variable = mon_dcp
    clear_variable = mon_ac
    clear_variable = mon_i2o
    clear_variable = mon_cwe_freq
    clear_variable = dem_wri
    clear_variable = dem_ppue_freq
    clear_variable = dem_dpp
    clear_variable = dem_dcp
    clear_variable = dem_ac
    clear_variable = dem_i2o
    clear_variable = dem_cwe_freq
    clear_variable = com_wri
    clear_variable = com_ppue_freq
    clear_variable = com_dpp
    clear_variable = com_dcp
    clear_variable = com_ac
    clear_variable = com_i2o
    clear_variable = com_cwe_freq
    clear_variable = fas_wri
    clear_variable = fas_ppue_freq
    clear_variable = fas_dpp
    clear_variable = fas_dcp
    clear_variable = fas_ac
    clear_variable = fas_i2o
    clear_variable = fas_cwe_freq
}

update_gre_the_army_dyn = {
    ###[Main Calcs]###
    calculate_faction_effects_due_to_military_status = yes
    ###[Apply Faction Effect Multiplier]###
    multiply_variable = { GRE.mon_wri = fct_mon_effect_multiplier }
    #multiply_variable = { GRE.mon_ppue_freq = fct_mon_effect_multiplier }
    multiply_variable = { GRE.mon_dpp = fct_mon_effect_multiplier }
    multiply_variable = { GRE.mon_dcp = fct_mon_effect_multiplier }
    multiply_variable = { GRE.mon_ac = fct_mon_effect_multiplier }
    multiply_variable = { GRE.mon_i2o = fct_mon_effect_multiplier }
    multiply_variable = { GRE.mon_cwe_freq = fct_mon_effect_multiplier }
    #
    multiply_variable = { GRE.dem_wri = fct_dem_effect_multiplier }
    #multiply_variable = { GRE.dem_ppue_freq = fct_dem_effect_multiplier }
    multiply_variable = { GRE.dem_dpp = fct_dem_effect_multiplier }
    multiply_variable = { GRE.dem_dcp = fct_dem_effect_multiplier }
    multiply_variable = { GRE.dem_ac = fct_dem_effect_multiplier }
    multiply_variable = { GRE.dem_i2o = fct_dem_effect_multiplier }
    multiply_variable = { GRE.dem_cwe_freq = fct_dem_effect_multiplier }
    #
    multiply_variable = { GRE.com_wri = fct_com_effect_multiplier }
    #multiply_variable = { GRE.com_ppue_freq = fct_com_effect_multiplier }
    multiply_variable = { GRE.com_dpp = fct_com_effect_multiplier }
    multiply_variable = { GRE.com_dcp = fct_com_effect_multiplier }
    multiply_variable = { GRE.com_ac = fct_com_effect_multiplier }
    multiply_variable = { GRE.com_i2o = fct_com_effect_multiplier }
    multiply_variable = { GRE.com_cwe_freq = fct_com_effect_multiplier }
    #
    multiply_variable = { GRE.fas_wri = fct_fas_effect_multiplier }
    #multiply_variable = { GRE.fas_ppue_freq = fct_fas_effect_multiplier }
    multiply_variable = { GRE.fas_dpp = fct_fas_effect_multiplier }
    multiply_variable = { GRE.fas_dcp = fct_fas_effect_multiplier }
    multiply_variable = { GRE.fas_ac = fct_fas_effect_multiplier }
    multiply_variable = { GRE.fas_i2o = fct_fas_effect_multiplier }
    multiply_variable = { GRE.fas_cwe_freq = fct_fas_effect_multiplier }
    ###[Add]###
    set_temp_variable = { adder = 0 }
    add_to_temp_variable = { adder = GRE.mon_dpp }
    add_to_temp_variable = { adder = GRE.dem_dpp }
    add_to_temp_variable = { adder = GRE.com_dpp }
    add_to_temp_variable = { adder = GRE.fas_dpp }
    set_variable = { gre_the_army_pp = adder }
    set_temp_variable = { adder = 0.10 }
    add_to_temp_variable = { adder = GRE.mon_dcp }
    add_to_temp_variable = { adder = GRE.dem_dcp }
    add_to_temp_variable = { adder = GRE.com_dcp }
    add_to_temp_variable = { adder = GRE.fas_dcp }
    set_variable = { gre_the_army_cp = adder }
    set_temp_variable = { adder = 10 }
    add_to_temp_variable = { adder = GRE.mon_ac }
    add_to_temp_variable = { adder = GRE.dem_ac }
    add_to_temp_variable = { adder = GRE.com_ac }
    add_to_temp_variable = { adder = GRE.fas_ac }
    set_variable = { gre_the_army_cp_cost = adder }
    set_temp_variable = { adder = 0 }
    add_to_temp_variable = { adder = GRE.mon_i2o }
    add_to_temp_variable = { adder = GRE.dem_i2o }
    add_to_temp_variable = { adder = GRE.com_i2o }
    add_to_temp_variable = { adder = GRE.fas_i2o }
    set_variable = { gre_the_army_intel_to_others = adder }
    set_variable = { gre_the_army_mon = GRE.mon_wri }
    set_variable = { gre_the_army_dem = GRE.dem_wri }
    set_variable = { gre_the_army_com = GRE.com_wri }
    set_variable = { gre_the_army_fas = GRE.fas_wri }
}

calculate_faction_effects_due_to_military_status = {
    ###[Monarchists]###
    set_temp_variable = { tmpF = 0 }
    calculate_mg_percentage = yes
    #[WRI]#
    calculate_wri_passer = yes
    set_variable = { GRE.mon_wri = passer }
    #[PPUE]#
    set_variable = { GRE.mon_ppue_freq = mg }
    if = {
        limit = { is_faction_tmpF_hostile = yes }
        calculate_fr_fperc_percentages_hostile = yes
        #[PP]#
        set_temp_variable = { passer = -0.3 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = -0.2 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = 10 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = 25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_i2o = passer }
        #[CWE]#
        set_variable = { GRE.mon_cwe_freq = mg }
    }
    else_if = {
        limit = { is_faction_tmpF_neutral = yes }
        calculate_fr_fperc_percentages_neutral = yes
        #[PP]#
        set_temp_variable = { passer = 0.02 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dcp = passer }
        #[Invalids]#
        set_variable = { GRE.mon_ac = 0 }
        set_variable = { GRE.mon_i2o = 0 }
        set_variable = { GRE.mon_cwe_freq = 0 }
    }
    else = {
        calculate_fr_fperc_percentages_positive = yes 
        #[PP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.08 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = -0.5 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = -1.25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.mon_i2o = passer }
    }
    ###[Democrats]###
    set_temp_variable = { tmpF = 1 }
    calculate_mg_percentage = yes
    #[WRI]#
    calculate_wri_passer = yes
    set_variable = { GRE.dem_wri = passer }
    #[PPUE]#
    set_variable = { GRE.dem_ppue_freq = mg }
    if = {
        limit = { is_faction_tmpF_hostile = yes }
        calculate_fr_fperc_percentages_hostile = yes
        #[PP]#
        set_temp_variable = { passer = -0.3 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = -0.2 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = 10 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = 25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_i2o = passer }
        #[CWE]#
        set_variable = { GRE.dem_cwe_freq = mg }
    }
    else_if = {
        limit = { is_faction_tmpF_neutral = yes }
        calculate_fr_fperc_percentages_neutral = yes
        #[PP]#
        set_temp_variable = { passer = 0.02 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dcp = passer }
        #[Invalids]#
        set_variable = { GRE.dem_ac = 0 }
        set_variable = { GRE.dem_i2o = 0 }
        set_variable = { GRE.dem_cwe_freq = 0 }
    }
    else = {
        calculate_fr_fperc_percentages_positive = yes 
        #[PP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.08 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = -0.5 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = -1.25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.dem_i2o = passer }
    }
    ###[Communists]###
    set_temp_variable = { tmpF = 2 }
    calculate_mg_percentage = yes
    #[WRI]#
    calculate_wri_passer = yes
    set_variable = { GRE.com_wri = passer}
    #[PPUE]#
    set_variable = { GRE.com_ppue_freq = mg }
    if = {
        limit = { is_faction_tmpF_hostile = yes }
        calculate_fr_fperc_percentages_hostile = yes
        #[PP]#
        set_temp_variable = { passer = -0.3 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = -0.2 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = 10 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = 25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_i2o = passer }
        #[CWE]#
        set_variable = { GRE.com_cwe_freq = mg }
    }
    else_if = {
        limit = { is_faction_tmpF_neutral = yes }
        calculate_fr_fperc_percentages_neutral = yes
        #[PP]#
        set_temp_variable = { passer = 0.02 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dcp = passer }
        #[Invalids]#
        set_variable = { GRE.com_ac = 0 }
        set_variable = { GRE.com_i2o = 0 }
        set_variable = { GRE.com_cwe_freq = 0 }
    }
    else = {
        calculate_fr_fperc_percentages_positive = yes 
        #[PP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.08 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = -0.5 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = -1.25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.com_i2o = passer }
    }
    ###[Fascists]###
    set_temp_variable = { tmpF = 3 }
    calculate_mg_percentage = yes
    #[WRI]#
    calculate_wri_passer = yes
    set_variable = { GRE.fas_wri = passer}
    #[PPUE]#
    set_variable = { GRE.fas_ppue_freq = mg }
    if = {
        limit = { is_faction_tmpF_hostile = yes }
        calculate_fr_fperc_percentages_hostile = yes
        #[PP]#
        set_temp_variable = { passer = -0.3 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = -0.2 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = 10 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = 25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_i2o = passer }
        #[CWE]#
        set_variable = { GRE.fas_cwe_freq = mg }
    }
    else_if = {
        limit = { is_faction_tmpF_neutral = yes }
        calculate_fr_fperc_percentages_neutral = yes
        #[PP]#
        set_temp_variable = { passer = 0.02 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dcp = passer }
        #[Invalids]#
        set_variable = { GRE.fas_ac = 0 }
        set_variable = { GRE.fas_i2o = 0 }
        set_variable = { GRE.fas_cwe_freq = 0 }
    }
    else = {
        calculate_fr_fperc_percentages_positive = yes 
        #[PP]#
        set_temp_variable = { passer = 0.04 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dpp = passer }
        #[CP]#
        set_temp_variable = { passer = 0.08 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_dcp = passer }
        #[AC]#
        set_temp_variable = { passer = -0.5 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_ac = passer }
        #[I2O]#
        set_temp_variable = { passer = -1.25 }
        multiply_temp_variable = { passer = fperc }
        set_variable = { GRE.fas_i2o = passer }
    }
}

calculate_mg_percentage = {
    if = {
        limit = { check_variable = { tmpF = 0 } }
        set_temp_variable = { mg = GRE.final_mon_military_weight }
    }
    else_if = {
        limit = { check_variable = { tmpF = 1 } }
        set_temp_variable = { mg = GRE.final_dem_military_weight }
    }
    else_if = {
        limit = { check_variable = { tmpF = 2 } }
        set_temp_variable = { mg = GRE.final_com_military_weight }
    }
    else_if = {
        limit = { check_variable = { tmpF = 3 } }
        set_temp_variable = { mg = GRE.final_fas_military_weight }
    }
    multiply_temp_variable = { mg = 0.04 }
    if = { limit = { check_variable = { mg = 0 } } set_temp_variable = { mg = 0.005 } }
}

calculate_wri_passer = {
    if = { 
        limit = { check_variable = { mg < 0.6 } }        #That means less than 15% military grip.
        set_temp_variable = { passer = 1 }
        divide_temp_variable = { passer = mg }
        multiply_temp_variable = { passer = -0.04 }
    }
    else = {                                             #If more than 15% military grip.
        set_temp_variable = { passer = mg }
        multiply_temp_variable = { passer = 0.12 }
    }
}

calculate_fr_fperc_percentages_hostile = {
    if = {
        limit = { check_variable = { tmpF = 0 } }
        set_temp_variable = { tmp = fct_mon }
    }
    else_if = {
        limit = { check_variable = { tmpF = 1 } }
        set_temp_variable = { tmp = fct_dem }
    }
    else_if = {
        limit = { check_variable = { tmpF = 2 } }
        set_temp_variable = { tmp = fct_com }
    }
    else_if = {
        limit = { check_variable = { tmpF = 3 } }
        set_temp_variable = { tmp = fct_fas }
    }
    set_temp_variable = { fr = 1 }
    divide_temp_variable = { tmp = 40 }
    subtract_from_temp_variable = { fr = tmp }
    set_temp_variable = { fperc = mg }
    multiply_temp_variable = { fperc = fr }
}

calculate_fr_fperc_percentages_neutral = {
    if = {
        limit = { check_variable = { tmpF = 0 } }
        set_temp_variable = { fr = fct_mon }
    }
    else_if = {
        limit = { check_variable = { tmpF = 1 } }
        set_temp_variable = { fr = fct_dem }
    }
    else_if = {
        limit = { check_variable = { tmpF = 2 } }
        set_temp_variable = { fr = fct_com }
    }
    else_if = {
        limit = { check_variable = { tmpF = 3 } }
        set_temp_variable = { fr = fct_fas }
    }
    subtract_from_temp_variable = { fr = 40 }
    divide_temp_variable = { fr = 20 }
    set_temp_variable = { fperc = mg }
    multiply_temp_variable = { fperc = fr }
}

calculate_fr_fperc_percentages_positive = {
    if = {
        limit = { check_variable = { tmpF = 0 } }
        set_temp_variable = { fr = fct_mon }
    }
    else_if = {
        limit = { check_variable = { tmpF = 1 } }
        set_temp_variable = { fr = fct_dem }
    }
    else_if = {
        limit = { check_variable = { tmpF = 2 } }
        set_temp_variable = { fr = fct_com }
    }
    else_if = {
        limit = { check_variable = { tmpF = 3 } }
        set_temp_variable = { fr = fct_fas }
    }
    subtract_from_temp_variable = { fr = 60 }
    divide_temp_variable = { fr = 40 }
    set_temp_variable = { fperc = mg }
    multiply_temp_variable = { fperc = fr }
}



#######################################################################################
####################################[ RANDOMIZERS ]####################################
#######################################################################################
randomize_temp_mon = {
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    set_temp_variable = { replacer = tmp_mon }
    multiply_temp_variable = { replacer = vardifier }
    add_to_variable = { fct_mon = replacer }
    custom_effect_tooltip = mon_fct_imp_tt 
    faction_gui_call = yes
}
####
randomize_temp_com= {
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    set_temp_variable = { replacer = tmp_com }
    multiply_temp_variable = { replacer = vardifier }
    add_to_variable = { fct_com= replacer }
    custom_effect_tooltip = com_fct_imp_tt 
}
####
randomize_temp_dem = {
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    set_temp_variable = { replacer = tmp_dem }
    multiply_temp_variable = { replacer = vardifier }
    add_to_variable = { fct_dem = replacer }
    custom_effect_tooltip = fact_inf_tt 
    custom_effect_tooltip = dem_fct_imp_tt 
}
####
randomize_temp_fas = {
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    set_temp_variable = { replacer = tmp_fas }
    multiply_temp_variable = { replacer = vardifier }
    add_to_variable = { fct_fas = replacer }
    custom_effect_tooltip = fas_fct_imp_tt 
}
###########################################################################################################
set_temp_mon_immense = { set_temp_variable = { tmp_mon = 6 } randomize_temp_mon = yes }
set_temp_mon_favourable = { set_temp_variable = { tmp_mon = 4 } randomize_temp_mon = yes }
set_temp_mon_beneficial = { set_temp_variable = { tmp_mon = 2.5 } randomize_temp_mon = yes }
set_temp_mon_slightly_beneficial = { set_temp_variable = { tmp_mon = 1.5 } randomize_temp_mon = yes }
set_temp_mon_insignificant_positive = { set_temp_variable = { tmp_mon = 0.75 } randomize_temp_mon = yes }
set_temp_mon_insignificant = { set_temp_variable = { tmp_mon = 0 } randomize_temp_mon = yes }
set_temp_mon_insignificant_negative = { set_temp_variable = { tmp_mon = -0.75 } randomize_temp_mon = yes }
set_temp_mon_slightly_detrimental = { set_temp_variable = { tmp_mon = -1.5 } randomize_temp_mon = yes }
set_temp_mon_detrimental  = { set_temp_variable = { tmp_mon = -2.5 } randomize_temp_mon = yes }
set_temp_mon_adverse = { set_temp_variable = { tmp_mon = -4 } randomize_temp_mon = yes }
set_temp_mon_catastrophic = { set_temp_variable = { tmp_mon = -6 } randomize_temp_mon = yes }
###########################################################################################################
set_temp_com_immense = { set_temp_variable = { tmp_com = 6 } randomize_temp_com = yes }
set_temp_com_favourable = { set_temp_variable = { tmp_com = 4 } randomize_temp_com = yes }
set_temp_com_beneficial = { set_temp_variable = { tmp_com = 2.5 } randomize_temp_com = yes }
set_temp_com_slightly_beneficial = { set_temp_variable = { tmp_com = 1.5 } randomize_temp_com = yes }
set_temp_com_insignificant_positive = { set_temp_variable = { tmp_com = 0.75 } randomize_temp_com = yes }
set_temp_com_insignificant = { set_temp_variable = { tmp_com = 0 } randomize_temp_com = yes }
set_temp_com_insignificant_negative = { set_temp_variable = { tmp_com = -0.75 } randomize_temp_com = yes }
set_temp_com_slightly_detrimental = { set_temp_variable = { tmp_com = -1.5 } randomize_temp_com = yes }
set_temp_com_detrimental  = { set_temp_variable = { tmp_com = -2.5 } randomize_temp_com = yes }
set_temp_com_adverse = { set_temp_variable = { tmp_com = -4 } randomize_temp_com = yes }
set_temp_com_catastrophic = { set_temp_variable = { tmp_com = -6 } randomize_temp_com = yes }
###########################################################################################################
set_temp_fas_immense = { set_temp_variable = { tmp_fas = 6 } randomize_temp_fas = yes }
set_temp_fas_favourable = { set_temp_variable = { tmp_fas = 4 } randomize_temp_fas = yes }
set_temp_fas_beneficial = { set_temp_variable = { tmp_fas = 2.5 } randomize_temp_fas = yes }
set_temp_fas_slightly_beneficial = { set_temp_variable = { tmp_fas = 1.5 } randomize_temp_fas = yes }
set_temp_fas_insignificant_positive = { set_temp_variable = { tmp_fas = 0.75 } randomize_temp_fas = yes }
set_temp_fas_insignificant = { set_temp_variable = { tmp_fas = 0 } randomize_temp_fas = yes }
set_temp_fas_insignificant_negative = { set_temp_variable = { tmp_fas = -0.75 } randomize_temp_fas = yes }
set_temp_fas_slightly_detrimental = { set_temp_variable = { tmp_fas = -1.5 } randomize_temp_fas = yes }
set_temp_fas_detrimental  = { set_temp_variable = { tmp_fas = -2.5 } randomize_temp_fas = yes }
set_temp_fas_adverse = { set_temp_variable = { tmp_fas = -4 } randomize_temp_fas = yes }
set_temp_fas_catastrophic = { set_temp_variable = { tmp_fas = -6 } randomize_temp_fas = yes }
###########################################################################################################
set_temp_dem_immense = { set_temp_variable = { tmp_dem = 6 } randomize_temp_dem = yes }
set_temp_dem_favourable = { set_temp_variable = { tmp_dem = 4 } randomize_temp_dem = yes }
set_temp_dem_beneficial = { set_temp_variable = { tmp_dem = 2.5 } randomize_temp_dem = yes }
set_temp_dem_slightly_beneficial = { set_temp_variable = { tmp_dem = 1.5 } randomize_temp_dem = yes }
set_temp_dem_insignificant_positive = { set_temp_variable = { tmp_dem = 0.75 } randomize_temp_dem = yes }
set_temp_dem_insignificant = { set_temp_variable = { tmp_dem = 0 } randomize_temp_dem = yes }
set_temp_dem_insignificant_negative = { set_temp_variable = { tmp_dem = -0.75 } randomize_temp_dem = yes }
set_temp_dem_slightly_detrimental = { set_temp_variable = { tmp_dem = -1.5 } randomize_temp_dem = yes }
set_temp_dem_detrimental  = { set_temp_variable = { tmp_dem = -2.5 } randomize_temp_dem = yes }
set_temp_dem_adverse = { set_temp_variable = { tmp_dem = -4 } randomize_temp_dem = yes }
set_temp_dem_catastrophic = { set_temp_variable = { tmp_dem = -6 } randomize_temp_dem = yes }
###########################################################################################################
###########################################################################################################


#############################################################################################
#####################################[ FACTION EFFECTS ]#####################################
#############################################################################################

GRE_faction_refresh = {
    ###Gets called by faction GUI since they are both dependent on the fct_xxx variables and thus can be called together in 1 line###
    hidden_effect = {
        if = { limit = { NOT = { has_country_flag = mon_dealt_with } } GRE_faction_refresh_mon_effect = yes }
        if = { limit = { NOT = { has_country_flag = com_dealt_with } } GRE_faction_refresh_com_effect = yes }
        if = { limit = { NOT = { has_country_flag = dem_dealt_with } } GRE_faction_refresh_dem_effect = yes }
        if = { limit = { NOT = { has_country_flag = fas_dealt_with } } GRE_faction_refresh_fas_effect = yes }
    }
}

GRE_faction_dem_refresh = {
    hidden_effect = {
        if = { limit = { NOT = { has_country_flag = dem_dealt_with } } GRE_faction_refresh_dem_effect = yes }
    }
}
GRE_faction_com_refresh = {
    hidden_effect = {
        if = { limit = { NOT = { has_country_flag = com_dealt_with } } GRE_faction_refresh_com_effect = yes }
    }
}
GRE_faction_fas_refresh = {
    hidden_effect = {
        if = { limit = { NOT = { has_country_flag = fas_dealt_with } } GRE_faction_refresh_fas_effect = yes }
    }
}
GRE_faction_mon_refresh = {
    hidden_effect = {
        if = { limit = { NOT = { has_country_flag = mon_dealt_with } } GRE_faction_refresh_mon_effect = yes }
    }
}

#########################################################
####################[ MONARCHISTS ]######################
#########################################################
GRE_faction_refresh_mon_effect = {

    ##################[ Clamp OEM ]##################
    clamp_variable = { var = fct_mon_effect_multiplier min = 0 max = 4 }
    ##################[ DRIFT ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 1000 }
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_neut_drift = x }
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    } 
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_wr_fct = x }
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_mon}
    if = {
        limit = {
            check_variable = { var = fct_mon value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    divide_temp_variable = { x = 100 }
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_wstb = x }
    divide_temp_variable = { x = 2 }
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_wws = x }    
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_mon}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 } 
    multiply_temp_variable = { x = fct_mon_effect_multiplier }
    set_variable = { GRE_mon_cn_fct = x }     
}

#########################################################
####################[ DEMOCRATS ]########################
#########################################################
GRE_faction_refresh_dem_effect = {

    ##################[ Clamp OEM ]##################
    clamp_variable = { var = fct_dem_effect_multiplier min = 0 max = 4 }
    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 1000 } 
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_neut_drift = x }
    ##################[ DEM DRIFT ]##################
    set_temp_variable = { x = fct_dem}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_dem_drift = x }    
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }       
    }
    if = {
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    }
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_wr_fct = x }   
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_dem}
    if = {
        limit = {
            check_variable = { var = fct_dem value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_wstb = x }
    divide_temp_variable = { x = 2 }
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_wws = x }
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_dem}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = democratic
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_dem_effect_multiplier }
    set_variable = { GRE_dem_cn_fct = x }     
}

#########################################################
####################[ COMMUNISTS ]#######################
#########################################################
GRE_faction_refresh_com_effect = {

    ##################[ Clamp OEM ]##################
    clamp_variable = { var = fct_com_effect_multiplier min = 0 max = 4 }
    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 1000 } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_neut_drift = x }
    ##################[ COM DRIFT ]##################
    set_temp_variable = { x = fct_com}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_com_drift = x } 
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_stb_fct = x }
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_wr_fct = x }
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_com}
    if = {
        limit = {
            check_variable = { var = fct_com value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_wstb = x }
    divide_temp_variable = { x = 2 }
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_wws = x }
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_com}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = communism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_com_effect_multiplier }
    set_variable = { GRE_com_cn_fct = x }     
}

#########################################################
####################[ FASCISTS ]#########################
#########################################################
GRE_faction_refresh_fas_effect = {


    ##################[ Clamp OEM ]##################
    clamp_variable = { var = fct_fas_effect_multiplier min = 0 max = 4 }
    ##################[ NEUT DRIFT ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 1000 } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_neut_drift = x }
    ##################[ FAS DRIFT ]##################
    set_temp_variable = { x = fct_fas}
    multiply_temp_variable = { x = -0.002 }
    add_to_temp_variable = { x = 0.2 } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_fas_drift = x } 
    ##################[ PP_GAIN ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 1000 } 
    subtract_from_temp_variable = { x = 0.05 }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_pp_fct = x }    
    ##################[ STABILITY ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_stb_fct = x } 
    ##################[ WAR SUPPORT ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.006 }
        subtract_from_temp_variable = { x = 0.3}
    }
    else = {
        multiply_temp_variable = { x = 0.001 }
        subtract_from_temp_variable = { x = 0.05 }        
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_wr_fct = x }  
    ##################[ STB/WS WEEKLY ]##################
    set_temp_variable = { x = fct_fas}
    if = {
        limit = {
            check_variable = { var = fct_fas value = 50 compare = less_than }
        }
        multiply_temp_variable = { x = 0.04 }
        subtract_from_temp_variable = { x = 2 }
    }
    else = {
        multiply_temp_variable = { x = 0.005 }
        subtract_from_temp_variable = { x = 0.3 }       
    }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    divide_temp_variable = { x = 100 }
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_wstb = x }
    divide_temp_variable = { x = 2 }
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_wws = x }     
    ##################[ CONSCRIPTION ]##################
    set_temp_variable = { x = fct_fas}
    divide_temp_variable = { x = 4 } 
    subtract_from_temp_variable = { x = 12.5 }
    divide_temp_variable = { x = 100 }
    if = { 
        limit = {
            has_government = fascism
        }
        multiply_temp_variable = { x = 2}
    } 
    multiply_temp_variable = { x = fct_fas_effect_multiplier }
    set_variable = { GRE_fas_cn_fct = x }     
}

######################################################################################
###############################[ Faction Favor Mechanic ]#############################
######################################################################################

GRE_add_faction_favor = {
    #############################[ Ministerial Positions ]############################
    set_temp_variable = { fmon = 0 }
    set_temp_variable = { fdem = 0 }
    set_temp_variable = { fcom = 0 }
    set_temp_variable = { ffas = 0 }
    if = {
        limit = {
            has_idea = GRE_kotzias
        }
        add_to_temp_variable = { ffas = 0.5 }
    }
    if = {
        limit = {
            has_idea = GRE_koryzis
        }
        add_to_temp_variable = { fmon = 0.75 }
        add_to_temp_variable = { fdem = 0.75 }
        add_to_temp_variable = { fcom = 0.75 }
        add_to_temp_variable = { ffas = 0.75 }
    }
    if = {
        limit = {
            has_idea = GRE_dimitratos
        }
        add_to_temp_variable = { fmon = 0.5 }
        add_to_temp_variable = { fdem = 1.0 }
        add_to_temp_variable = { fcom = 1.0 }
        add_to_temp_variable = { ffas = 0.5 }
    
    }
    #############################[ National Spirits ]############################
    if = { limit = { has_idea = GRE_communists_utterly_crushed } 
        add_to_temp_variable = { fcom = -2.25 }
    }
    if = { limit = { has_idea = GRE_republicans_utterly_crushed } 
        add_to_temp_variable = { fdem = -2.25 }
    }
    if = { limit = { has_idea = GRE_spartan_law } 
        add_to_temp_variable = { fdem = -2.00 }
        add_to_temp_variable = { fcom = -2.00 }
    }
    else_if = { limit = { has_idea = GRE_spartan_law_2 } 
        add_to_temp_variable = { fdem = -1.5 }
        add_to_temp_variable = { fcom = -1.5 }
    }
    else_if = { limit = { has_idea = GRE_spartan_law_3 } 
        add_to_temp_variable = { fdem = -1.00 }
        add_to_temp_variable = { fcom = -1.00 }
    }
    else_if = { limit = { has_idea = GRE_spartan_law_4 } 
        add_to_temp_variable = { fdem = -0.5 }
        add_to_temp_variable = { fcom = -0.5 }
    }
    ###############################################################################
    add_to_variable = { fct_mon = fmon } 
    add_to_variable = { fct_dem = fdem } 
    add_to_variable = { fct_com = fcom } 
    add_to_variable = { fct_fas = ffas } 
    faction_gui_call = yes
}

######################################################################################
###############################[ Country Favor Mechanic ]#############################
######################################################################################

GRE_add_favor_weekly = {
    #############################[ Base Value ]############################
    if = {                                                              ### Begins by setting the base value depending on the current opinion between SCOPE and GRE
        limit = {
            has_opinion = { target = GRE value > 89 }                       ##  [80,100] - 4    (-80,-100] - -4
        }                                                                   ##  [50,80)  - 3    (-50,-80]  - -3   
        set_temp_variable = { x = 0.5 }                                     ##  [30,50)  - 2    (-30,-50]  - -2
    }                                                                       ##  (10,30)  - 1    (-10,-30]  - -1
    else_if = {                                                             ##          [-10,10] - 0
        limit = {                                                           
            has_opinion = { target = GRE value > 79 }                       
        }
        set_temp_variable = { x = 0.45 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 69 }  
        }
        set_temp_variable = { x = 0.4 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 59 }  
        }
        set_temp_variable = { x = 0.35 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 49 }  
        }
        set_temp_variable = { x = 0.20 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 39 }  
        }
        set_temp_variable = { x = 0.15 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 29 }  
        }
        set_temp_variable = { x = 0.10 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 9 }  
        }
        set_temp_variable = { x = 0 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -11 }  
        }
        set_temp_variable = { x = -0.25 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -31 }  
        }
        set_temp_variable = { x = -0.5 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -51 }  
        }
        set_temp_variable = { x = -0.75 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -81 }  
        }
        set_temp_variable = { x = -1 }                       
    }
    else = {
        set_temp_variable = { x = -1.25 }                       
    }
    ###########################[ Collaboration ]##############################
    if = {
        limit = { check_variable = { GRE.has_collaboration@THIS > 0 } }
        set_temp_variable = { tmp_collab = GRE.has_collaboration@THIS }
        multiply_temp_variable = { tmp_collab = 1.25 }
        add_to_temp_variable = { x = tmp_collab }
    }
    #############################[ Operatives ]###############################
    #######[Civilian Infiltration]#######
    if = {
        limit = { GRE = { has_operation_token = { tag = PREV token = token_civilian } } }
        add_to_temp_variable = { x = 0.25 }
    }
    #######[Intel Network Level]#######
    if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 80 } } }
        add_to_temp_variable = { x = 0.20 }
    }
    else_if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 50 } } }
        add_to_temp_variable = { x = 0.15 }
    }
    else_if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 20 } } }
        add_to_temp_variable = { x = 0.10 }
    }
    #######[Operative Missions]#######
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = propaganda
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_psycho_warfare } } add_to_temp_variable = { x = 0.25 } } 
        else = { add_to_temp_variable = { x = 0.125 } }
    }
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = control_trade
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_diplo_training } } add_to_temp_variable = { x = 0.25 } }
        else = { add_to_temp_variable = { x = 0.125 } }
    }
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = diplomatic_pressure
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_diplo_training } } add_to_temp_variable = { x = 0.4 } }
        else = { add_to_temp_variable = { x = 0.2 } }
    }
    #############################[ Additional ]###############################
    if = {                                                                                                      ## Tourism always good                                                                                
        limit = { GRE = { has_idea = GRE_booming_tourism } }
        add_to_temp_variable = { x = 0.25 }
    }
    else_if = {                                                                                                 ## Better Tourism always better
        limit = { GRE = { OR = { has_idea = GRE_booming_tourism_2 has_idea = GRE_booming_tourism_3 } } }
        add_to_temp_variable = { x = 0.50 }
    }
    if = {                                                                                                      ## War always bad                                                                                
        limit = { has_war_with = GRE }
        subtract_from_temp_variable = { x = 0.75 }
    }
    if = {                                                                                                      ## Aggr. Pact / Guarantees / Docking = helpful
        limit = { has_non_aggression_pact_with = GRE }
        add_to_temp_variable = { x = 0.20 }
    }
    if = {
        limit = { is_guaranteed_by = GRE }
        add_to_temp_variable = { x = 0.20 }
    }
    if = {
        limit = { has_guaranteed = GRE }
        add_to_temp_variable = { x = 0.15 }
    }
    if = {
        limit = {
            NOT = { has_non_aggression_pact_with = GRE }
            NOT = { is_guaranteed_by = GRE }
            NOT = { has_guaranteed = GRE }
            NOT = { has_war_with = GRE }
            any_allied_country = {
                NOT = { has_war_with = GRE }
                OR = {
                    has_opinion = { target = GRE value > 79 }
                    has_non_aggression_pact_with = GRE
                    is_guaranteed_by = GRE
                    has_guaranteed = GRE
                }
            }
        }
        add_to_temp_variable = { x = 0.15 }
    }
    if = {
        limit = { 
            OR = {
                is_puppet_of = GRE
                is_subject_of = GRE
            }
        }
        add_to_temp_variable = { x = 1.25 }
    }
    ###########################[ Ideology Specific ]############################
    if = {                                                                                                      ## If both nations share the same ideology, give 1 extra point. Otherwise, subtract when
        limit = {
            check_variable = { THIS.current_party_ideology_group = GRE.current_party_ideology_group }
            NOT = { original_tag = BUL }                                                                                    ## Obviously don't do it for the Bulgarians
        }
        add_to_temp_variable = { x = 0.15 }
    }
    else_if = {                                                                                                             ## GRE is neutral and SCOPE is communist (e.g. Metaxas & Soviet Union)
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = neutrality }
        }
        subtract_from_temp_variable = { x = 0.25 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is fascist 
        limit = {
            THIS = { has_government = fascism }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 0.75 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is communist
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 0.75 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 0.5 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 0.5 }
    }
    ##############################[ Attaches ]################################
    if = {
        limit = { has_attache_from = GRE }
        add_to_temp_variable = { x = 1 }
    }
    else_if = {
        limit = { any_allied_country = { has_attache_from = GRE } }
        add_to_temp_variable = { x = 0.75 }
    }
    if = {
        limit = { any_enemy_country = { has_attache_from = GRE } }
        subtract_from_temp_variable = { x = 1 }
    }
    #############################[ Lend Lease ]###############################
    if = {
        limit = { GRE = { is_lend_leasing = PREV } }
        add_to_temp_variable = { x = 0.75 }
    }
    if = {
        limit = { any_enemy_country = { GRE = { is_lend_leasing = PREV } } }
        subtract_from_temp_variable = { x = 0.75 }
    }
    ############################[ AXAL Add/Sub ]##############################
    if = { 
        limit = { GRE = { has_country_flag = GRE_kathestos_proclaimed } }
        return_AXALB_favor = yes
        add_to_temp_variable = { x = axalb }
    }
    ###########################[ Tariff Mechanic ]############################
    if = {                                                                                                             ## Big favor decrease per month that tariffs are active
        limit = { THIS = { has_idea = GRtar_trade_1 } }
        subtract_from_temp_variable = { x = 1.5 }
    }
    else_if = {
        limit = { THIS = { has_idea = GRtar_trade_2 } }
        subtract_from_temp_variable = { x = 2 }
    }
    else_if = {
        limit = { THIS = { has_idea = GRtar_trade_3 } }
        subtract_from_temp_variable = { x = 2.5 }
    }
    ###########################[ Manufacturers ]##############################
    if = {                                                                                                                  ## Tank Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_vickers_armstrong }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_AMX }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_chrysler }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_man }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_osaka_army_arsenal }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_astrov_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    if = {                                                                                                                  ## Naval Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_john_brown_company }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_electric_boat_company }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_blohm_und_voss }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_kure_naval_arsenal }
                    original_tag = JAP
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    if = {                                                                                                                  ## Aircraft Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_supermarine }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_bloch }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_boeing }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_junkers }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_yokosuka }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_mig_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    if = {                                                                                                                  ## Materiel Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_rsaf_enfield }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_mas }
                    original_tag = FRA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_ford_motor_company 
                            has_idea = GRE_springfield_armory
                        }
                    }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_mauser 
                            has_idea = GRE_rheinmetall
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_nissan }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_lancia }
                    original_tag = ITA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_tula_arms_plant 
                            has_idea = GRE_grabin_design_bureau
                        }
                    }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    if = {                                                                                                                  ## Industrial Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_english_electric }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_general_electric }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_krupp 
                            has_idea = GRE_siemens
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_stalingrad_tractor_factory }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    ###########################[ Special Cases ]##############################
    if = {                                                                                                                  ## Italians are harder to influence (obviously)
        limit = {
            original_tag = ITA
            ITA_benito_mussolini = { is_country_leader = yes }
        }
        subtract_from_temp_variable = { x = 0.25 }
    }
    else_if = {                                                                                                              ## So are the Bulgarians going down their claims                                                                                                          
        limit = {
            original_tag = BUL
            has_completed_focus = BUL_bulgarian_irredentism
        }
        subtract_from_temp_variable = { x = 0.25 }
    }
    if = {                                                                                                                   ## Has Kotzias (bonus to GER/ITA/JAP influence)
        limit = {
            original_tag = GER
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 0.5 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = ITA
                original_tag = JAP
            }
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 0.25 }    
    }
    if = {                                                                                                                   ## Has Nelly (bonus to all -SOV/ITA, extra bonus to USA/GER)
        limit = {
            GRE = { has_idea = GRE_nelly }
            NOT = {
                OR = {
                    original_tag = SOV
                    original_tag = ITA
                }
            }
        }
        add_to_temp_variable = { x = 0.25 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = GER
                original_tag = USA
            }
            GRE = { has_idea = GRE_nelly }
        }
        add_to_temp_variable = { x = 0.5 }    
    }
    if = {                                                                                                                   ## Has Karaiskaki (bonus to GER, and its a big one)
        limit = {
            GRE = { has_idea = GRE_karaiskaki }
            original_tag = GER
        }
        add_to_temp_variable = { x = 0.75 }
    }
    #############################[ Influence Decision ]#############################
    if = {
        limit = {
            THIS = { has_country_flag = is_influenced_by_decision }
        }
        add_to_temp_variable = { x = 1.5 }
    }
    #############################[ Neg. Scaling ]#############################
    if = { 
        limit = { check_variable = { x > 0 } }
        if = { limit = { check_variable = { THIS.favor@GRE > 95 } } multiply_temp_variable = { x = 0.5 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 90 } } multiply_temp_variable = { x = 0.6 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 80 } } multiply_temp_variable = { x = 0.75 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 70 } } multiply_temp_variable = { x = 0.9 } }
    }
    #############################[ Randomization ]############################
    set_variable = { THIS.infl_weekly@GRE = x }                                                                                                 ## Debug purposes, check the raw value through console
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    multiply_temp_variable = { x = vardifier }
    add_to_variable = { favor@GRE = x }
    #############################[ Clamping ]################################
    clamp_variable = {
        var = favor@GRE
        min = -80
        max = 100
    }
}

GRE_add_favor = {
    #############################[ Base Value ]############################
    if = {                                                              ### Begins by setting the base value depending on the current opinion between SCOPE and GRE
        limit = {
            has_opinion = { target = GRE value > 89 }                       ##  [80,100] - 4    (-80,-100] - -4
        }                                                                   ##  [50,80)  - 3    (-50,-80]  - -3   
        set_temp_variable = { x = 2 }                                       ##  [30,50)  - 2    (-30,-50]  - -2
    }                                                                       ##  (10,30)  - 1    (-10,-30]  - -1
    else_if = {                                                             ##          [-10,10] - 0
        limit = {                                                           
            has_opinion = { target = GRE value > 79 }                       
        }
        set_temp_variable = { x = 1.75 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 69 }  
        }
        set_temp_variable = { x = 1.5 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 59 }  
        }
        set_temp_variable = { x = 1.25 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 49 }  
        }
        set_temp_variable = { x = 1 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 39 }  
        }
        set_temp_variable = { x = 0.75 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 29 }  
        }
        set_temp_variable = { x = 0.5 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > 9 }  
        }
        set_temp_variable = { x = 0 }                       
    }
    else_if = {                                                 
        limit = {
            has_opinion = { target = GRE value > -11 }  
        }
        set_temp_variable = { x = -1 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -31 }  
        }
        set_temp_variable = { x = -2 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -51 }  
        }
        set_temp_variable = { x = -3 }                       
    }
    else_if = {
        limit = {
            has_opinion = { target = GRE value > -81 }  
        }
        set_temp_variable = { x = -4 }                       
    }
    else = {
        set_temp_variable = { x = -5 }                       
    }
    ###########################[ Collaboration ]##############################
    if = {
        limit = { check_variable = { GRE.has_collaboration@THIS > 0 } }
        set_temp_variable = { tmp_collab = GRE.has_collaboration@THIS }
        multiply_temp_variable = { tmp_collab = 5 }
        add_to_temp_variable = { x = tmp_collab }
    }
    #############################[ Operatives ]###############################
    #######[Civilian Infiltration]#######
    if = {
        limit = { GRE = { has_operation_token = { tag = PREV token = token_civilian } } }
        add_to_temp_variable = { x = 1 }
    }
    #######[Intel Network Level]#######
    if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 80 } } }
        add_to_temp_variable = { x = 0.75 }
    }
    else_if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 50 } } }
        add_to_temp_variable = { x = 0.5 }
    }
    else_if = {
        limit = { GRE = { network_strength = { target = PREV state = PREV.capital value > 20 } } }
        add_to_temp_variable = { x = 0.25 }
    }
    #######[Operative Missions]#######
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = propaganda
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_psycho_warfare } } add_to_temp_variable = { x = 1.0 } } 
        else = { add_to_temp_variable = { x = 0.5 } }
    }
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = control_trade
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_diplo_training } } add_to_temp_variable = { x = 1.0 } }
        else = { add_to_temp_variable = { x = 0.5 } }
    }
    if = {
        limit = {
            GRE = {
                any_operative_leader = {
                    operative_leader_mission = diplomatic_pressure
                    check_variable = { operation_country = PREV.PREV:id }
                }
            }
        }
        if = { limit = { GRE = { has_done_agency_upgrade = upgrade_diplo_training } } add_to_temp_variable = { x = 1.5 } }
        else = { add_to_temp_variable = { x = 0.75 } }
    }
    #############################[ Additional ]###############################
    if = {                                                                                                      ## Tourism always good                                                                                
        limit = { GRE = { has_idea = GRE_booming_tourism } }
        add_to_temp_variable = { x = 0.75 }
    }
    if = {                                                                                                      ## War always bad                                                                                
        limit = { has_war_with = GRE }
        subtract_from_temp_variable = { x = 3 }
    }
    if = {                                                                                                      ## Aggr. Pact / Guarantees / Docking = helpful
        limit = { has_non_aggression_pact_with = GRE }
        add_to_temp_variable = { x = 0.75 }
    }
    if = {
        limit = { is_guaranteed_by = GRE }
        add_to_temp_variable = { x = 0.75 }
    }
    if = {
        limit = { has_guaranteed = GRE }
        add_to_temp_variable = { x = 0.5 }
    }
    if = {
        limit = {
            NOT = { has_non_aggression_pact_with = GRE }
            NOT = { is_guaranteed_by = GRE }
            NOT = { has_guaranteed = GRE }
            NOT = { has_war_with = GRE }
            any_allied_country = {
                NOT = { has_war_with = GRE }
                OR = {
                    has_opinion = { target = GRE value > 79 }
                    has_non_aggression_pact_with = GRE
                    is_guaranteed_by = GRE
                    has_guaranteed = GRE
                }
            }
        }
        add_to_temp_variable = { x = 0.5 }
    }
    if = {
        limit = { 
            OR = {
                is_puppet_of = GRE
                is_subject_of = GRE
            }
        }
        add_to_temp_variable = { x = 5 }
    }
    ###########################[ Ideology Specific ]############################
    if = {                                                                                                      ## If both nations share the same ideology, give 1 extra point. Otherwise, subtract when
        limit = {
            check_variable = { THIS.current_party_ideology_group = GRE.current_party_ideology_group }
            NOT = { original_tag = BUL }                                                                                    ## Obviously don't do it for the Bulgarians
        }
        add_to_temp_variable = { x = 0.5 }
    }
    else_if = {                                                                                                             ## GRE is neutral and SCOPE is communist (e.g. Metaxas & Soviet Union)
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = neutrality }
        }
        subtract_from_temp_variable = { x = 1 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is fascist 
        limit = {
            THIS = { has_government = fascism }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 3 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is communist
        limit = {
            THIS = { has_government = communism }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 3 }
    }
    else_if = {                                                                                                             ## GRE is fascist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = fascism }
        }
        subtract_from_temp_variable = { x = 2 }
    }
    else_if = {                                                                                                             ## GRE is communist and SCOPE is democratic
        limit = {
            THIS = { has_government = democratic }
            GRE = { has_government = communism }
        }
        subtract_from_temp_variable = { x = 2 }
    }
    ###########################[ Tariff Mechanic ]############################
    if = {                                                                                                             ## Big favor decrease per month that tariffs are active
        limit = {
            THIS = { has_idea = GRtar_trade_1 }
        }
        subtract_from_temp_variable = { x = 6 }
    }
    else_if = {                                                                                                            
        limit = {
            THIS = { has_idea = GRtar_trade_2 }
        }
        subtract_from_temp_variable = { x = 8 }
    }
    else_if = {                                                                                                           
        limit = {
            THIS = { has_idea = GRtar_trade_3 }
        }
        subtract_from_temp_variable = { x = 10 }
    }
    ###########################[ Manufacturers ]##############################
    if = {                                                                                                                  ## Tank Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_vickers_armstrong }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_AMX }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_chrysler }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_man }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_osaka_army_arsenal }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_astrov_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Naval Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_john_brown_company }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_electric_boat_company }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_blohm_und_voss }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_kure_naval_arsenal }
                    original_tag = JAP
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Aircraft Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_supermarine }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_bloch }
                    original_tag = FRA
                }
                AND = {
                    GRE = { has_idea = GRE_boeing }
                    original_tag = USA
                }
                AND = {
                    GRE = { has_idea = GRE_junkers }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_yokosuka }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_fiat }
                    original_tag = ITA
                }
                AND = {
                    GRE = { has_idea = GRE_mig_design_bureau }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Materiel Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_rsaf_enfield }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_mas }
                    original_tag = FRA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_ford_motor_company 
                            has_idea = GRE_springfield_armory
                        }
                    }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_mauser 
                            has_idea = GRE_rheinmetall
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_nissan }
                    original_tag = JAP
                }
                AND = {
                    GRE = { has_idea = GRE_lancia }
                    original_tag = ITA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_tula_arms_plant 
                            has_idea = GRE_grabin_design_bureau
                        }
                    }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    if = {                                                                                                                  ## Industrial Manufacturers 
        limit = {
            OR = {
                AND = {
                    GRE = { has_idea = GRE_english_electric }
                    original_tag = ENG
                }
                AND = {
                    GRE = { has_idea = GRE_general_electric }
                    original_tag = USA
                }
                AND = {
                    GRE = { 
                        OR = {
                            has_idea = GRE_krupp 
                            has_idea = GRE_siemens
                        }
                    }
                    original_tag = GER
                }
                AND = {
                    GRE = { has_idea = GRE_stalingrad_tractor_factory }
                    original_tag = SOV
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    ###########################[ Special Cases ]##############################
    if = {                                                                                                                  ## Italians are harder to influence (obviously)
        limit = {
            original_tag = ITA
            has_government = fascism
            has_country_leader = {
                name = "Benito Mussolini"
                ruling_only = yes 
            }
        }
        subtract_from_temp_variable = { x = 1 }
    }
    else_if = {                                                                                                              ## So are the Bulgarians going down their claims                                                                                                          
        limit = {
            original_tag = BUL
            has_completed_focus = BUL_bulgarian_irredentism
        }
        subtract_from_temp_variable = { x = 1 }
    }
    if = {                                                                                                                   ## Has Kotzias (bonus to GER/ITA/JAP influence)
        limit = {
            original_tag = GER
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 2 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = ITA
                original_tag = JAP
            }
            GRE = { has_idea = GRE_kotzias }
        }
        add_to_temp_variable = { x = 1 }    
    }
    if = {                                                                                                                   ## Has Nelly (bonus to all -SOV/ITA, extra bonus to USA/GER)
        limit = {
            GRE = { has_idea = GRE_nelly }
            NOT = {
                OR = {
                    original_tag = SOV
                    original_tag = ITA
                }
            }
        }
        add_to_temp_variable = { x = 1 }
    }
    else_if = {
        limit = {
            OR = {
                original_tag = GER
                original_tag = USA
            }
            GRE = { has_idea = GRE_nelly }
        }
        add_to_temp_variable = { x = 2 }    
    }
    if = {                                                                                                                   ## Has Karaiskaki (bonus to GER, and its a big one)
        limit = {
            GRE = { has_idea = GRE_karaiskaki }
            original_tag = GER
        }
        add_to_temp_variable = { x = 3 }
    }
    #############################[ Neg. Scaling ]#############################
    if = { 
        limit = { check_variable = { x > 0 } }
        if = { limit = { check_variable = { THIS.favor@GRE > 95 } } multiply_temp_variable = { x = 0.5 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 90 } } multiply_temp_variable = { x = 0.6 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 80 } } multiply_temp_variable = { x = 0.75 } }
        else_if = { limit = { check_variable = { THIS.favor@GRE > 70 } } multiply_temp_variable = { x = 0.9 } }
    }
    #############################[ Randomization ]############################
    set_variable = { THIS.y = x }                                                                                                 ## Debug purposes, check the raw value through console
    randomize_temp_variable = {
        var = vardifier
        distribution = uniform
        min = 0.75
        max = 1.25
    }
    multiply_temp_variable = { x = vardifier }
    add_to_variable = { favor@GRE = x }
    #############################[ Clamping ]################################
    clamp_variable = {
        var = favor@GRE
        min = -80
        max = 100
    }
}

######################################################################################
####################################[ Army Reforms ]##################################
######################################################################################



GRE_army_reform_tr = {
    if = {
        limit = {
            has_idea = GRE_army_status_0
        }
        swap_ideas = {
            remove_idea = GRE_army_status_0
            add_idea = GRE_army_status_1
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_1
        }
        swap_ideas = {
            remove_idea = GRE_army_status_1
            add_idea = GRE_army_status_2
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_2
        }
        swap_ideas = {
            remove_idea = GRE_army_status_2
            add_idea = GRE_army_status_3
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_army_status_3
        }
        swap_ideas = {
            remove_idea = GRE_army_status_3
            add_idea = GRE_army_status_4
        }
    }
}

GRE_air_reform_tr = {
    if = {
        limit = {
            has_idea = GRE_airforce_status_0
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_0
            add_idea = GRE_airforce_status_1
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_1
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_1
            add_idea = GRE_airforce_status_2
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_2
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_2
            add_idea = GRE_airforce_status_3
        }
    }
    else_if = {
        limit = {
            has_idea = GRE_airforce_status_3
        }
        swap_ideas = {
            remove_idea = GRE_airforce_status_3
            add_idea = GRE_airforce_status_4
        }
    }
    air_experience = 5
}

GRE_tied_economy_better = {
    add_stability = 0.05
    swap_ideas = {
        remove_idea = GRE_tied_to_foreign_investments
        add_idea = GRE_tied_to_foreign_investments_1
    }
}

GRE_tied_economy_solved = {
    add_stability = 0.05
    remove_ideas = GRE_tied_to_foreign_investments_1
}





################################################################################

#Apply appropriate cosmetic tag so that 3D models change based on ideology
GRE_set_appropriate_cosmetic_tag = {
	if = {
		limit = { has_country_flag = GRE_byz_unified_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = BYZ_UNIFIED_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = BYZ_UNIFIED_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = BYZ_UNIFIED_fascism
		}
		else = {
			set_cosmetic_tag = BYZ_UNIFIED_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_GREATER_GREECE_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_GREATER_GREECE_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_GREATER_GREECE_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_GREATER_GREECE_fascism
		}
		else = {
			set_cosmetic_tag = GRE_GREATER_GREECE_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_dem_monarchy_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_dem_monarchy_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_dem_monarchy_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_dem_monarchy_fascism
		}
		else = {
			set_cosmetic_tag = GRE_dem_monarchy_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_com_independent_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = GRE_com_independent_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = GRE_com_independent_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = GRE_com_independent_fascism
		}
		else = {
			set_cosmetic_tag = GRE_com_independent_neutrality
		}
	}
	else_if = {
		limit = { has_country_flag = GRE_mae_flag }
		if = {
			limit = { has_government = communism }
			set_cosmetic_tag = MAE_communism
		}
		else_if = {
			limit = { has_government = democratic }
			set_cosmetic_tag = MAE_democratic
		}
		else_if = {
			limit = { has_government = fascism }
			set_cosmetic_tag = MAE_fascism
		}
		else = {
			set_cosmetic_tag = MAE_neutrality
		}
	}
}


#######################################################################################################################################################################################################
########################################################################################[VARIABLE INITIALIZERS]########################################################################################
#######################################################################################################################################################################################################

#############################################################################################
##############[ CALLED BY: find_total_and_faction_weight_of_ideology_characters ]############
#############################################################################################

find_num_weight_initialize_main_weight_variables = {
    set_temp_variable = { mon_weight = 0 }
    set_temp_variable = { dem_weight = 0 }
    set_temp_variable = { com_weight = 0 }
    set_temp_variable = { fas_weight = 0 }
    set_temp_variable = { totalf_weight = 0 }
}

find_num_weight_initialize_battalion_variables = {
    set_temp_variable = { mon_bats = 0 }
    set_temp_variable = { dem_bats = 0 }
    set_temp_variable = { com_bats = 0 }
    set_temp_variable = { fas_bats = 0 }
    set_temp_variable = { mon_ships = 0 }
    set_temp_variable = { dem_ships = 0 }
    set_temp_variable = { com_ships = 0 }
    set_temp_variable = { fas_ships = 0 }
}

find_num_weight_initialize_ships_variables = {
    set_temp_variable = { total_ship_weight = 0 }
    set_temp_variable = { tmp = num_ships_with_type@battleship }
    multiply_temp_variable = { tmp = 3 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@battle_cruiser }
    multiply_temp_variable = { tmp = 2 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@carrier }
    multiply_temp_variable = { tmp = 2 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@heavy_cruiser }
    multiply_temp_variable = { tmp = 2 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@light_cruiser }
    multiply_temp_variable = { tmp = 1.5 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@destroyer }
    multiply_temp_variable = { tmp = 1 }
    add_to_temp_variable = { total_ship_weight = tmp }
    set_temp_variable = { tmp = num_ships_with_type@submarine }
    multiply_temp_variable = { tmp = 0.8 }
    add_to_temp_variable = { total_ship_weight = tmp }
    #log = "[?total_ship_weight]"
}

#############################################################################################
#####################[ CALLED BY: find_num_weight_of_ideology_characters ]###################
#############################################################################################

find_num_weight_initialize_temps = {
    set_temp_variable = { mcnter = 0 }
    set_temp_variable = { rcnter = 0 }
    set_temp_variable = { ccnter = 0 }
    set_temp_variable = { fcnter = 0 }
    set_temp_variable = { cocnter = 0 }
    set_temp_variable = { sdcnter = 0 }
    set_temp_variable = { mfcnter = 0 }
    set_temp_variable = { recnter = 0 }
    set_temp_variable = { mcntera = 0 }
    set_temp_variable = { rcntera = 0 }
    set_temp_variable = { ccntera = 0 }
    set_temp_variable = { fcntera = 0 }
    set_temp_variable = { cocntera = 0 }
    set_temp_variable = { sdcntera = 0 }
    set_temp_variable = { mfcntera = 0 }
    set_temp_variable = { recntera = 0 }
    set_temp_variable = { mcnterag = 0 }
    set_temp_variable = { rcnterag = 0 }
    set_temp_variable = { ccnterag = 0 }
    set_temp_variable = { fcnterag = 0 }
    set_temp_variable = { cocnterag = 0 }
    set_temp_variable = { sdcnterag = 0 }
    set_temp_variable = { mfcnterag = 0 }
    set_temp_variable = { recnterag = 0 }
    set_temp_variable = { mcnterv2 = 0 }
    set_temp_variable = { rcnterv2 = 0 }
    set_temp_variable = { ccnterv2 = 0 }
    set_temp_variable = { fcnterv2 = 0 }
    set_temp_variable = { cocnterv2 = 0 }
    set_temp_variable = { sdcnterv2 = 0 }
    set_temp_variable = { mfcnterv2 = 0 }
    set_temp_variable = { recnterv2 = 0 }
    set_temp_variable = { mcnterv3 = 0 }
    set_temp_variable = { rcnterv3 = 0 }
    set_temp_variable = { ccnterv3 = 0 }
    set_temp_variable = { fcnterv3 = 0 }
    set_temp_variable = { cocnterv3 = 0 }
    set_temp_variable = { sdcnterv3 = 0 }
    set_temp_variable = { mfcnterv3 = 0 }
    set_temp_variable = { recnterv3 = 0 }
    set_temp_variable = { mcnterv4 = 0 }
    set_temp_variable = { rcnterv4 = 0 }
    set_temp_variable = { ccnterv4 = 0 }
    set_temp_variable = { fcnterv4 = 0 }
    set_temp_variable = { cocnterv4 = 0 }
    set_temp_variable = { sdcnterv4 = 0 }
    set_temp_variable = { mfcnterv4 = 0 }
    set_temp_variable = { recnterv4 = 0 }
    ###
    set_temp_variable = { loyal_cnter = 0 }
    set_temp_variable = { friendly_cnter = 0 }
    set_temp_variable = { growing_cnter = 0 }
    set_temp_variable = { adequate_cnter = 0 }
    set_temp_variable = { inconsequential_cnter = 0 }
    set_temp_variable = { unfavorable_cnter = 0 }
    set_temp_variable = { worsening_cnter = 0 }
    set_temp_variable = { horrible_cnter = 0 }
    set_temp_variable = { rebellious_cnter = 0 }
    set_temp_variable = { overall_cnter = 0 }
}
add_assigned_army_or_navy = {
    add_to_temp_variable = { mcntera = rcntera }
    add_to_temp_variable = { mcntera = ccntera }
    add_to_temp_variable = { mcntera = fcntera }
    add_to_temp_variable = { mcntera = cocntera }
    add_to_temp_variable = { mcntera = sdcntera }
    add_to_temp_variable = { mcntera = mfcntera }
    add_to_temp_variable = { mcntera = recntera }
}
add_assigned_army_group = {
    add_to_temp_variable = { mcnterag = rcnterag }
    add_to_temp_variable = { mcnterag = ccnterag }
    add_to_temp_variable = { mcnterag = fcnterag }
    add_to_temp_variable = { mcnterag = cocnterag }
    add_to_temp_variable = { mcnterag = sdcnterag }
    add_to_temp_variable = { mcnterag = mfcnterag }
    add_to_temp_variable = { mcnterag = recnterag }
}