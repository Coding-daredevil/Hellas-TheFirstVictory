########################################################
##############[                           ]#############
##############[      AXIS AND ALLIES      ]#############
##############[                           ]#############
########################################################

axal_gui_initial = {
	# The following scripted effect sets-up the faction at game start.

	GRE = { set_country_flag = axal_gui_initialized }
	set_variable = { alax = tmpALL }
	set_variable = { axal = tmpAXI }
    add_to_array = { faction_axal_p_array = tmpALL }   
    add_to_array = { faction_axal_p_array = tmpAXI }  
	add_to_array = { faction_axal_m_array = 1 } 
	add_to_array = { faction_axal_m_array = 2 }    
	reload_axal_gui = yes
}

axal_gui_call = {
    ####VARIABLE CLAMPING TO NOT EXCEED LIMIT [0,100]####
    clamp_variable = { 
        var = axal
        min = 0
        max = 100
    }
    #####################################################################################
    #####################################################################################
    clear_array = faction_axal_p_array
    ####AXAL####
    set_temp_variable = { a = 100 }
    subtract_from_temp_variable = { a = var:axal }
	set_variable = { alax = a }
    add_to_array = { faction_axal_p_array = var:alax }
    add_to_array = { faction_axal_p_array = var:axal }
    reload_axal_gui = yes
}

reload_axal_gui = {
    clear_array = axis_allies_array
    
	for_each_loop = {
		array = faction_axal_p_array

		add_to_array = { tmp = faction_axal_p_array^i }
	} 

	set_temp_variable = { temp_cindex_1 = 0 }
	set_temp_variable = { temp_cindex_2 = 1 }
	set_temp_variable = { temp_csize = tmp^num }
	subtract_from_temp_variable = { temp_csize = 1 }    

	while_loop_effect = {
		limit = {
			check_variable = { temp_cindex_1 < temp_csize }
		}
		add_to_variable = { tmp^temp_cindex_2 = tmp^temp_cindex_1 }
		add_to_temp_variable = { temp_cindex_1 = 1 }
		add_to_temp_variable = { temp_cindex_2 = 1 }
	}
    
    for_loop_effect = {
        start = 0
        end = tmp^num
        
        resize_array = { array = axis_allies_array value = faction_axal_m_array^v size = tmp^v }       
    }

	clear_array = tmp    
}

########################################################
##############[                           ]#############
##############[           REST            ]#############
##############[                           ]#############
########################################################

refresh_balkan_pact_desirability_gui_THIS = {
	# This function works in THIS scope and refreshes balkan pact desirability array.

	clamp_variable={ var=THIS.balkan_pact_desirability min=0 max=100 }
	#################################################################
	set_temp_variable={ x=100 }
	subtract_from_temp_variable={ x=THIS.balkan_pact_desirability }
	clear_array = THIS.balkan_pact_desirability_array
	#log="THIS: [?THIS.GetName], des: [?balkan_pact_desirability|.2], 1-des: [?x]"
	resize_array = { array=THIS.balkan_pact_desirability_array value=1 size=x }
	resize_array = { array=THIS.balkan_pact_desirability_array value=2 size=100 }
}

modify_desiribility_by_tmpAW_of_THIS = {
	
	add_to_variable={ balkan_pact_desirability=tmpAW tooltip=alliance_weight_fluctuation_tmpAW_tt }
    refresh_balkan_pact_desirability_gui_THIS=yes
}

apply_on_actions_fluctuations_of_itagg_escalation = {
	# This functions is meant to be called in 'on actions' every week to reduce acceleration by the specified margin.

	set_temp_variable={ x=0.5 }
	subtract_from_variable={ italian_escalation_level=x }
	refresh_italian_escalation_and_acceleration=yes
}

apply_on_actions_fluctuations_of_itagg_acceleration = {
	# This functions is meant to be called in 'on actions' every week to reduce acceleration by the specified margin.

	set_temp_variable={ x=2 }
	subtract_from_variable={ italian_escalation_accelerator=x }
	refresh_italian_escalation_and_acceleration=yes
}

shut_down_italian_aggression = {
	clear_variable=italian_escalation_level
	clear_variable=italian_escalation_accelerator
	refresh_italian_escalation_and_acceleration=yes
}

apply_italian_aggression_effects_through_tmpESC_tmpACC = {
	# Quick function to avoid all the line dumps.

	if={
		limit={ NOT={ has_country_flag=GRE_italians_connections_reestablished }}

		custom_effect_tooltip=itagg_escalation_header_tt
		set_temp_variable={ x=tmpESC }
		add_to_temp_variable={ x=GRE.italian_escalation_accelerator }
		add_to_variable={ GRE.italian_escalation_level=x tooltip=itagg_escalation_increased_by_tt }
		add_to_variable={ GRE.italian_escalation_accelerator=tmpACC tooltip=itagg_accelerator_increased_by_tt }
		refresh_italian_escalation_and_acceleration=yes
	}
}

apply_italian_aggression_effects_through_tmpESC_tmpACC_without_acceleration = {
	# Quick function to avoid all the line dumps. This will not add accelerator to aggression.

	if={
		limit={ NOT={ has_country_flag=GRE_italians_connections_reestablished }}

		custom_effect_tooltip=itagg_escalation_header_tt
		add_to_variable={ GRE.italian_escalation_level=tmpESC tooltip=itagg_escalation_increased_by_tt }
		add_to_variable={ GRE.italian_escalation_accelerator=tmpACC tooltip=itagg_accelerator_increased_by_tt }
		refresh_italian_escalation_and_acceleration=yes
	}
}

apply_italian_aggression_effects_only_acceleration = {
	# Quick function to avoid all the line dumps. This will not add accelerator to aggression.

	if={
		limit={ NOT={ has_country_flag=GRE_italians_connections_reestablished }}

		custom_effect_tooltip=itagg_escalation_header_tt
		add_to_variable={ GRE.italian_escalation_level=italian_escalation_accelerator tooltip=itagg_escalation_increased_by_tt }
		refresh_italian_escalation_and_acceleration=yes
	}
}

refresh_italian_escalation_and_acceleration = {
	
	clamp_variable={ var=italian_escalation_level min=0 max=100 }
	clamp_variable={ var=italian_escalation_accelerator min=0 max=50 }
	####################################################################
	clear_array = italian_aggression_main_array
	resize_array = { array=italian_aggression_main_array value=2 size=italian_escalation_level }
	resize_array = { array=italian_aggression_main_array value=1 size=100 }
	########################################################################
	clear_array = italian_aggression_accelerator_array
	resize_array = { array=italian_aggression_accelerator_array value=2 size=italian_escalation_accelerator }
	resize_array = { array=italian_aggression_accelerator_array value=1 size=50 }
}

check_and_apply_on_weekly_italian_nagging = {
	# This function aims to check & apply italian nagging opinion modifier on certain nations depending on a variety of circumstances. The goal is to simulate the process
	# followed by the Italian diplomatic entourage. In that regard, we need to use escalation level, allies & enemies of Italy and so forth.

	if = {
		limit={ ITA={ NOT={ has_country_flag=ita_nagging_backfired }}}

		if={ limit={ check_variable={ GRE.italian_escalation_level<10 }} set_temp_variable={ fire_event=GRE.italian_escalation_level }}
		else_if={ limit={ check_variable={ ITA.political_power<25.00 }} set_temp_variable={ fire_event=12.50 }}
		else_if={ limit={ check_variable={ ITA.political_power<50.00 }} set_temp_variable={ fire_event=25.0 }}
		else_if={ limit={ check_variable={ ITA.political_power<75.00 }} set_temp_variable={ fire_event=37.5 }}
		else_if={ limit={ check_variable={ ITA.political_power<100.00 }} set_temp_variable={ fire_event=50.0 }}
		else_if={ limit={ check_variable={ ITA.political_power<150.00 }} set_temp_variable={ fire_event=62.5 }}
		else_if={ limit={ check_variable={ ITA.political_power<200.00 }} set_temp_variable={ fire_event=75.0 }}
		else={ set_temp_variable={ fire_event=90.0 }}
		subtract_from_temp_variable={ cancel_event?100=fire_event }
		random_list={
			seed=random
			
			cancel_event={
				log="Italy has decided not to nag this week."
			}
			fire_event={
				clear_array=GRE.ita_nagging_array
				clear_array=GRE.ita_nagging_worked_array
				clear_array=GRE.ita_nagging_failed_array
				clear_array=GRE.ita_nagging_backfired_array
				############[ Step I. Decide Number of Recipients ]############
				set_temp_variable_to_random={ var=recip min=1 max=4 integer=yes }
				set_temp_variable={ mag=GRE.italian_escalation_level }
				divide_temp_variable={ mag=20 }
				multiply_temp_variable={ recip=mag }
				round_temp_variable=recip
				############[ Step II. Select Candidates ]############
				every_country = {
					limit = {
						NOT={ original_tag=ITA }
						OR={
							is_ally_with=ITA
							is_guaranteed_by=ITA
							has_guaranteed=ITA
							has_military_access_to=ITA
							gives_military_access_to=ITA
							has_opinion={ target=ITA value>20 }
						}
						NOT = { has_opinion_modifier=ITA_nagged_TARGET_against_GRE }
					}
					add_to_array={ array=GRE.ita_nagging_array value=THIS.id }
				}
				every_country={
					limit={
						NOT={
							OR={
								original_tag=ITA
								has_war_with=ITA
								has_opinion_modifier=ITA_nagged_TARGET_against_GRE
								is_embargoing=ITA
								is_embargoed_by=ITA
							}
						}
						OR={ is_in_array={ array=GRE.important_nations value=THIS.id } is_major=yes }
					}
					add_to_array={ array=GRE.ita_nagging_array value=THIS.id }
				}
				############[ Step II. Select Recipients from Candidates and Apply ]############
				resize_array={ array=GRE.ita_nagging_array size=var:recip }
				for_each_scope_loop={
					array=GRE.ita_nagging_array

					set_temp_variable={ b2=50 }
					set_temp_variable={ b2_bonus=0 }
					###[Italian Success Bonuses]###
					if={ limit={ is_ally_with=ITA } add_to_temp_variable={ b2=30 }}
					if={ limit={ is_guaranteed_by=ITA } add_to_temp_variable={ b2=10 }}
					if={ limit={ has_guaranteed=ITA } add_to_temp_variable={ b2=10 }}
					if={ limit={ has_military_access_to=ITA } add_to_temp_variable={ b2=15 }}
					if={ limit={ gives_military_access_to=ITA } add_to_temp_variable={ b2=15 }}
					if={ limit={ has_opinion={ target=ITA value>20 }} add_to_temp_variable={ b2=5 }}
					###[Italian Failure Bonuses]###
					set_temp_variable={ x=THIS.favor@GRE }
					if={
						limit={ check_variable={ x<0 }}
						add_to_temp_variable={ b2=30 }
					}
					else={
						set_temp_variable={ tmpTHR=100 }
						set_temp_variable={ tmpREV=1 }
						calculate_linearly_y_ax_b=yes
						multiply_temp_variable={ y=10 }
						subtract_from_temp_variable={ b2=y }
					}
					clamp_temp_variable={ var=b2 min=0 max=100 }
					set_temp_variable={ b1=100 }
					subtract_from_temp_variable={ b1=b2 }
					random_list={
						#log=yes
						seed=random

						b1={
							set_temp_variable={ b22=10 }
							divide_temp_variable={ y=2.5 }
							multiply_temp_variable={ b22=y }
							set_temp_variable={ b11=100 }
							subtract_from_temp_variable={ b11=b22 }
							random_list={
								seed=random
								
								b11={ add_to_array={ array=GRE.ita_nagging_failed_array value=THIS.id }}
								b22={ add_to_array={ array=GRE.ita_nagging_backfired_array value=THIS.id }}
							}
						}
						b2={ add_to_array={ array=GRE.ita_nagging_worked_array value=THIS.id }}
					}
				}
				GRE={ country_event={ id=hellas.248 days=0 }}
			}
		}
	}
}